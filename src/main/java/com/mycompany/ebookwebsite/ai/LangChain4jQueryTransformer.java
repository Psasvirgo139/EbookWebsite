package com.mycompany.ebookwebsite.ai;

import dev.langchain4j.data.message.ChatMessage;
import dev.langchain4j.data.message.SystemMessage;
import dev.langchain4j.data.message.UserMessage;
import dev.langchain4j.model.chat.ChatLanguageModel;
import dev.langchain4j.model.openai.OpenAiChatModel;
import dev.langchain4j.rag.query.Query;
import dev.langchain4j.rag.query.transformer.QueryTransformer;

import com.mycompany.ebookwebsite.model.QuestionContext;
import com.mycompany.ebookwebsite.utils.Utils;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.ArrayList;

/**
 * üîÑ LangChain4j-based Query Transformer
 * 
 * Thay th·∫ø QuestionAnalysisService v·ªõi AI-powered query transformation
 * Features:
 * - Query compression cho follow-up questions
 * - Query expansion cho better retrieval
 * - Intent classification
 * - Context-aware query enhancement
 */
public class LangChain4jQueryTransformer implements QueryTransformer {
    
    private static final Logger logger = LoggerFactory.getLogger(LangChain4jQueryTransformer.class);
    
    private final ChatLanguageModel chatModel;
    private final QuestionContextAnalyzer contextAnalyzer;
    
    public LangChain4jQueryTransformer() {
        try {
            // Initialize OpenAI chat model
            String apiKey = Utils.getEnv("OPENAI_API_KEY");
            if (apiKey == null || apiKey.isEmpty()) {
                logger.warn("OPENAI_API_KEY not set, using dummy key");
                apiKey = "dummy-key-for-initialization";
            }
            
            this.chatModel = OpenAiChatModel.builder()
                    .apiKey(apiKey)
                    .modelName("gpt-3.5-turbo")
                    .temperature(0.3)
                    .build();
            
            this.contextAnalyzer = new QuestionContextAnalyzer();
            
            logger.info("‚úÖ LangChain4jQueryTransformer initialized successfully");
            
        } catch (Exception e) {
            logger.error("‚ùå Failed to initialize LangChain4jQueryTransformer: " + e.getMessage(), e);
            throw new RuntimeException("Failed to initialize query transformer", e);
        }
    }
    
    /**
     * üîÑ Transform query using AI-powered analysis
     */
    @Override
    public List<Query> transform(Query query) {
        try {
            String originalQuery = query.text();
            logger.info("üîÑ Transforming query: {}", originalQuery);
            
            // Analyze question context
            QuestionContext context = contextAnalyzer.analyzeQuestion(originalQuery);
            
            // Transform based on question type
            List<Query> transformedQueries;
            switch (context.getQuestionType()) {
                case BOOK_SEARCH:
                    transformedQueries = transformBookSearchQuery(query, context);
                    break;
                case CHARACTER_QUESTION:
                    transformedQueries = transformCharacterQuery(query, context);
                    break;
                case PLOT_QUESTION:
                    transformedQueries = transformPlotQuery(query, context);
                    break;
                case RECOMMENDATION:
                    transformedQueries = transformRecommendationQuery(query, context);
                    break;
                case CONTENT_INQUIRY:
                    transformedQueries = transformContentQuery(query, context);
                    break;
                default:
                    transformedQueries = List.of(enhanceQuery(query, context));
                    break;
            }
            
            logger.info("‚úÖ Query transformed into {} queries", transformedQueries.size());
            return transformedQueries;
            
        } catch (Exception e) {
            logger.error("‚ùå Query transformation failed: " + e.getMessage(), e);
            // Return original query as fallback
            return List.of(query);
        }
    }
    
    /**
     * üìö Transform book search queries
     */
    private List<Query> transformBookSearchQuery(Query originalQuery, QuestionContext context) {
        Query enhancedQuery = enhanceQuery(originalQuery, context);
        
        // Create multiple search strategies
        List<Query> queries = new ArrayList<>();
        queries.add(enhancedQuery); // Original enhanced query
        queries.add(Query.from("t√¨m s√°ch " + String.join(" ", context.getKeywords()))); // Keyword-based
        queries.add(Query.from("s√°ch hay " + context.getIntent())); // Intent-based
        
        return queries;
    }
    
    /**
     * üë• Transform character-related queries
     */
    private List<Query> transformCharacterQuery(Query originalQuery, QuestionContext context) {
        Query enhancedQuery = enhanceQuery(originalQuery, context);
        
        List<Query> queries = new ArrayList<>();
        queries.add(enhancedQuery);
        queries.add(Query.from("nh√¢n v·∫≠t " + String.join(" ", context.getKeywords())));
        queries.add(Query.from("t√≠nh c√°ch nh√¢n v·∫≠t " + context.getIntent()));
        
        return queries;
    }
    
    /**
     * üìñ Transform plot-related queries
     */
    private List<Query> transformPlotQuery(Query originalQuery, QuestionContext context) {
        Query enhancedQuery = enhanceQuery(originalQuery, context);
        
        List<Query> queries = new ArrayList<>();
        queries.add(enhancedQuery);
        queries.add(Query.from("c·ªët truy·ªán " + String.join(" ", context.getKeywords())));
        queries.add(Query.from("di·ªÖn bi·∫øn " + context.getIntent()));
        
        return queries;
    }
    
    /**
     * üéØ Transform recommendation queries
     */
    private List<Query> transformRecommendationQuery(Query originalQuery, QuestionContext context) {
        Query enhancedQuery = enhanceQuery(originalQuery, context);
        
        List<Query> queries = new ArrayList<>();
        queries.add(enhancedQuery);
        queries.add(Query.from("g·ª£i √Ω s√°ch " + String.join(" ", context.getKeywords())));
        queries.add(Query.from("s√°ch t∆∞∆°ng t·ª± " + context.getIntent()));
        
        return queries;
    }
    
    /**
     * üìù Transform content inquiry queries
     */
    private List<Query> transformContentQuery(Query originalQuery, QuestionContext context) {
        Query enhancedQuery = enhanceQuery(originalQuery, context);
        
        List<Query> queries = new ArrayList<>();
        queries.add(enhancedQuery);
        queries.add(Query.from("n·ªôi dung " + String.join(" ", context.getKeywords())));
        queries.add(Query.from("chi ti·∫øt " + context.getIntent()));
        
        return queries;
    }
    
    /**
     * üöÄ Enhance query using AI
     */
    private Query enhanceQuery(Query originalQuery, QuestionContext context) {
        try {
            String systemPrompt = buildSystemPrompt(context);
            String userPrompt = buildUserPrompt(originalQuery.text(), context);
            
            List<ChatMessage> messages = List.of(
                new SystemMessage(systemPrompt),
                new UserMessage(userPrompt)
            );
            
            String enhancedText = chatModel.generate(messages).content().text();
            
            return Query.from(enhancedText);
            
        } catch (Exception e) {
            logger.error("‚ùå Query enhancement failed: " + e.getMessage());
            return originalQuery;
        }
    }
    
    /**
     * üìù Build system prompt for query enhancement
     */
    private String buildSystemPrompt(QuestionContext context) {
        return String.format(
            "B·∫°n l√† chuy√™n gia ph√¢n t√≠ch c√¢u h·ªèi v√† t√¨m ki·∫øm s√°ch.\n\n" +
            "Nhi·ªám v·ª•: C·∫£i thi·ªán c√¢u h·ªèi ƒë·ªÉ t√¨m ki·∫øm hi·ªáu qu·∫£ h∆°n.\n\n" +
            "Th√¥ng tin ng·ªØ c·∫£nh:\n" +
            "- Lo·∫°i c√¢u h·ªèi: %s\n" +
            "- √ù ƒë·ªãnh: %s\n" +
            "- T·ª´ kh√≥a: %s\n" +
            "- ƒê·ªô tin c·∫≠y: %.2f\n\n" +
            "Y√™u c·∫ßu:\n" +
            "- Gi·ªØ nguy√™n √Ω nghƒ©a g·ªëc\n" +
            "- Th√™m t·ª´ kh√≥a li√™n quan\n" +
            "- T·ªëi ∆∞u cho t√¨m ki·∫øm semantic\n" +
            "- Tr·∫£ v·ªÅ c√¢u h·ªèi ƒë√£ c·∫£i thi·ªán",
            context.getQuestionType(),
            context.getIntent(),
            String.join(", ", context.getKeywords()),
            context.getConfidence()
        );
    }
    
    /**
     * üìù Build user prompt for query enhancement
     */
    private String buildUserPrompt(String originalQuery, QuestionContext context) {
        return String.format(
            "C√¢u h·ªèi g·ªëc: %s\n\n" +
            "H√£y c·∫£i thi·ªán c√¢u h·ªèi n√†y ƒë·ªÉ t√¨m ki·∫øm hi·ªáu qu·∫£ h∆°n.\n" +
            "Tr·∫£ v·ªÅ ch·ªâ c√¢u h·ªèi ƒë√£ c·∫£i thi·ªán, kh√¥ng c√≥ gi·∫£i th√≠ch th√™m.",
            originalQuery
        );
    }
    
    /**
     * üîç Question Context Analyzer (simplified version)
     */
    private static class QuestionContextAnalyzer {
        
        public QuestionContext analyzeQuestion(String question) {
            QuestionContext context = new QuestionContext(question);
            
            // Simple classification logic (can be enhanced)
            String lowerQuestion = question.toLowerCase();
            
            if (lowerQuestion.contains("t√¨m") || lowerQuestion.contains("search")) {
                context.setQuestionType(QuestionContext.QuestionType.BOOK_SEARCH);
            } else if (lowerQuestion.contains("nh√¢n v·∫≠t") || lowerQuestion.contains("character")) {
                context.setQuestionType(QuestionContext.QuestionType.CHARACTER_QUESTION);
            } else if (lowerQuestion.contains("c·ªët truy·ªán") || lowerQuestion.contains("plot")) {
                context.setQuestionType(QuestionContext.QuestionType.PLOT_QUESTION);
            } else if (lowerQuestion.contains("g·ª£i √Ω") || lowerQuestion.contains("recommend")) {
                context.setQuestionType(QuestionContext.QuestionType.RECOMMENDATION);
            } else {
                context.setQuestionType(QuestionContext.QuestionType.CONTENT_INQUIRY);
            }
            
            // Extract keywords
            String[] words = lowerQuestion.split("\\s+");
            context.setKeywords(List.of(words));
            
            // Set intent
            context.setIntent("T√¨m ki·∫øm th√¥ng tin");
            
            // Set confidence
            context.setConfidence(0.8);
            
            return context;
        }
    }
} 