package com.mycompany.ebookwebsite.ai;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONObject;

import com.mycompany.ebookwebsite.utils.Utils;

/**
 * ü§ñ OpenAI Content Analysis Service
 * 
 * Chuy√™n ph√¢n t√≠ch n·ªôi dung s√°ch v√† t·∫°o ph·∫£n h·ªìi t·ª± nhi√™n, th√¥ng minh
 */
public class OpenAIContentAnalysisService {
    
    private final String apiKey;
    private final HttpClient httpClient;
    private final String model;
    
    public OpenAIContentAnalysisService() {
        this.apiKey = Utils.getEnv("OPENAI_API_KEY");
        this.httpClient = HttpClient.newHttpClient();
        this.model = Utils.getEnv("CONTENT_ANALYSIS_MODEL");
        
        System.out.println("ü§ñ OpenAI Content Analysis Service initialized");
        if (apiKey == null || apiKey.equals("test-api-key-for-demo")) {
            System.out.println("‚ö†Ô∏è Using demo mode - Set OPENAI_API_KEY in .env for full functionality");
        }
    }
    
    /**
     * üìö Analyze book content and generate natural response
     */
    public String analyzeBookContent(String content, String userQuestion, List<String> bookTitles) {
        try {
            if (isApiKeyValid()) {
                return callOpenAIAPI(content, userQuestion, bookTitles);
            } else {
                return generateDemoResponse(content, userQuestion, bookTitles);
            }
        } catch (Exception e) {
            System.err.println("Error in content analysis: " + e.getMessage());
            return generateFallbackResponse(userQuestion, bookTitles);
        }
    }
    
    /**
     * üåê Call OpenAI API for content analysis
     */
    private String callOpenAIAPI(String content, String userQuestion, List<String> bookTitles) throws Exception {
        String prompt = buildPrompt(content, userQuestion, bookTitles);
        
        JSONObject requestBody = new JSONObject();
        requestBody.put("model", model != null ? model : "gpt-3.5-turbo");
        requestBody.put("max_tokens", 1000);
        requestBody.put("temperature", 0.7);
        
        JSONArray messages = new JSONArray();
        
        // System message
        JSONObject systemMessage = new JSONObject();
        systemMessage.put("role", "system");
        systemMessage.put("content", buildSystemPrompt());
        messages.put(systemMessage);
        
        // User message
        JSONObject userMessage = new JSONObject();
        userMessage.put("role", "user");
        userMessage.put("content", prompt);
        messages.put(userMessage);
        
        requestBody.put("messages", messages);
        
        HttpRequest request = HttpRequest.newBuilder()
            .uri(URI.create("https://api.openai.com/v1/chat/completions"))
            .header("Authorization", "Bearer " + apiKey)
            .header("Content-Type", "application/json")
            .POST(HttpRequest.BodyPublishers.ofString(requestBody.toString()))
            .build();
        
        HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
        
        if (response.statusCode() == 200) {
            JSONObject responseJson = new JSONObject(response.body());
            JSONArray choices = responseJson.getJSONArray("choices");
            if (choices.length() > 0) {
                return choices.getJSONObject(0)
                    .getJSONObject("message")
                    .getString("content")
                    .trim();
            }
        } else {
            System.err.println("OpenAI API error: " + response.statusCode() + " - " + response.body());
            return generateFallbackResponse(userQuestion, bookTitles);
        }
        
        return generateFallbackResponse(userQuestion, bookTitles);
    }
    
    /**
     * üìù Build system prompt for natural conversation
     */
    private String buildSystemPrompt() {
        return "B·∫°n l√† m·ªôt ng∆∞·ªùi th·ªß th∆∞ th√¢n thi·ªán, hi·ªÉu bi·∫øt s√¢u s·∫Øc v·ªÅ vƒÉn h·ªçc v√† r·∫•t gi·ªèi k·ªÉ chuy·ªán.\n\n" +
               "NHI·ªÜM V·ª§:\n" +
               "- Tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ n·ªôi dung s√°ch d·ª±a tr√™n th√¥ng tin ƒë∆∞·ª£c cung c·∫•p\n" +
               "- Giao ti·∫øp t·ª± nhi√™n, d·∫ªo mi·ªáng nh∆∞ ƒëang tr√≤ chuy·ªán v·ªõi b·∫°n b√®\n" +
               "- S·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ t·∫°o kh√¥ng kh√≠ th√¢n thi·ªán\n" +
               "- C√≥ c·∫£m x√∫c, nhi·ªát t√¨nh khi n√≥i v·ªÅ s√°ch\n" +
               "- D·∫´n d·∫Øt cu·ªôc tr√≤ chuy·ªán ti·∫øp t·ª•c\n\n" +
               "PHONG C√ÅCH:\n" +
               "- Kh√¥ng m√°y m√≥c, kh√¥ng s·ª≠ d·ª•ng ng√¥n ng·ªØ formal\n" +
               "- K·ªÉ chuy·ªán sinh ƒë·ªông, c√≥ h·ªìn\n" +
               "- Chia s·∫ª c·∫£m x√∫c v·ªÅ c√°c nh√¢n v·∫≠t v√† t√¨nh hu·ªëng\n" +
               "- ƒê·∫∑t c√¢u h·ªèi ƒë·ªÉ khuy·∫øn kh√≠ch ng∆∞·ªùi d√πng tham gia\n\n" +
               "QUY T·∫ÆC:\n" +
               "- CH·ªà s·ª≠ d·ª•ng th√¥ng tin t·ª´ n·ªôi dung s√°ch ƒë∆∞·ª£c cung c·∫•p\n" +
               "- KH√îNG b·ªãa th√™m th√¥ng tin kh√¥ng c√≥ trong s√°ch\n" +
               "- N·∫øu kh√¥ng c√≥ th√¥ng tin, h√£y th·ª´a nh·∫≠n v√† g·ª£i √Ω c√¢u h·ªèi kh√°c";
    }
    
    /**
     * üìñ Build content analysis prompt
     */
    private String buildPrompt(String content, String userQuestion, List<String> bookTitles) {
        return String.format(
            "N·ªòI DUNG S√ÅCH: %s\n\n" +
            "T√äN S√ÅCH: %s\n\n" +
            "C√ÇU H·ªéI: %s\n\n" +
            "H√£y tr·∫£ l·ªùi t·ª± nhi√™n, th√¢n thi·ªán v·ªõi emoji. Ch·ªâ d√πng th√¥ng tin t·ª´ n·ªôi dung s√°ch.",
            content.length() > 8000 ? content.substring(0, 8000) + "..." : content, 
            String.join(", ", bookTitles), 
            userQuestion
        );
    }
    
    /**
     * üé≠ Generate demo response when no API key
     */
    private String generateDemoResponse(String content, String userQuestion, List<String> bookTitles) {
        String bookTitle = bookTitles.isEmpty() ? "cu·ªën s√°ch n√†y" : bookTitles.get(0);
        
        // Simple keyword-based response generation
        String lowerQuestion = userQuestion.toLowerCase();
        
        if (lowerQuestion.contains("nh√¢n v·∫≠t") || lowerQuestion.contains("character")) {
            return String.format("·ªí, b·∫°n h·ªèi v·ªÅ nh√¢n v·∫≠t trong %s √†! üòä\n\n" +
                "T·ª´ n·ªôi dung t√¥i ƒë·ªçc ƒë∆∞·ª£c, c√≥ nh·ªØng nh√¢n v·∫≠t r·∫•t th√∫ v·ªã ƒë·∫•y!\n" +
                "M·ªói nh√¢n v·∫≠t ƒë·ªÅu c√≥ t√≠nh c√°ch v√† vai tr√≤ ri√™ng trong c√¢u chuy·ªán.\n\n" +
                "B·∫°n c√≥ mu·ªën t√¥i k·ªÉ c·ª• th·ªÉ v·ªÅ nh√¢n v·∫≠t n√†o kh√¥ng? Hay b·∫°n t√≤ m√≤ v·ªÅ m·ªëi quan h·ªá gi·ªØa c√°c nh√¢n v·∫≠t? ü§î‚ú®", 
                bookTitle);
        }
        
        if (lowerQuestion.contains("c·ªët truy·ªán") || lowerQuestion.contains("n·ªôi dung") || lowerQuestion.contains("k·ªÉ")) {
            return String.format("Wow, %s th·∫≠t s·ª± l√† m·ªôt c√¢u chuy·ªán h·∫•p d·∫´n! üìö‚ú®\n\n" +
                "T·ª´ nh·ªØng g√¨ t√¥i ƒë·ªçc ƒë∆∞·ª£c, ƒë√¢y l√† m·ªôt t√°c ph·∫©m v·ªõi c·ªët truy·ªán th√∫ v·ªã,\n" +
                "c√≥ nh·ªØng t√¨nh ti·∫øt ƒë∆∞·ª£c x√¢y d·ª±ng kh√©o l√©o v√† √Ω nghƒ©a s√¢u s·∫Øc.\n\n" +
                "B·∫°n mu·ªën t√¥i k·ªÉ v·ªÅ ph·∫ßn n√†o c·ª• th·ªÉ? Ph·∫ßn m·ªü ƒë·∫ßu, cao tr√†o hay k·∫øt th√∫c?\n" +
                "T√¥i s·∫µn s√†ng chia s·∫ª nh·ªØng ƒëi·ªÅu th√∫ v·ªã! üé≠üìñ", 
                bookTitle);
        }
        
        if (lowerQuestion.contains("th√≠ch") || lowerQuestion.contains("hay") || lowerQuestion.contains("ƒë√°nh gi√°")) {
            return String.format("T√¥i nghƒ© %s l√† m·ªôt cu·ªën s√°ch r·∫•t ƒë√°ng ƒë·ªçc! üåü\n\n" +
                "Phong c√°ch vi·∫øt th√∫ v·ªã, n·ªôi dung c√≥ chi·ªÅu s√¢u, v√† c√°ch t√°c gi·∫£\n" +
                "x√¢y d·ª±ng c√¢u chuy·ªán th·ª±c s·ª± cu·ªën h√∫t ng∆∞·ªùi ƒë·ªçc.\n\n" +
                "B·∫°n ƒë√£ ƒë·ªçc ch∆∞a? C·∫£m gi√°c c·ªßa b·∫°n v·ªÅ cu·ªën s√°ch n√†y th·∫ø n√†o?\n" +
                "T√¥i r·∫•t mu·ªën bi·∫øt √Ω ki·∫øn c·ªßa b·∫°n! üòäüìö", 
                bookTitle);
        }
        
        // Default response
        return String.format("C√¢u h·ªèi hay ƒë·∫•y! ü§î V·ªÅ %s, t√¥i c√≥ th·ªÉ chia s·∫ª nhi·ªÅu ƒëi·ªÅu th√∫ v·ªã.\n\n" +
            "T·ª´ n·ªôi dung t√¥i ƒë√£ ƒë·ªçc, ƒë√¢y l√† m·ªôt t√°c ph·∫©m c√≥ gi√° tr·ªã v√† √Ω nghƒ©a.\n" +
            "T√°c gi·∫£ ƒë√£ kh√©o l√©o x√¢y d·ª±ng c√¢u chuy·ªán v·ªõi nh·ªØng chi ti·∫øt th√∫ v·ªã.\n\n" +
            "B·∫°n c√≥ th·ªÉ h·ªèi c·ª• th·ªÉ h∆°n v·ªÅ nh√¢n v·∫≠t, c·ªët truy·ªán, hay √Ω nghƒ©a c·ªßa t√°c ph·∫©m kh√¥ng?\n" +
            "T√¥i s·∫Ω chia s·∫ª nh·ªØng hi·ªÉu bi·∫øt c·ªßa m√¨nh! üìñ‚ú®", 
            bookTitle);
    }
    
    /**
     * üîÑ Generate fallback response on error
     */
    private String generateFallbackResponse(String userQuestion, List<String> bookTitles) {
        String bookTitle = bookTitles.isEmpty() ? "cu·ªën s√°ch n√†y" : bookTitles.get(0);
        
        return String.format("Xin l·ªói, hi·ªán t·∫°i t√¥i g·∫∑p ch√∫t kh√≥ khƒÉn trong vi·ªác ph√¢n t√≠ch n·ªôi dung %s m·ªôt c√°ch chi ti·∫øt. üòî\n\n" +
            "Nh∆∞ng t√¥i v·∫´n c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ cu·ªën s√°ch n√†y!\n" +
            "H√£y th·ª≠ h·ªèi t√¥i v·ªÅ:\n" +
            "‚Ä¢ Th√¥ng tin c∆° b·∫£n v·ªÅ s√°ch üìö\n" +
            "‚Ä¢ Th·ªÉ lo·∫°i v√† phong c√°ch ‚ú®\n" +
            "‚Ä¢ G·ª£i √Ω s√°ch t∆∞∆°ng t·ª± üí°\n\n" +
            "Ho·∫∑c b·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i c√¢u h·ªèi n√†y sau nh√©! üîÑ", 
            bookTitle);
    }
    
    /**
     * üîë Check if API key is valid
     */
    private boolean isApiKeyValid() {
        return apiKey != null && 
               !apiKey.trim().isEmpty() && 
               !apiKey.equals("test-api-key-for-demo") &&
               !apiKey.equals("your-openai-api-key-here");
    }
} 