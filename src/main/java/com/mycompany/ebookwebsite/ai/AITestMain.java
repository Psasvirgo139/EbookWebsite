package com.mycompany.ebookwebsite.ai;

import java.util.List;
import java.util.Map;
import java.util.Arrays;

/**
 * üß™ AI Test Main - Test t·∫•t c·∫£ AI services v·ªõi LangChain4j
 * 
 * Test cases cho:
 * - LangChain4jAIChatService
 * - EnhancedRAGService  
 * - OpenAIContentAnalysisService
 * - QueryTransformationPipeline
 * - LangChain4jBookContentRetriever
 */
public class AITestMain {
    
    public static void main(String[] args) {
        System.out.println("üöÄ Starting AI Services Test Suite");
        System.out.println("=====================================");
        
        try {
            // Test 1: LangChain4j AI Chat Service
            testLangChain4jAIChatService();
            
            // Test 2: Enhanced RAG Service
            testEnhancedRAGService();
            
            // Test 3: OpenAI Content Analysis Service
            testOpenAIContentAnalysisService();
            
            // Test 4: Query Transformation Pipeline
            testQueryTransformationPipeline();
            
            // Test 5: Book Content Retriever
            testBookContentRetriever();
            
            System.out.println("\n‚úÖ All AI services tested successfully!");
            
        } catch (Exception e) {
            System.err.println("‚ùå Test failed: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * üí¨ Test LangChain4j AI Chat Service
     */
    private static void testLangChain4jAIChatService() {
        System.out.println("\nüìù Testing LangChain4j AI Chat Service...");
        
        try {
            LangChain4jAIChatService chatService = new LangChain4jAIChatService();
            
            // Test basic chat
            String response1 = chatService.processChat(1, "session1", "Xin ch√†o! B·∫°n c√≥ th·ªÉ gi√∫p t√¥i t√¨m s√°ch kh√¥ng?", null);
            System.out.println("‚úÖ Basic chat test: " + response1.substring(0, Math.min(100, response1.length())) + "...");
            
            // Test book-specific chat
            String response2 = chatService.chatAboutBook("K·ªÉ cho t√¥i v·ªÅ nh√¢n v·∫≠t ch√≠nh", "book123");
            System.out.println("‚úÖ Book chat test: " + response2.substring(0, Math.min(100, response2.length())) + "...");
            
            // Test recommendations
            String response3 = chatService.getRecommendations("T√¥i th√≠ch s√°ch khoa h·ªçc vi·ªÖn t∆∞·ªüng");
            System.out.println("‚úÖ Recommendations test: " + response3.substring(0, Math.min(100, response3.length())) + "...");
            
            // Test book analysis
            String response4 = chatService.analyzeBookContent("ƒê√¢y l√† n·ªôi dung s√°ch v·ªÅ khoa h·ªçc vi·ªÖn t∆∞·ªüng...");
            System.out.println("‚úÖ Book analysis test: " + response4.substring(0, Math.min(100, response4.length())) + "...");
            
            // Test search
            String response5 = chatService.searchBooks("s√°ch khoa h·ªçc");
            System.out.println("‚úÖ Search test: " + response5.substring(0, Math.min(100, response5.length())) + "...");
            
            System.out.println("‚úÖ LangChain4j AI Chat Service test completed");
            
        } catch (Exception e) {
            System.err.println("‚ùå LangChain4j AI Chat Service test failed: " + e.getMessage());
        }
    }
    
    /**
     * üîç Test Enhanced RAG Service
     */
    private static void testEnhancedRAGService() {
        System.out.println("\nüìù Testing Enhanced RAG Service...");
        
        try {
            EnhancedRAGService ragService = new EnhancedRAGService();
            
            // Test content indexing
            String testContent = "ƒê√¢y l√† n·ªôi dung s√°ch v·ªÅ khoa h·ªçc vi·ªÖn t∆∞·ªüng. " +
                "Cu·ªën s√°ch k·ªÉ v·ªÅ m·ªôt th·∫ø gi·ªõi t∆∞∆°ng lai n∆°i con ng∆∞·ªùi s·ªëng tr√™n c√°c h√†nh tinh kh√°c. " +
                "Nh√¢n v·∫≠t ch√≠nh l√† m·ªôt phi h√†nh gia tr·∫ª tu·ªïi t√™n Alex, ng∆∞·ªùi ph√°t hi·ªán ra m·ªôt b√≠ m·∫≠t l·ªõn " +
                "v·ªÅ ngu·ªìn g·ªëc c·ªßa lo√†i ng∆∞·ªùi trong v≈© tr·ª•.";
            
            Map<String, String> metadata = Map.of(
                "title", "Khoa h·ªçc vi·ªÖn t∆∞·ªüng",
                "author", "T√°c gi·∫£ test",
                "category", "Sci-Fi"
            );
            
            ragService.indexContent(testContent, metadata);
            System.out.println("‚úÖ Content indexing test completed");
            
            // Test content retrieval
            List<dev.langchain4j.data.segment.TextSegment> segments = 
                ragService.retrieveRelevantContent("nh√¢n v·∫≠t ch√≠nh", 3, null);
            System.out.println("‚úÖ Content retrieval test: found " + segments.size() + " segments");
            
            // Test summary generation
            String summary = ragService.generateSummary(testContent);
            System.out.println("‚úÖ Summary generation test: " + summary.substring(0, Math.min(100, summary.length())) + "...");
            
            // Test category classification
            String category = ragService.classifyCategory(testContent);
            System.out.println("‚úÖ Category classification test: " + category.substring(0, Math.min(100, category.length())) + "...");
            
            // Test stats
            Map<String, Object> stats = ragService.getStats();
            System.out.println("‚úÖ Service stats: " + stats);
            
            System.out.println("‚úÖ Enhanced RAG Service test completed");
            
        } catch (Exception e) {
            System.err.println("‚ùå Enhanced RAG Service test failed: " + e.getMessage());
        }
    }
    
    /**
     * ü§ñ Test OpenAI Content Analysis Service
     */
    private static void testOpenAIContentAnalysisService() {
        System.out.println("\nüìù Testing OpenAI Content Analysis Service...");
        
        try {
            OpenAIContentAnalysisService analysisService = new OpenAIContentAnalysisService();
            
            String testContent = "ƒê√¢y l√† n·ªôi dung s√°ch v·ªÅ khoa h·ªçc vi·ªÖn t∆∞·ªüng. " +
                "Cu·ªën s√°ch k·ªÉ v·ªÅ m·ªôt th·∫ø gi·ªõi t∆∞∆°ng lai n∆°i con ng∆∞·ªùi s·ªëng tr√™n c√°c h√†nh tinh kh√°c. " +
                "Nh√¢n v·∫≠t ch√≠nh l√† m·ªôt phi h√†nh gia tr·∫ª tu·ªïi t√™n Alex, ng∆∞·ªùi ph√°t hi·ªán ra m·ªôt b√≠ m·∫≠t l·ªõn " +
                "v·ªÅ ngu·ªìn g·ªëc c·ªßa lo√†i ng∆∞·ªùi trong v≈© tr·ª•.";
            
            List<String> bookTitles = Arrays.asList("Khoa h·ªçc vi·ªÖn t∆∞·ªüng", "Th·∫ø gi·ªõi t∆∞∆°ng lai");
            
            // Test content analysis
            String analysis1 = analysisService.analyzeBookContent(testContent, "K·ªÉ cho t√¥i v·ªÅ nh√¢n v·∫≠t ch√≠nh", bookTitles);
            System.out.println("‚úÖ Content analysis test 1: " + analysis1.substring(0, Math.min(100, analysis1.length())) + "...");
            
            String analysis2 = analysisService.analyzeBookContent(testContent, "C·ªët truy·ªán nh∆∞ th·∫ø n√†o?", bookTitles);
            System.out.println("‚úÖ Content analysis test 2: " + analysis2.substring(0, Math.min(100, analysis2.length())) + "...");
            
            String analysis3 = analysisService.analyzeBookContent(testContent, "B·∫°n c√≥ th√≠ch cu·ªën s√°ch n√†y kh√¥ng?", bookTitles);
            System.out.println("‚úÖ Content analysis test 3: " + analysis3.substring(0, Math.min(100, analysis3.length())) + "...");
            
            System.out.println("‚úÖ OpenAI Content Analysis Service test completed");
            
        } catch (Exception e) {
            System.err.println("‚ùå OpenAI Content Analysis Service test failed: " + e.getMessage());
        }
    }
    
    /**
     * üîÑ Test Query Transformation Pipeline
     */
    private static void testQueryTransformationPipeline() {
        System.out.println("\nüìù Testing Query Transformation Pipeline...");
        
        try {
            QueryTransformationPipeline pipeline = new QueryTransformationPipeline();
            
            // Test query transformation
            String originalQuery = "s√°ch khoa h·ªçc vi·ªÖn t∆∞·ªüng hay";
            String transformedQuery = pipeline.transformQuery(originalQuery);
            System.out.println("‚úÖ Query transformation test:");
            System.out.println("   Original: " + originalQuery);
            System.out.println("   Transformed: " + transformedQuery);
            
            // Test query enhancement
            String enhancedQuery = pipeline.enhanceQuery(originalQuery);
            System.out.println("‚úÖ Query enhancement test:");
            System.out.println("   Enhanced: " + enhancedQuery);
            
            // Test query classification
            String queryType = pipeline.classifyQueryType(originalQuery);
            System.out.println("‚úÖ Query classification test: " + queryType);
            
            System.out.println("‚úÖ Query Transformation Pipeline test completed");
            
        } catch (Exception e) {
            System.err.println("‚ùå Query Transformation Pipeline test failed: " + e.getMessage());
        }
    }
    
    /**
     * üìö Test Book Content Retriever
     */
    private static void testBookContentRetriever() {
        System.out.println("\nüìù Testing Book Content Retriever...");
        
        try {
            LangChain4jBookContentRetriever retriever = new LangChain4jBookContentRetriever();
            
            // Test content indexing
            String bookContent = "ƒê√¢y l√† n·ªôi dung s√°ch v·ªÅ khoa h·ªçc vi·ªÖn t∆∞·ªüng. " +
                "Cu·ªën s√°ch k·ªÉ v·ªÅ m·ªôt th·∫ø gi·ªõi t∆∞∆°ng lai n∆°i con ng∆∞·ªùi s·ªëng tr√™n c√°c h√†nh tinh kh√°c. " +
                "Nh√¢n v·∫≠t ch√≠nh l√† m·ªôt phi h√†nh gia tr·∫ª tu·ªïi t√™n Alex, ng∆∞·ªùi ph√°t hi·ªán ra m·ªôt b√≠ m·∫≠t l·ªõn " +
                "v·ªÅ ngu·ªìn g·ªëc c·ªßa lo√†i ng∆∞·ªùi trong v≈© tr·ª•.";
            
            retriever.indexBookContent("book123", bookContent, Map.of("title", "Khoa h·ªçc vi·ªÖn t∆∞·ªüng"));
            System.out.println("‚úÖ Book content indexing test completed");
            
            // Test content retrieval
            List<String> relevantContent = retriever.retrieveRelevantContent("nh√¢n v·∫≠t ch√≠nh", 3);
            System.out.println("‚úÖ Content retrieval test: found " + relevantContent.size() + " relevant pieces");
            
            // Test semantic search
            List<String> searchResults = retriever.semanticSearch("khoa h·ªçc vi·ªÖn t∆∞·ªüng", 5);
            System.out.println("‚úÖ Semantic search test: found " + searchResults.size() + " results");
            
            // Test content similarity
            double similarity = retriever.calculateSimilarity("khoa h·ªçc vi·ªÖn t∆∞·ªüng", "th·∫ø gi·ªõi t∆∞∆°ng lai");
            System.out.println("‚úÖ Content similarity test: " + similarity);
            
            System.out.println("‚úÖ Book Content Retriever test completed");
            
        } catch (Exception e) {
            System.err.println("‚ùå Book Content Retriever test failed: " + e.getMessage());
        }
    }
} 