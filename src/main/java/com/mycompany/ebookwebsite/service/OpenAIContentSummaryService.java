package com.mycompany.ebookwebsite.service;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

import org.json.JSONArray;
import org.json.JSONObject;

import com.mycompany.ebookwebsite.utils.Utils;

/**
 * üìù OPENAI CONTENT SUMMARY SERVICE
 * 
 * ========================================
 * üìã T√ÅC D·ª§NG CH√çNH:
 * ========================================
 * 
 * 1. ü§ñ **AI-Powered Content Summarization**
 *    - OpenAI GPT-3.5-turbo integration
 *    - Automatic text summarization
 *    - Vietnamese language support
 *    - Intelligent content condensation
 * 
 * 2. üìö **Book Content Processing**
 *    - Book chapter summarization
 *    - Long-form content processing
 *    - Content length optimization
 *    - Key information extraction
 * 
 * 3. üîÑ **Fallback Mechanisms**
 *    - Demo mode khi kh√¥ng c√≥ API key
 *    - Graceful error handling
 *    - Fallback text summarization
 *    - Offline content processing
 * 
 * 4. üéØ **Smart Content Management**
 *    - Content truncation cho API limits
 *    - Optimal prompt engineering
 *    - Response quality optimization
 *    - JSON response parsing
 * 
 * ========================================
 * üîß FEATURES:
 * ========================================
 * 
 * ‚úÖ OpenAI Chat Completion API integration
 * ‚úÖ GPT-3.5-turbo model usage
 * ‚úÖ Vietnamese summarization
 * ‚úÖ Content length optimization (8000 chars)
 * ‚úÖ Intelligent prompt engineering
 * ‚úÖ Error handling v√† fallback
 * ‚úÖ Demo mode compatibility
 * ‚úÖ JSON response processing
 * ‚úÖ HTTP client management
 * ‚úÖ Auto content truncation
 * 
 * ========================================
 * üéØ S·ª¨ D·ª§NG:
 * ========================================
 * 
 * - Book content summarization
 * - Chapter summary generation
 * - Long text condensation
 * - Content preview creation
 * - AI-powered text processing
 * 
 * ========================================
 * üèóÔ∏è ARCHITECTURE:
 * ========================================
 * 
 * OpenAIContentSummaryService (Main Service)
 *     ‚îú‚îÄ‚îÄ OpenAI Chat Completion API (AI Engine)
 *     ‚îú‚îÄ‚îÄ HttpClient (HTTP Communication)
 *     ‚îú‚îÄ‚îÄ JSON Processing (Request/Response)
 *     ‚îú‚îÄ‚îÄ Content Optimization (Length Management)
 *     ‚îî‚îÄ‚îÄ Fallback System (Error Handling)
 * 
 * ========================================
 * üîÑ WORKFLOW:
 * ========================================
 * 
 * Content Input ‚Üí Length Check ‚Üí API Call ‚Üí Summary Generation ‚Üí Response
 *     ‚Üì                                                         ‚Üì
 * Fallback Processing ‚Üê Error Handling ‚Üê JSON Parsing ‚Üê AI Response
 */

public class OpenAIContentSummaryService {

    private String apiKey;
    private HttpClient httpClient;
    
    public OpenAIContentSummaryService() {
        this.apiKey = Utils.getEnv("OPENAI_API_KEY");
        this.httpClient = HttpClient.newHttpClient();
    }
    
    public String summarize(String content) throws Exception {
        // N·∫øu content qu√° d√†i, n√™n c·∫Øt (v√≠ d·ª• l·∫•y 8000 k√Ω t·ª± ƒë·∫ßu)
        if (content.length() > 8000) {
            content = content.substring(0, 8000);
        }
        
        // Ki·ªÉm tra API key
        if (apiKey == null || apiKey.trim().isEmpty() || "your-openai-api-key-here".equals(apiKey)) {
            // Fallback to demo if no valid API key
            String summary = "ƒê√¢y l√† t√≥m t·∫Øt t·ª± ƒë·ªông c·ªßa n·ªôi dung s√°ch. ";
            if (content.length() > 100) {
                summary += content.substring(0, 100) + "...";
            } else {
                summary += content;
            }
            return summary;
        }
        
        try {
            // G·ªçi OpenAI API th·ª±c
            return callOpenAIAPI(content);
        } catch (Exception e) {
            System.err.println("L·ªói khi g·ªçi OpenAI API: " + e.getMessage());
            // Fallback to demo on error
            return "Kh√¥ng th·ªÉ t·∫°o t√≥m t·∫Øt t·ª± ƒë·ªông. N·ªôi dung: " + content.substring(0, Math.min(200, content.length())) + "...";
        }
    }
    
    private String callOpenAIAPI(String content) throws Exception {
        // T·∫°o request body cho OpenAI Chat Completion API
        JSONObject requestBody = new JSONObject();
        requestBody.put("model", "gpt-3.5-turbo");
        
        JSONArray messages = new JSONArray();
        
        // System message
        JSONObject systemMessage = new JSONObject();
        systemMessage.put("role", "system");
        systemMessage.put("content", "B·∫°n l√† m·ªôt chuy√™n gia t√≥m t·∫Øt vƒÉn b·∫£n. H√£y t√≥m t·∫Øt n·ªôi dung sau th√†nh m·ªôt ƒëo·∫°n ng·∫Øn g·ªçn, s√∫c t√≠ch t·ª´ 80-200 t·ª´ b·∫±ng ti·∫øng Vi·ªát.");
        messages.put(systemMessage);
        
        // User message
        JSONObject userMessage = new JSONObject();
        userMessage.put("role", "user");
        userMessage.put("content", "H√£y t√≥m t·∫Øt n·ªôi dung sau:\n\n" + content);
        messages.put(userMessage);
        
        requestBody.put("messages", messages);
        requestBody.put("max_tokens", 300);
        requestBody.put("temperature", 0.7);
        
        // T·∫°o HTTP request
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create("https://api.openai.com/v1/chat/completions"))
                .header("Content-Type", "application/json")
                .header("Authorization", "Bearer " + apiKey)
                .POST(HttpRequest.BodyPublishers.ofString(requestBody.toString()))
                .build();
        
        // G·ª≠i request v√† nh·∫≠n response
        HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
        
        if (response.statusCode() != 200) {
            throw new Exception("OpenAI API error: " + response.statusCode() + " - " + response.body());
        }
        
        // Parse response
        JSONObject responseJson = new JSONObject(response.body());
        JSONArray choices = responseJson.getJSONArray("choices");
        if (choices.length() > 0) {
            JSONObject firstChoice = choices.getJSONObject(0);
            JSONObject message = firstChoice.getJSONObject("message");
            return message.getString("content").trim();
        }
        
        throw new Exception("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ OpenAI API");
    }
} 