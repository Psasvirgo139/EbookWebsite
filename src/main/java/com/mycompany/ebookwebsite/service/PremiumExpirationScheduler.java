package com.mycompany.ebookwebsite.service;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * ‚è∞ Premium Expiration Scheduler
 * 
 * T·ª± ƒë·ªông ki·ªÉm tra v√† x·ª≠ l√Ω expired premium subscriptions ƒë·ªãnh k·ª≥
 * Ch·∫°y m·ªói ng√†y v√†o l√∫c 00:30 ƒë·ªÉ ki·ªÉm tra v√† downgrade expired users
 */
public class PremiumExpirationScheduler {
    
    private static final Logger logger = Logger.getLogger(PremiumExpirationScheduler.class.getName());
    
    private final ScheduledExecutorService scheduler;
    private final PremiumService premiumService;
    private boolean isRunning = false;
    
    // Singleton instance
    private static PremiumExpirationScheduler instance;
    
    private PremiumExpirationScheduler() {
        this.scheduler = Executors.newScheduledThreadPool(1);
        this.premiumService = new PremiumService();
        
        logger.info("‚è∞ Premium Expiration Scheduler initialized");
    }
    
    /**
     * üîÑ Get singleton instance
     */
    public static synchronized PremiumExpirationScheduler getInstance() {
        if (instance == null) {
            instance = new PremiumExpirationScheduler();
        }
        return instance;
    }
    
    /**
     * üöÄ Start scheduler
     */
    public void start() {
        if (isRunning) {
            logger.warning("‚ö†Ô∏è Premium Expiration Scheduler already running");
            return;
        }
        
        // Ch·∫°y immediate check ƒë·∫ßu ti√™n
        scheduleImmediateCheck();
        
        // L√™n l·ªãch ch·∫°y h√†ng ng√†y v√†o 00:00
        scheduleDailyCheck();
        
        // Backup check ƒë√£ ƒë∆∞·ª£c t·∫Øt theo y√™u c·∫ßu
        // scheduleBackupCheck();
        
        isRunning = true;
        logger.info("üöÄ Premium Expiration Scheduler started successfully");
    }
    
    /**
     * üõë Stop scheduler
     */
    public void stop() {
        if (!isRunning) {
            return;
        }
        
        scheduler.shutdown();
        try {
            if (!scheduler.awaitTermination(10, TimeUnit.SECONDS)) {
                scheduler.shutdownNow();
            }
        } catch (InterruptedException e) {
            scheduler.shutdownNow();
            Thread.currentThread().interrupt();
        }
        
        isRunning = false;
        logger.info("üõë Premium Expiration Scheduler stopped");
    }
    
    /**
     * ‚ö° Schedule immediate check (ch·∫°y ngay khi start)
     */
    private void scheduleImmediateCheck() {
        scheduler.schedule(() -> {
            logger.info("‚ö° Running immediate premium expiration check...");
            performExpirationCheck();
        }, 5, TimeUnit.SECONDS); // Ch·∫°y sau 5 gi√¢y
    }
    
    /**
     * üåÖ Schedule daily check (m·ªói ng√†y 00:00)
     */
    private void scheduleDailyCheck() {
        // T√≠nh th·ªùi gian ƒë·∫øn l·∫ßn ch·∫°y ƒë·∫ßu ti√™n (00:00 h√¥m nay ho·∫∑c mai)
        long initialDelay = calculateInitialDelayToMidnight();
        
        scheduler.scheduleAtFixedRate(() -> {
            logger.info("üåÖ Running daily premium expiration check at 00:00...");
            performExpirationCheck();
        }, initialDelay, TimeUnit.DAYS.toSeconds(1), TimeUnit.SECONDS);
        
        logger.info("üåÖ Daily premium expiration check scheduled for 00:00");
    }
    
    /**
     * üîÑ Schedule backup check (m·ªói 6 gi·ªù)
     */
    private void scheduleBackupCheck() {
        scheduler.scheduleAtFixedRate(() -> {
            logger.info("üîÑ Running backup premium expiration check (every 6 hours)...");
            performExpirationCheck();
        }, 6, 6, TimeUnit.HOURS);
        
        logger.info("üîÑ Backup premium expiration check scheduled (every 6 hours)");
    }
    
    /**
     * üéØ Perform actual expiration check
     */
    private void performExpirationCheck() {
        try {
            LocalDateTime startTime = LocalDateTime.now();
            
            logger.info("üîç Starting premium expiration check at " + 
                       startTime.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
            
            // G·ªçi PremiumService ƒë·ªÉ x·ª≠ l√Ω expired subscriptions
            int processedCount = premiumService.processExpiredSubscriptions();
            
            LocalDateTime endTime = LocalDateTime.now();
            long durationSeconds = java.time.Duration.between(startTime, endTime).toSeconds();
            
            if (processedCount > 0) {
                logger.info(String.format("‚úÖ Premium expiration check completed: %d subscriptions processed in %d seconds", 
                                        processedCount, durationSeconds));
            } else {
                logger.info(String.format("‚úÖ Premium expiration check completed: No expired subscriptions found (completed in %d seconds)", 
                                        durationSeconds));
            }
            
        } catch (Exception e) {
            logger.log(Level.SEVERE, "‚ùå Error during premium expiration check", e);
        }
    }
    
    /**
     * üïê Calculate delay to next 00:00
     */
    private long calculateInitialDelayToMidnight() {
        LocalDateTime now = LocalDateTime.now();
        
        // Lu√¥n schedule cho 00:00 c·ªßa ng√†y mai
        LocalDateTime next0000 = now.toLocalDate().plusDays(1).atTime(0, 0);
        
        long seconds = java.time.Duration.between(now, next0000).toSeconds();
        
        logger.info(String.format("üïê Next daily check scheduled for: %s (in %d seconds)", 
                                  next0000.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")), 
                                  seconds));
        
        return seconds;
    }
    
    /**
     * üîÑ Manual trigger (for testing/admin)
     */
    public int triggerManualCheck() {
        logger.info("üîß Manual premium expiration check triggered");
        
        try {
            return premiumService.processExpiredSubscriptions();
        } catch (Exception e) {
            logger.log(Level.SEVERE, "‚ùå Error during manual premium expiration check", e);
            return 0;
        }
    }
    
    /**
     * üìä Get scheduler status
     */
    public SchedulerStatus getStatus() {
        return new SchedulerStatus(isRunning, scheduler.isShutdown(), scheduler.isTerminated());
    }
    
    /**
     * üìä Scheduler Status class
     */
    public static class SchedulerStatus {
        private final boolean running;
        private final boolean shutdown;
        private final boolean terminated;
        
        public SchedulerStatus(boolean running, boolean shutdown, boolean terminated) {
            this.running = running;
            this.shutdown = shutdown;
            this.terminated = terminated;
        }
        
        public boolean isRunning() { return running; }
        public boolean isShutdown() { return shutdown; }
        public boolean isTerminated() { return terminated; }
        
        @Override
        public String toString() {
            return String.format("SchedulerStatus{running=%s, shutdown=%s, terminated=%s}", 
                               running, shutdown, terminated);
        }
    }
} 