package com.mycompany.ebookwebsite.service;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mycompany.ebookwebsite.dao.ChapterDAO;
import com.mycompany.ebookwebsite.dao.EbookDAO;
import com.mycompany.ebookwebsite.model.Chapter;
import com.mycompany.ebookwebsite.model.Ebook;

/**
 * Service ƒë·ªÉ t·ª± ƒë·ªông c·∫≠p nh·∫≠t contentUrl cho chapter
 * d·ª±a tr√™n c·∫•u tr√∫c th∆∞ m·ª•c bookreal
 */
public class ChapterContentUrlService {
    
    private final ChapterDAO chapterDAO = new ChapterDAO();
    private final EbookDAO ebookDAO = new EbookDAO();
    
    // Mapping gi·ªØa release_type v√† t√™n folder trong bookreal
    private static final Map<String, String> CATEGORY_MAPPING = new HashMap<>();
    
    static {
        CATEGORY_MAPPING.put("VƒÉn h·ªçc Vi·ªát Nam", "VƒÉn h·ªçc Vi·ªát Nam");
        CATEGORY_MAPPING.put("Ti·ªÉu thuy·∫øt ph∆∞∆°ng T√¢y", "Ti·ªÉu thuy·∫øt ph∆∞∆°ng T√¢y");
        CATEGORY_MAPPING.put("Ti·ªÉu thuy·∫øt Trung Qu·ªëc", "Ti·ªÉu thuy·∫øt Trung Qu·ªëc");
        CATEGORY_MAPPING.put("Truy·ªán ng·∫Øn", "Truy·ªán ng·∫Øn");
        CATEGORY_MAPPING.put("Truy·ªán ma", "Truy·ªán ma");
        CATEGORY_MAPPING.put("Truy·ªán c∆∞·ªùi", "Truy·ªán c∆∞·ªùi");
        CATEGORY_MAPPING.put("Truy·ªán tu·ªïi teen", "Truy·ªán tu·ªïi teen");
        CATEGORY_MAPPING.put("Trinh th√°m", "Trinh th√°m");
        CATEGORY_MAPPING.put("Phi√™u l∆∞u", "Phi√™u l∆∞u");
        CATEGORY_MAPPING.put("Huy·ªÅn b√≠ - Gi·∫£ t∆∞·ªüng", "Huy·ªÅn b√≠ - Gi·∫£ t∆∞·ªüng");
        CATEGORY_MAPPING.put("Ki·∫øm hi·ªáp - Ti√™n hi·ªáp", "Ki·∫øm hi·ªáp - Ti√™n hi·ªáp");
        CATEGORY_MAPPING.put("C·ªï t√≠ch - Th·∫ßn tho·∫°i", "C·ªï t√≠ch - Th·∫ßn tho·∫°i");
        CATEGORY_MAPPING.put("H·ªìi k√Ω - T√πy b√∫t", "H·ªìi k√Ω - T√πy b√∫t");
        CATEGORY_MAPPING.put("Th∆° hay", "Th∆° hay");
        CATEGORY_MAPPING.put("Kinh t·∫ø", "Kinh t·∫ø");
        CATEGORY_MAPPING.put("Marketing", "Marketing");
        CATEGORY_MAPPING.put("Khoa h·ªçc - K·ªπ thu·∫≠t", "Khoa h·ªçc - K·ªπ thu·∫≠t");
        CATEGORY_MAPPING.put("C√¥ng ngh·ªá th√¥ng tin", "C√¥ng ngh·ªá th√¥ng tin");
        CATEGORY_MAPPING.put("L·ªãch s·ª≠ - Ch√≠nh tr·ªã", "L·ªãch s·ª≠ - Ch√≠nh tr·ªã");
        CATEGORY_MAPPING.put("VƒÉn h√≥a - T√¥n gi√°o", "VƒÉn h√≥a - T√¥n gi√°o");
        CATEGORY_MAPPING.put("T√¢m l√Ω - K·ªπ nƒÉng s·ªëng", "T√¢m l√Ω - K·ªπ nƒÉng s·ªëng");
        CATEGORY_MAPPING.put("Th·ªÉ thao - Ngh·ªá thu·∫≠t", "Th·ªÉ thao - Ngh·ªá thu·∫≠t");
        CATEGORY_MAPPING.put("·∫®m th·ª±c - N·∫•u ƒÉn", "·∫®m th·ª±c - N·∫•u ƒÉn");
        CATEGORY_MAPPING.put("Y h·ªçc", "Y h·ªçc");
        CATEGORY_MAPPING.put("T·ª≠ vi - Phong th·ªßy", "T·ª≠ vi - Phong th·ªßy");
        CATEGORY_MAPPING.put("Tri·∫øt h·ªçc", "Tri·∫øt h·ªçc");
        CATEGORY_MAPPING.put("N√¥ng - L√¢m - Ng∆∞", "N√¥ng - L√¢m - Ng∆∞");
        CATEGORY_MAPPING.put("Ngo·∫°i ng·ªØ", "Ngo·∫°i ng·ªØ");
        CATEGORY_MAPPING.put("Ki·∫øn tr√∫c - X√¢y d·ª±ng", "Ki·∫øn tr√∫c - X√¢y d·ª±ng");
        CATEGORY_MAPPING.put("Ph√°p lu·∫≠t", "Ph√°p lu·∫≠t");
        CATEGORY_MAPPING.put("S√°ch gi√°o khoa", "S√°ch gi√°o khoa");
    }
    
    /**
     * T·∫°o contentUrl cho m·ªôt chapter d·ª±a tr√™n th√¥ng tin s√°ch
     */
    public String generateContentUrl(Ebook ebook, Chapter chapter) {
        String category = CATEGORY_MAPPING.getOrDefault(ebook.getReleaseType(), "VƒÉn h·ªçc Vi·ªát Nam");
        String bookTitle = ebook.getTitle();
        int chapterNumber = (int) chapter.getNumber();
        
        return String.format("bookreal/%s/%s/chuong_%03d.txt", 
                           category, bookTitle, chapterNumber);
    }
    
    /**
     * C·∫≠p nh·∫≠t contentUrl cho t·∫•t c·∫£ chapter c·ªßa m·ªôt s√°ch
     */
    public void updateContentUrlsForBook(int bookId) throws SQLException {
        Ebook ebook = ebookDAO.getEbookById(bookId);
        if (ebook == null) {
            throw new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y s√°ch v·ªõi ID: " + bookId);
        }
        
        List<Chapter> chapters = chapterDAO.getChaptersByBookId(bookId);
        int updatedCount = 0;
        
        for (Chapter chapter : chapters) {
            String newContentUrl = generateContentUrl(ebook, chapter);
            chapter.setContentUrl(newContentUrl);
            
            if (chapterDAO.updateChapter(chapter)) {
                updatedCount++;
                System.out.println("‚úÖ C·∫≠p nh·∫≠t chapter " + chapter.getNumber() + 
                                 " -> " + newContentUrl);
            }
        }
        
        System.out.println("üìä ƒê√£ c·∫≠p nh·∫≠t " + updatedCount + "/" + chapters.size() + 
                          " chapter cho s√°ch: " + ebook.getTitle());
    }
    
    /**
     * C·∫≠p nh·∫≠t contentUrl cho t·∫•t c·∫£ chapter trong h·ªá th·ªëng
     */
    public void updateAllContentUrls() throws SQLException {
        // L·∫•y t·∫•t c·∫£ s√°ch c√≥ chapter
        List<Ebook> ebooks = getAllEbooksWithChapters();
        int totalUpdated = 0;
        
        for (Ebook ebook : ebooks) {
            try {
                updateContentUrlsForBook(ebook.getId());
                totalUpdated++;
            } catch (Exception e) {
                System.err.println("‚ùå L·ªói c·∫≠p nh·∫≠t s√°ch " + ebook.getId() + ": " + e.getMessage());
            }
        }
        
        System.out.println("üéâ Ho√†n th√†nh! ƒê√£ c·∫≠p nh·∫≠t " + totalUpdated + " s√°ch");
    }
    
    /**
     * L·∫•y danh s√°ch s√°ch c√≥ chapter
     */
    private List<Ebook> getAllEbooksWithChapters() throws SQLException {
        // Query ƒë·ªÉ l·∫•y s√°ch c√≥ chapter
        String sql = "SELECT DISTINCT e.* FROM Ebooks e " +
                    "INNER JOIN Chapters c ON e.id = c.ebook_id " +
                    "ORDER BY e.id";
        
        List<Ebook> ebooks = new java.util.ArrayList<>();
        try (java.sql.Connection conn = com.mycompany.ebookwebsite.dao.DBConnection.getConnection();
             java.sql.PreparedStatement ps = conn.prepareStatement(sql);
             java.sql.ResultSet rs = ps.executeQuery()) {
            
            while (rs.next()) {
                Ebook ebook = new Ebook();
                ebook.setId(rs.getInt("id"));
                ebook.setTitle(rs.getString("title"));
                ebook.setReleaseType(rs.getString("release_type"));
                ebooks.add(ebook);
            }
        }
        
        return ebooks;
    }
    
    /**
     * Ki·ªÉm tra xem file chapter c√≥ t·ªìn t·∫°i kh√¥ng
     */
    public boolean checkChapterFileExists(String contentUrl) {
        if (contentUrl == null || contentUrl.trim().isEmpty()) {
            return false;
        }
        
        // T·∫°o ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß
        String webappPath = System.getProperty("catalina.home") + "/webapps/EbookWebsite/";
        String fullPath = webappPath + contentUrl;
        
        java.io.File file = new java.io.File(fullPath);
        return file.exists() && file.isFile();
    }
    
    /**
     * Ki·ªÉm tra v√† b√°o c√°o chapter n√†o c√≥ file, chapter n√†o kh√¥ng c√≥
     */
    public void validateChapterFiles(int bookId) throws SQLException {
        Ebook ebook = ebookDAO.getEbookById(bookId);
        if (ebook == null) {
            System.err.println("‚ùå Kh√¥ng t√¨m th·∫•y s√°ch v·ªõi ID: " + bookId);
            return;
        }
        
        List<Chapter> chapters = chapterDAO.getChaptersByBookId(bookId);
        System.out.println("üìö Ki·ªÉm tra file cho s√°ch: " + ebook.getTitle());
        System.out.println("üìä T·ªïng s·ªë chapter: " + chapters.size());
        
        int existingFiles = 0;
        int missingFiles = 0;
        
        for (Chapter chapter : chapters) {
            String contentUrl = chapter.getContentUrl();
            boolean exists = checkChapterFileExists(contentUrl);
            
            if (exists) {
                existingFiles++;
                System.out.println("‚úÖ Chapter " + chapter.getNumber() + " -> " + contentUrl);
            } else {
                missingFiles++;
                System.out.println("‚ùå Chapter " + chapter.getNumber() + " -> " + contentUrl + " (KH√îNG T·ªíN T·∫†I)");
            }
        }
        
        System.out.println("üìà K·∫øt qu·∫£: " + existingFiles + " file t·ªìn t·∫°i, " + missingFiles + " file thi·∫øu");
    }
    
    /**
     * Test method ƒë·ªÉ ch·∫°y th·ª≠
     */
    public static void main(String[] args) {
        ChapterContentUrlService service = new ChapterContentUrlService();
        
        try {
            // Test v·ªõi s√°ch c·ª• th·ªÉ (ID 385)
            System.out.println("üîÑ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t contentUrl...");
            service.updateContentUrlsForBook(385);
            
            // Ki·ªÉm tra file
            System.out.println("\nüîç Ki·ªÉm tra file t·ªìn t·∫°i...");
            service.validateChapterFiles(385);
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói: " + e.getMessage());
            e.printStackTrace();
        }
    }
} 