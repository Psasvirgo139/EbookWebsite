package com.mycompany.ebookwebsite.service;

import com.mycompany.ebookwebsite.dao.EbookDAO;
import com.mycompany.ebookwebsite.dao.AuthorDAO;
import com.mycompany.ebookwebsite.dao.TagDAO;
import com.mycompany.ebookwebsite.model.Ebook;
import com.mycompany.ebookwebsite.model.Author;
import org.json.JSONObject;

import java.sql.SQLException;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

/**
 * Prompt Training Engine - Quy t·∫Øc tr·∫£ l·ªùi c·ªßa AI
 * ƒê·∫£m b·∫£o AI ch·ªâ tr·∫£ l·ªùi d·ª±a tr√™n d·ªØ li·ªáu database, kh√¥ng b·ªãa
 */
public class PromptTrainingEngine {
    
    private final EbookDAO ebookDAO;
    private final AuthorDAO authorDAO;
    private final TagDAO tagDAO;
    
    // AI Response Rules
    private static final String[] FORBIDDEN_RESPONSES = {
        "c√≥ th·ªÉ", "c√≥ l·∫Ω", "th∆∞·ªùng th√¨", "theo nh∆∞ t√¥i bi·∫øt", 
        "d·ª±a tr√™n kinh nghi·ªám", "n√≥i chung", "h·∫ßu h·∫øt"
    };
    
    private static final String DATABASE_ONLY_PREFIX = "D·ª±a tr√™n d·ªØ li·ªáu trong h·ªá th·ªëng c·ªßa ch√∫ng ta: ";
    private static final String NOT_FOUND_RESPONSE = "T√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin n√†y trong c∆° s·ªü d·ªØ li·ªáu c·ªßa h·ªá th·ªëng. ";
    
    public PromptTrainingEngine() {
        this.ebookDAO = new EbookDAO();
        this.authorDAO = new AuthorDAO();
        this.tagDAO = new TagDAO();
    }
    
    /**
     * CORE METHOD: X·ª≠ l√Ω v√† validate response t·ª´ AI
     */
    public String processAndValidateResponse(String userQuestion, String rawResponse, int userId) {
        try {
            // 1. Validate response kh√¥ng ch·ª©a forbidden words
            String validatedResponse = validateResponseContent(rawResponse);
            
            // 2. Extract entities t·ª´ user question v√† response
            Set<String> mentionedBooks = extractBookTitles(userQuestion + " " + validatedResponse);
            Set<String> mentionedAuthors = extractAuthors(userQuestion + " " + validatedResponse);
            
            // 3. Verify t·∫•t c·∫£ entities c√≥ t·ªìn t·∫°i trong database
            ValidationResult validation = verifyEntitiesInDatabase(mentionedBooks, mentionedAuthors);
            
            // 4. Rewrite response n·∫øu c·∫ßn
            if (!validation.isValid()) {
                return rewriteResponseWithDatabaseData(userQuestion, validation, userId);
            }
            
            // 5. Add database disclaimer
            return addDatabaseDisclaimer(validatedResponse);
            
        } catch (Exception e) {
            e.printStackTrace();
            return generateSafeErrorResponse(userQuestion);
        }
    }
    
    /**
     * Validate response content - lo·∫°i b·ªè t·ª´ ng·ªØ kh√¥ng ch·∫Øc ch·∫Øn
     */
    private String validateResponseContent(String response) {
        String validated = response;
        
        // Remove forbidden uncertain phrases
        for (String forbidden : FORBIDDEN_RESPONSES) {
            validated = validated.replaceAll("(?i)" + Pattern.quote(forbidden), "");
        }
        
        // Remove hedging words
        validated = validated.replaceAll("(?i)\\b(might|maybe|perhaps|possibly|probably)\\b", "");
        
        // Clean up extra spaces
        validated = validated.replaceAll("\\s+", " ").trim();
        
        return validated;
    }
    
    /**
     * Extract book titles t·ª´ text
     */
    private Set<String> extractBookTitles(String text) {
        Set<String> bookTitles = new HashSet<>();
        
        // Patterns ƒë·ªÉ t√¨m book titles
        String[] patterns = {
            "s√°ch \"([^\"]+)\"",
            "cu·ªën \"([^\"]+)\"", 
            "truy·ªán \"([^\"]+)\"",
            "t√°c ph·∫©m \"([^\"]+)\"",
            "s√°ch ([A-Z√Ä√Å·∫†·∫¢√É√Ç·∫¶·∫§·∫¨·∫®·∫™ƒÇ·∫∞·∫Æ·∫∂·∫≤·∫¥√à√â·∫∏·∫∫·∫º√ä·ªÄ·∫æ·ªÜ·ªÇ·ªÑ√å√ç·ªä·ªàƒ®√í√ì·ªå·ªé√ï√î·ªí·ªê·ªò·ªî·ªñ∆†·ªú·ªö·ª¢·ªû·ª†√ô√ö·ª§·ª¶≈®∆Ø·ª™·ª®·ª∞·ª¨·ªÆ·ª≤√ù·ª¥·ª∂·ª∏][\\w\\s]{2,30})",
            "\"([^\"]{3,50})\""
        };
        
        for (String pattern : patterns) {
            Pattern p = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE);
            Matcher m = p.matcher(text);
            while (m.find()) {
                String title = m.group(1).trim();
                if (title.length() > 2 && title.length() < 100) {
                    bookTitles.add(title);
                }
            }
        }
        
        return bookTitles;
    }
    
    /**
     * Extract author names t·ª´ text
     */
    private Set<String> extractAuthors(String text) {
        Set<String> authors = new HashSet<>();
        
        String[] patterns = {
            "t√°c gi·∫£ ([A-Z√Ä√Å·∫†·∫¢√É√Ç·∫¶·∫§·∫¨·∫®·∫™ƒÇ·∫∞·∫Æ·∫∂·∫≤·∫¥√à√â·∫∏·∫∫·∫º√ä·ªÄ·∫æ·ªÜ·ªÇ·ªÑ√å√ç·ªä·ªàƒ®√í√ì·ªå·ªé√ï√î·ªí·ªê·ªò·ªî·ªñ∆†·ªú·ªö·ª¢·ªû·ª†√ô√ö·ª§·ª¶≈®∆Ø·ª™·ª®·ª∞·ª¨·ªÆ·ª≤√ù·ª¥·ª∂·ª∏][\\w\\s]{2,30})",
            "c·ªßa ([A-Z√Ä√Å·∫†·∫¢√É√Ç·∫¶·∫§·∫¨·∫®·∫™ƒÇ·∫∞·∫Æ·∫∂·∫≤·∫¥√à√â·∫∏·∫∫·∫º√ä·ªÄ·∫æ·ªÜ·ªÇ·ªÑ√å√ç·ªä·ªàƒ®√í√ì·ªå·ªé√ï√î·ªí·ªê·ªò·ªî·ªñ∆†·ªú·ªö·ª¢·ªû·ª†√ô√ö·ª§·ª¶≈®∆Ø·ª™·ª®·ª∞·ª¨·ªÆ·ª≤√ù·ª¥·ª∂·ª∏][\\w\\s]{2,30})",
            "\\bby ([A-Z][a-zA-Z\\s]{2,30})",
            "([A-Z√Ä√Å·∫†·∫¢√É√Ç·∫¶·∫§·∫¨·∫®·∫™ƒÇ·∫∞·∫Æ·∫∂·∫≤·∫¥√à√â·∫∏·∫∫·∫º√ä·ªÄ·∫æ·ªÜ·ªÇ·ªÑ√å√ç·ªä·ªàƒ®√í√ì·ªå·ªé√ï√î·ªí·ªê·ªò·ªî·ªñ∆†·ªú·ªö·ª¢·ªû·ª†√ô√ö·ª§·ª¶≈®∆Ø·ª™·ª®·ª∞·ª¨·ªÆ·ª≤√ù·ª¥·ª∂·ª∏][a-zA-Z√Ä√Å·∫†·∫¢√É√Ç·∫ß·∫§·∫¨·∫®·∫™ƒÇ·∫±·∫Æ·∫∂·∫≤·∫¥√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπ\\s]{2,30})\\s+(vi·∫øt|s√°ng t√°c|t√°c gi·∫£)"
        };
        
        for (String pattern : patterns) {
            Pattern p = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE);
            Matcher m = p.matcher(text);
            while (m.find()) {
                String author = m.group(1).trim();
                if (author.length() > 2 && author.length() < 50 && !isCommonWord(author)) {
                    authors.add(author);
                }
            }
        }
        
        return authors;
    }
    
    /**
     * Verify entities t·ªìn t·∫°i trong database
     */
    private ValidationResult verifyEntitiesInDatabase(Set<String> bookTitles, Set<String> authors) throws SQLException {
        ValidationResult result = new ValidationResult();
        
        // Verify books
        for (String title : bookTitles) {
            List<Ebook> books = ebookDAO.search(title);
            if (books.isEmpty()) {
                result.addInvalidBook(title);
            } else {
                result.addValidBook(title, books);
            }
        }
        
        // Verify authors
        for (String authorName : authors) {
            List<Author> foundAuthors = authorDAO.search(authorName);
            if (foundAuthors.isEmpty()) {
                result.addInvalidAuthor(authorName);
            } else {
                result.addValidAuthor(authorName, foundAuthors);
            }
        }
        
        return result;
    }
    
    /**
     * Rewrite response v·ªõi ch·ªâ database data
     */
    private String rewriteResponseWithDatabaseData(String userQuestion, ValidationResult validation, int userId) throws SQLException {
        StringBuilder response = new StringBuilder();
        
        // Analyze user question intent
        String intent = analyzeQuestionIntent(userQuestion);
        
        switch (intent) {
            case "SEARCH_BOOK":
                return handleBookSearchRewrite(userQuestion, validation);
            case "SEARCH_AUTHOR":
                return handleAuthorSearchRewrite(userQuestion, validation);
            case "RECOMMENDATION":
                return handleRecommendationRewrite(userId, validation);
            default:
                return handleGeneralRewrite(userQuestion, validation);
        }
    }
    
    private String handleBookSearchRewrite(String question, ValidationResult validation) throws SQLException {
        StringBuilder response = new StringBuilder();
        response.append(DATABASE_ONLY_PREFIX);
        
        if (!validation.getValidBooks().isEmpty()) {
            response.append("T√¥i t√¨m th·∫•y c√°c s√°ch sau:\n");
            for (Map.Entry<String, List<Ebook>> entry : validation.getValidBooks().entrySet()) {
                List<Ebook> books = entry.getValue();
                for (Ebook book : books) {
                    response.append(String.format("üìö %s - %s (%s)\n", 
                        book.getTitle(), book.getDescription(), book.getLanguage()));
                }
            }
        } else {
            response.append(NOT_FOUND_RESPONSE);
            response.append("B·∫°n c√≥ th·ªÉ th·ª≠ t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c ho·∫∑c duy·ªát theo th·ªÉ lo·∫°i.");
        }
        
        return response.toString();
    }
    
    private String handleAuthorSearchRewrite(String question, ValidationResult validation) throws SQLException {
        StringBuilder response = new StringBuilder();
        response.append(DATABASE_ONLY_PREFIX);
        
        if (!validation.getValidAuthors().isEmpty()) {
            response.append("T√¥i t√¨m th·∫•y c√°c t√°c gi·∫£ sau trong h·ªá th·ªëng:\n");
            for (Map.Entry<String, List<Author>> entry : validation.getValidAuthors().entrySet()) {
                String authorName = entry.getKey();
                List<Ebook> authorBooks = ebookDAO.search(authorName);
                response.append(String.format("‚úçÔ∏è %s - c√≥ %d cu·ªën s√°ch\n", 
                    authorName, authorBooks.size()));
            }
        } else {
            response.append(NOT_FOUND_RESPONSE);
            response.append("T√°c gi·∫£ n√†y ch∆∞a c√≥ s√°ch trong h·ªá th·ªëng c·ªßa ch√∫ng t√¥i.");
        }
        
        return response.toString();
    }
    
    private String handleRecommendationRewrite(int userId, ValidationResult validation) throws SQLException {
        // L·∫•y t·∫•t c·∫£ s√°ch - s·ª≠ d·ª•ng method c√≥ s·∫µn v·ªõi limit l·ªõn
        List<Ebook> allBooks = ebookDAO.getBooksByPage(0, 1000);
        if (allBooks.isEmpty()) {
            return NOT_FOUND_RESPONSE + "H·ªá th·ªëng ch∆∞a c√≥ s√°ch n√†o ƒë·ªÉ ƒë·ªÅ xu·∫•t.";
        }
        
        StringBuilder response = new StringBuilder();
        response.append(DATABASE_ONLY_PREFIX);
        response.append("D·ª±a tr√™n s√°ch c√≥ trong h·ªá th·ªëng, t√¥i ƒë·ªÅ xu·∫•t:\n");
        
        // Simple recommendation: latest or random books
        List<Ebook> recommendations = allBooks.stream()
            .limit(5)
            .collect(Collectors.toList());
            
        for (Ebook book : recommendations) {
            response.append(String.format("üìñ %s - %s (%s)\n", 
                book.getTitle(), book.getDescription(), book.getLanguage()));
        }
        
        return response.toString();
    }
    
    private String handleGeneralRewrite(String question, ValidationResult validation) {
        StringBuilder response = new StringBuilder();
        response.append(DATABASE_ONLY_PREFIX);
        response.append("T√¥i ch·ªâ c√≥ th·ªÉ tr·∫£ l·ªùi v·ªÅ c√°c s√°ch, t√°c gi·∫£ v√† th√¥ng tin c√≥ trong c∆° s·ªü d·ªØ li·ªáu h·ªá th·ªëng. ");
        
        if (!validation.getInvalidBooks().isEmpty()) {
            response.append("Nh·ªØng s√°ch b·∫°n ƒë·ªÅ c·∫≠p: ");
            response.append(String.join(", ", validation.getInvalidBooks()));
            response.append(" kh√¥ng c√≥ trong h·ªá th·ªëng c·ªßa ch√∫ng t√¥i. ");
        }
        
        response.append("B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ s√°ch c√≥ s·∫µn ho·∫∑c y√™u c·∫ßu ƒë·ªÅ xu·∫•t.");
        
        return response.toString();
    }
    
    private String addDatabaseDisclaimer(String response) {
        if (!response.startsWith(DATABASE_ONLY_PREFIX)) {
            return DATABASE_ONLY_PREFIX + response;
        }
        return response;
    }
    
    private String generateSafeErrorResponse(String question) {
        return NOT_FOUND_RESPONSE + "C√≥ l·ªói khi x·ª≠ l√Ω c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i v·ªõi c√¢u h·ªèi ƒë∆°n gi·∫£n h∆°n.";
    }
    
    // Helper methods
    private String analyzeQuestionIntent(String question) {
        String lower = question.toLowerCase();
        if (lower.contains("t√¨m") && (lower.contains("s√°ch") || lower.contains("truy·ªán"))) {
            return "SEARCH_BOOK";
        }
        if (lower.contains("t√°c gi·∫£") || lower.contains("c·ªßa ai")) {
            return "SEARCH_AUTHOR";
        }
        if (lower.contains("ƒë·ªÅ xu·∫•t") || lower.contains("g·ª£i √Ω") || lower.contains("recommend")) {
            return "RECOMMENDATION";
        }
        return "GENERAL";
    }
    
    private boolean isCommonWord(String word) {
        String[] commonWords = {"t√¥i", "b·∫°n", "ch√∫ng", "t√¥i", "n√†y", "ƒë√≥", "v·ªõi", "v√†", "or", "the", "a", "an"};
        String lowerWord = word.toLowerCase();
        for (String common : commonWords) {
            if (lowerWord.equals(common)) return true;
        }
        return false;
    }
    
    // Inner class for validation results
    public static class ValidationResult {
        private Map<String, List<Ebook>> validBooks = new HashMap<>();
        private Map<String, List<Author>> validAuthors = new HashMap<>();
        private Set<String> invalidBooks = new HashSet<>();
        private Set<String> invalidAuthors = new HashSet<>();
        
        public boolean isValid() {
            return invalidBooks.isEmpty() && invalidAuthors.isEmpty();
        }
        
        public void addValidBook(String title, List<Ebook> books) {
            validBooks.put(title, books);
        }
        
        public void addValidAuthor(String name, List<Author> authors) {
            validAuthors.put(name, authors);
        }
        
        public void addInvalidBook(String title) {
            invalidBooks.add(title);
        }
        
        public void addInvalidAuthor(String name) {
            invalidAuthors.add(name);
        }
        
        // Getters
        public Map<String, List<Ebook>> getValidBooks() { return validBooks; }
        public Map<String, List<Author>> getValidAuthors() { return validAuthors; }
        public Set<String> getInvalidBooks() { return invalidBooks; }
        public Set<String> getInvalidAuthors() { return invalidAuthors; }
    }
} 