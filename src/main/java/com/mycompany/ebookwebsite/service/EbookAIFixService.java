package com.mycompany.ebookwebsite.service;

import com.mycompany.ebookwebsite.dao.EbookDAO;
import com.mycompany.ebookwebsite.dao.EbookAIDAO;
import com.mycompany.ebookwebsite.model.Ebook;
import com.mycompany.ebookwebsite.model.EbookAI;

import java.io.File;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.List;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 * Service ƒë·ªÉ t·ª± ƒë·ªông s·ª≠a c√°c EbookAI record thi·∫øu
 * Khi s√°ch ƒë√£ ƒë∆∞·ª£c upload nh∆∞ng EbookAI record b·ªã thi·∫øu
 */
public class EbookAIFixService {
    
    private static final Logger logger = Logger.getLogger(EbookAIFixService.class.getName());
    private static final String UPLOADS_FOLDER = "D:\\EbookWebsite\\uploads";
    
    private EbookDAO ebookDAO;
    private EbookAIDAO ebookAIDAO;
    
    public EbookAIFixService() {
        this.ebookDAO = new EbookDAO();
        this.ebookAIDAO = new EbookAIDAO();
    }
    
    /**
     * T·ª± ƒë·ªông ki·ªÉm tra v√† t·∫°o EbookAI record cho m·ªôt s√°ch c·ª• th·ªÉ
     */
    public boolean autoFixEbookAI(int ebookId) {
        try {
            // 1. Ki·ªÉm tra s√°ch c√≥ t·ªìn t·∫°i kh√¥ng
            Ebook ebook = ebookDAO.getEbookById(ebookId);
            if (ebook == null) {
                logger.warning("‚ùå Ebook ID " + ebookId + " kh√¥ng t·ªìn t·∫°i!");
                return false;
            }
            
            // 2. Ki·ªÉm tra EbookAI record ƒë√£ c√≥ ch∆∞a
            EbookAI existingAI = ebookAIDAO.getByEbookId(ebookId);
            if (existingAI != null) {
                logger.info("‚úÖ EbookAI record ƒë√£ t·ªìn t·∫°i cho book ID " + ebookId);
                return true;
            }
            
            // 3. T√¨m file t∆∞∆°ng ·ª©ng trong uploads folder
            String fileName = findMatchingFile(ebook.getTitle());
            if (fileName == null) {
                logger.warning("‚ùå Kh√¥ng t√¨m th·∫•y file cho s√°ch: " + ebook.getTitle());
                return false;
            }
            
            // 4. T·∫°o EbookAI record m·ªõi
            EbookAI newAI = new EbookAI();
            newAI.setEbookId(ebookId);
            newAI.setFileName(fileName);
            newAI.setOriginalFileName(fileName);
            newAI.setSummary(null); // AI s·∫Ω t·∫°o khi ƒë·ªçc s√°ch
            newAI.setStatus("completed");
            newAI.setCreatedAt(LocalDateTime.now());
            newAI.setUpdatedAt(LocalDateTime.now());
            
            // 5. L∆∞u v√†o database
            ebookAIDAO.insertEbookAI(newAI);
            
            logger.info("‚úÖ ƒê√£ t·∫°o EbookAI record cho book ID " + ebookId + " v·ªõi file: " + fileName);
            return true;
            
        } catch (SQLException e) {
            logger.log(Level.SEVERE, "‚ùå L·ªói database khi fix EbookAI cho book ID " + ebookId, e);
            return false;
        } catch (Exception e) {
            logger.log(Level.SEVERE, "‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi fix EbookAI cho book ID " + ebookId, e);
            return false;
        }
    }
    
    /**
     * T·ª± ƒë·ªông fix t·∫•t c·∫£ EbookAI record thi·∫øu
     */
    public int autoFixAllMissingEbookAI() {
        int fixedCount = 0;
        
        try {
            // L·∫•y t·∫•t c·∫£ ebooks
            List<Ebook> allEbooks = ebookDAO.selectAllEbooks();
            
            for (Ebook ebook : allEbooks) {
                if (ebook.getStatus().equals("deleted")) {
                    continue; // B·ªè qua s√°ch ƒë√£ x√≥a
                }
                
                // Ki·ªÉm tra v√† fix t·ª´ng s√°ch
                if (autoFixEbookAI(ebook.getId())) {
                    fixedCount++;
                }
            }
            
            logger.info("üéâ Ho√†n th√†nh auto-fix: " + fixedCount + " EbookAI records ƒë√£ ƒë∆∞·ª£c t·∫°o");
            
        } catch (SQLException e) {
            logger.log(Level.SEVERE, "‚ùå L·ªói khi auto-fix t·∫•t c·∫£ EbookAI records", e);
        }
        
        return fixedCount;
    }
    
    /**
     * T√¨m file ph√π h·ª£p v·ªõi ti√™u ƒë·ªÅ s√°ch trong uploads folder
     */
    private String findMatchingFile(String bookTitle) {
        File uploadsDir = new File(UPLOADS_FOLDER);
        if (!uploadsDir.exists() || !uploadsDir.isDirectory()) {
            logger.warning("‚ùå Th∆∞ m·ª•c uploads kh√¥ng t·ªìn t·∫°i: " + UPLOADS_FOLDER);
            return null;
        }
        
        File[] files = uploadsDir.listFiles();
        if (files == null) {
            return null;
        }
        
        logger.info("üîç ƒêang t√¨m file cho s√°ch: '" + bookTitle + "'");
        logger.info("üìÅ Th∆∞ m·ª•c uploads: " + UPLOADS_FOLDER);
        logger.info("üìÑ S·ªë file c√≥ s·∫µn: " + files.length);
        
        // Debug: Li·ªát k√™ t·∫•t c·∫£ files
        for (File file : files) {
            if (file.isFile()) {
                logger.info("   üìÑ " + file.getName());
            }
        }
        
        // 1. Th·ª≠ t√¨m file c√≥ t√™n ch√≠nh x√°c
        for (File file : files) {
            if (file.isFile()) {
                String fileName = file.getName();
                String fileNameWithoutExt = removeFileExtension(fileName);
                
                // So s√°nh ch√≠nh x√°c
                if (fileNameWithoutExt.equals(bookTitle)) {
                    logger.info("üéØ T√¨m th·∫•y file ch√≠nh x√°c: " + fileName + " cho s√°ch: " + bookTitle);
                    return fileName;
                }
            }
        }
        
        // 2. T√¨m file c√≥ ch·ª©a t·ª´ kh√≥a ch√≠nh (nh∆∞ t√™n t√°c gi·∫£)
        String[] titleWords = bookTitle.split("\\s+");
        for (File file : files) {
            if (file.isFile()) {
                String fileName = file.getName();
                String fileNameWithoutExt = removeFileExtension(fileName);
                
                // Ki·ªÉm tra c√°c t·ª´ kh√≥a quan tr·ªçng
                int matchCount = 0;
                int importantMatches = 0;
                
                for (String word : titleWords) {
                    if (word.length() > 2) {
                        String wordLower = word.toLowerCase();
                        String fileLower = fileNameWithoutExt.toLowerCase();
                        
                        if (fileLower.contains(wordLower)) {
                            matchCount++;
                            logger.info("‚úÖ T·ª´ kh√≥a matched: '" + word + "' trong file: " + fileName);
                            
                            // T√™n t√°c gi·∫£ ho·∫∑c t·ª´ kh√≥a ƒë·∫∑c bi·ªát c√≥ ƒëi·ªÉm s·ªë cao h∆°n
                            if (isImportantKeyword(wordLower)) {
                                importantMatches++;
                                logger.info("üéØ T·ª´ kh√≥a QUAN TR·ªåNG: '" + word + "' trong file: " + fileName);
                            }
                        } else {
                            logger.info("‚ùå T·ª´ kh√≥a KH√îNG match: '" + word + "' kh√¥ng c√≥ trong file: " + fileName);
                        }
                    }
                }
                
                // N·∫øu c√≥ t·ª´ kh√≥a quan tr·ªçng ho·∫∑c match >= 40% t·ª´ kh√≥a
                boolean hasImportantMatch = importantMatches > 0;
                boolean hasEnoughMatches = matchCount >= Math.max(1, titleWords.length * 0.4);
                
                if (hasImportantMatch || hasEnoughMatches) {
                    logger.info("üéØ T√¨m th·∫•y file ph√π h·ª£p: " + fileName + " cho s√°ch: " + bookTitle);
                    logger.info("   - T·ª´ kh√≥a matched: " + matchCount + "/" + titleWords.length);
                    logger.info("   - T·ª´ kh√≥a quan tr·ªçng: " + importantMatches);
                    return fileName;
                }
            }
        }
        
        // 3. T√¨m ki·∫øm ƒë·∫∑c bi·ªát cho t√°c gi·∫£ Victor Hugo
        if (bookTitle.toLowerCase().contains("victor") && bookTitle.toLowerCase().contains("hugo")) {
            logger.info("üîç T√¨m ki·∫øm ƒë·∫∑c bi·ªát cho t√°c gi·∫£ Victor Hugo...");
            for (File file : files) {
                if (file.isFile()) {
                    String fileName = file.getName();
                    String fileLower = fileName.toLowerCase();
                    
                    if (fileLower.contains("victor") && fileLower.contains("hugo")) {
                        logger.info("üéØ T√¨m th·∫•y file Victor Hugo: " + fileName + " cho s√°ch: " + bookTitle);
                        return fileName;
                    }
                }
            }
        }
        
        // 4. Fallback: T√¨m file c√≥ ch·ª©a b·∫•t k·ª≥ t·ª´ n√†o trong t√™n
        for (File file : files) {
            if (file.isFile()) {
                String fileName = file.getName();
                String fileNameWithoutExt = removeFileExtension(fileName);
                
                for (String word : titleWords) {
                    if (word.length() > 3 && 
                        fileNameWithoutExt.toLowerCase().contains(word.toLowerCase())) {
                        logger.info("üéØ Fallback match: " + fileName + " cho s√°ch: " + bookTitle + " (t·ª´ kh√≥a: " + word + ")");
                        return fileName;
                    }
                }
            }
        }
        
        logger.warning("‚ùå Kh√¥ng t√¨m th·∫•y file ph√π h·ª£p cho s√°ch: " + bookTitle);
        logger.warning("üìÅ C√°c file c√≥ s·∫µn:");
        for (File file : files) {
            if (file.isFile()) {
                logger.warning("   üìÑ " + file.getName());
            }
        }
        
        return null;
    }
    
    /**
     * Ki·ªÉm tra t·ª´ kh√≥a c√≥ quan tr·ªçng kh√¥ng (nh∆∞ t√™n t√°c gi·∫£)
     */
    private boolean isImportantKeyword(String word) {
        // Danh s√°ch t√™n t√°c gi·∫£ v√† t·ª´ kh√≥a quan tr·ªçng
        String[] importantKeywords = {
            "victor", "hugo", "shakespeare", "tolstoy", "hemingway", 
            "dickens", "austen", "joyce", "kafka", "orwell",
            "dostoevsky", "chekhov", "poe", "wilde", "twain",
            "verne", "dumas", "balzac", "zola", "flaubert",
            "nam", "cao", "nguy·ªÖn", "du", "h·ªì", "ch√≠", "minh",
            "paris", "london", "roma", "moscow", "new", "york"
        };
        
        String wordLower = word.toLowerCase();
        for (String keyword : importantKeywords) {
            if (wordLower.equals(keyword) || wordLower.contains(keyword)) {
                logger.info("üéØ T·ª´ kh√≥a quan tr·ªçng ƒë∆∞·ª£c ph√°t hi·ªán: '" + word + "' matches '" + keyword + "'");
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * Lo·∫°i b·ªè file extension
     */
    private String removeFileExtension(String fileName) {
        int lastDotIndex = fileName.lastIndexOf('.');
        if (lastDotIndex > 0) {
            return fileName.substring(0, lastDotIndex);
        }
        return fileName;
    }
    
    /**
     * Ki·ªÉm tra tr·∫°ng th√°i EbookAI cho m·ªôt s√°ch
     */
    public String checkEbookAIStatus(int ebookId) {
        try {
            Ebook ebook = ebookDAO.getEbookById(ebookId);
            if (ebook == null) {
                return "‚ùå S√°ch kh√¥ng t·ªìn t·∫°i";
            }
            
            EbookAI ai = ebookAIDAO.getByEbookId(ebookId);
            if (ai == null) {
                return "‚ùå EbookAI record THI·∫æU - c·∫ßn fix";
            }
            
            if (ai.getFileName() == null || ai.getFileName().trim().isEmpty()) {
                return "‚ö†Ô∏è EbookAI record t·ªìn t·∫°i nh∆∞ng thi·∫øu file_name";
            }
            
            // Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
            File file = new File(UPLOADS_FOLDER, ai.getFileName());
            if (!file.exists()) {
                return "‚ö†Ô∏è EbookAI record OK nh∆∞ng file kh√¥ng t·ªìn t·∫°i: " + ai.getFileName();
            }
            
            return "‚úÖ EbookAI record ho√†n ch·ªânh v·ªõi file: " + ai.getFileName();
            
        } catch (SQLException e) {
            return "‚ùå L·ªói database: " + e.getMessage();
        }
    }
} 