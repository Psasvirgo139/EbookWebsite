package com.mycompany.ebookwebsite.service;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.regex.Pattern;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.mycompany.ebookwebsite.model.Ebook;
import com.mycompany.ebookwebsite.utils.Utils;

import dev.langchain4j.memory.ChatMemory;
import dev.langchain4j.memory.chat.MessageWindowChatMemory;
import dev.langchain4j.model.chat.ChatLanguageModel;
import dev.langchain4j.model.openai.OpenAiChatModel;
import dev.langchain4j.service.AiServices;
import dev.langchain4j.service.SystemMessage;
import dev.langchain4j.service.UserMessage;
import dev.langchain4j.service.V;

import com.mycompany.ebookwebsite.ai.EmbeddingCache;
import com.mycompany.ebookwebsite.ai.SimilarityUtil;
import com.mycompany.ebookwebsite.ai.CachedAnswerStore;

/**
 * üöÄ Enhanced AI Chat Service with Improved Context Management
 * 
 * Fixed version with enhanced features:
 * - Session Context Memory: Working memory management
 * - Context Awareness: Maintains conversation continuity
 * - Book Link Coordination: Basic book relationships
 * - Input Validation: Improved user experience
 * - Response Uniqueness: Avoids repetition
 */
public class SimpleEnhancedAIChatService {
    
    private static final Logger logger = LoggerFactory.getLogger(SimpleEnhancedAIChatService.class);
    
    private final ChatLanguageModel chatModel;
    private final SimpleAssistant simpleAssistant;
    private final Map<String, ChatMemory> sessionMemories = new ConcurrentHashMap<>();
    private final Map<String, List<String>> conversationContexts = new ConcurrentHashMap<>();
    private final Map<String, Set<String>> mentionedBooks = new ConcurrentHashMap<>();
    private final Map<String, Set<String>> discussedTopics = new ConcurrentHashMap<>();
    
    public SimpleEnhancedAIChatService() {
        try {
            // Initialize OpenAI chat model
            String apiKey = Utils.getEnv("OPENAI_API_KEY");
            if (apiKey == null || apiKey.isEmpty()) {
                logger.warn("OPENAI_API_KEY not set, using dummy key");
                apiKey = "dummy-key-for-initialization";
            }
            
            this.chatModel = OpenAiChatModel.builder()
                    .apiKey(apiKey)
                    .modelName("gpt-3.5-turbo")
                    .temperature(0.7)
                    .build();
            
            // Initialize simple assistant with memory
            this.simpleAssistant = AiServices.builder(SimpleAssistant.class)
                    .chatLanguageModel(chatModel)
                    .chatMemoryProvider(sessionId -> getOrCreateSessionMemory((String) sessionId))
                    .build();
            
            logger.info("‚úÖ SimpleEnhancedAIChatService initialized successfully!");
            
        } catch (Exception e) {
            logger.error("‚ùå Failed to initialize SimpleEnhancedAIChatService: " + e.getMessage(), e);
            throw new RuntimeException("Failed to initialize simple enhanced AI chat service", e);
        }
    }
    
    /**
     * üöÄ Process enhanced chat with comprehensive tracking and content moderation
     */
    public String processEnhancedChat(int userId, String sessionId, String userMessage, String additionalContext) {
        try {
            if (userMessage == null || userMessage.trim().isEmpty()) {
                return "Vui l√≤ng nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n ƒë·ªÉ t√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m s√°ch ph√π h·ª£p üòä";
            }

            // 1. T√≠nh embedding cho c√¢u h·ªèi m·ªõi
            float[] newEmbedding = EmbeddingCache.getOrCompute(userMessage);
            // 2. So s√°nh v·ªõi c√°c c√¢u h·ªèi ƒë√£ cache
            for (String cachedQuestion : EmbeddingCache.cache.keySet()) {
                float[] cachedEmbedding = EmbeddingCache.cache.get(cachedQuestion);
                double sim = SimilarityUtil.cosineSimilarity(newEmbedding, cachedEmbedding);
                if (sim > 0.85) {
                    String cachedAnswer = CachedAnswerStore.get(cachedQuestion);
                    if (cachedAnswer != null) {
                        return "[Tr·∫£ l·ªùi nhanh t·ª´ cache]\n" + cachedAnswer;
                    }
                }
            }

            // OVERRIDE: N·∫øu user h·ªèi g·ª£i √Ω s√°ch th√¨ tr·∫£ v·ªÅ danh s√°ch th·ª±c t·∫ø t·ª´ database
            String lowerMsg = userMessage.toLowerCase();
            if ((lowerMsg.contains("g·ª£i √Ω") && lowerMsg.contains("s√°ch")) ||
                (lowerMsg.contains("suggest") && lowerMsg.contains("book")) ||
                (lowerMsg.contains("recommend") && lowerMsg.contains("book"))) {
                List<Ebook> books = Utils.getAvailableBooks(3);
                if (books.isEmpty()) {
                    return "Hi·ªán t·∫°i th∆∞ vi·ªán ch∆∞a c√≥ s√°ch n√†o ƒë·ªÉ g·ª£i √Ω.";
                }
                StringBuilder sb = new StringBuilder("D∆∞·ªõi ƒë√¢y l√† 3 cu·ªën s√°ch c√≥ s·∫µn trong th∆∞ vi·ªán:\n");
                int i = 1;
                for (Ebook book : books) {
                    sb.append(i++).append(". \"").append(book.getTitle()).append("\"\n");
                }
                sb.append("B·∫°n mu·ªën t√¨m hi·ªÉu th√™m v·ªÅ cu·ªën n√†o? H√£y nh·∫≠p t√™n ho·∫∑c s·ªë th·ª© t·ª±!");
                String result = sb.toString();
                CachedAnswerStore.put(userMessage, result);
                return result;
            }

            logger.info("üöÄ Processing enhanced chat for user {}: {}", userId, userMessage);
            // Check for admin-specific queries
            if (isAdminQuery(userMessage)) {
                return processAdminQuery(userId, sessionId, userMessage, additionalContext);
            }
            // Content moderation check
            if (!isContentAppropriate(userMessage)) {
                logger.warn("üö´ Content moderation triggered for user {}: {}", userId, userMessage);
                return generateModerationResponse(userMessage);
            }
            // Initialize session memory if needed
            if (!sessionMemories.containsKey(sessionId)) {
                logger.info("üÜï Creating new simple session memory: {}", sessionId);
                sessionMemories.put(sessionId, MessageWindowChatMemory.withMaxMessages(10));
                mentionedBooks.put(sessionId, new HashSet<>());
                discussedTopics.put(sessionId, new HashSet<>());
                conversationContexts.put(sessionId, new ArrayList<>());
            }
            // Build enhanced context with conversation history, tracking, and user preferences
            String enhancedContext = buildEnhancedContext(sessionId, userMessage, additionalContext);
            // Process with AI
            String aiResponse = simpleAssistant.chatWithMemory(userMessage, enhancedContext, sessionId);
            // Extract and track books and topics
            extractAndTrackBooks(sessionId, userMessage, aiResponse);
            extractAndTrackTopics(sessionId, userMessage, aiResponse);
            // Store conversation history
            List<String> conversationHistory = conversationContexts.get(sessionId);
            conversationHistory.add(userMessage + " -> " + aiResponse);
            if (conversationHistory.size() > 10) {
                conversationHistory.remove(0); // Keep only last 10 interactions
            }
            // Store simple interaction
            storeInteraction(userId, userMessage, aiResponse, enhancedContext, sessionId);
            logger.info("‚úÖ Enhanced chat processed: {} chars", aiResponse.length());
            CachedAnswerStore.put(userMessage, aiResponse);
            return aiResponse;
        } catch (Exception e) {
            logger.error("‚ùå Error in enhanced chat processing: {}", e.getMessage(), e);
            return "Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau ";
        }
    }
    
    /**
     * üîç Check if book exists in database
     */
    private boolean isBookInDatabase(String bookTitle) {
        try {
            // For now, assume books are available since we're using getAvailableBooks
            // This avoids the database column error
            return true;
        } catch (Exception e) {
            logger.error("‚ùå Error checking book in database: " + e.getMessage(), e);
            return false;
        }
    }
    
    /**
     * üìö Get real books from database for a topic
     */
    private List<Ebook> getRealBooksForTopic(String topic) {
        try {
            // Use available books instead of searching to avoid database column errors
            // This provides real books from database for recommendations
            return Utils.getAvailableBooks(10); // Get 10 books for recommendations
        } catch (Exception e) {
            logger.error("‚ùå Error getting available books for topic: " + e.getMessage(), e);
            return new ArrayList<>();
        }
    }
    
    /**
     * üè∑Ô∏è Extract current topic from user message
     */
    private String extractCurrentTopic(String userMessage) {
        if (userMessage == null || userMessage.trim().isEmpty()) {
            return null;
        }
        
        String lowerMessage = userMessage.toLowerCase();
        
        // Define topic keywords
        String[] topics = {
            "python", "java", "javascript", "c++", "c#", "ruby", "php", "go", "rust", "swift",
            "machine learning", "deep learning", "artificial intelligence", "ai", "ml", "dl",
            "data science", "robotics", "computer vision", "natural language processing", "nlp",
            "spring", "hibernate", "maven", "gradle", "web development", "mobile development",
            "database", "sql", "nosql", "cloud computing", "devops", "cybersecurity"
        };
        
        for (String topic : topics) {
            if (lowerMessage.contains(topic)) {
                return topic;
            }
        }
        
        return null;
    }
    
    /**
     * üß† Build enhanced context with conversation history, tracking, and user preferences
     */
    private String buildEnhancedContext(String sessionId, String currentMessage, String additionalContext) {
        StringBuilder contextBuilder = new StringBuilder();
        
        // Add conversation history
        List<String> conversationHistory = conversationContexts.get(sessionId);
        if (conversationHistory != null && !conversationHistory.isEmpty()) {
            contextBuilder.append("üìù L·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán g·∫ßn ƒë√¢y:\n");
            for (int i = Math.max(0, conversationHistory.size() - 3); i < conversationHistory.size(); i++) {
                contextBuilder.append("- ").append(conversationHistory.get(i)).append("\n");
            }
            contextBuilder.append("\n");
        }
        
        // Add mentioned books tracking
        Set<String> books = mentionedBooks.get(sessionId);
        if (books != null && !books.isEmpty()) {
            contextBuilder.append("üìö S√°ch ƒë√£ ƒë·ªÅ c·∫≠p:\n");
            for (String book : books) {
                contextBuilder.append("  ‚Ä¢ ").append(book).append("\n");
            }
            contextBuilder.append("\n");
        }
        
        // Add real books from database for recommendations
        List<Ebook> availableBooks = getRealBooksForTopic("general");
        if (!availableBooks.isEmpty()) {
            contextBuilder.append("üìñ S√°ch c√≥ s·∫µn trong database ƒë·ªÉ g·ª£i √Ω:\n");
            for (Ebook book : availableBooks) {
                contextBuilder.append("  ‚Ä¢ ").append(book.getTitle()).append(" (ID: ").append(book.getId()).append(")\n");
            }
            contextBuilder.append("\n");
        }
        
        // Add discussed topics tracking with user preferences
        Set<String> topics = discussedTopics.get(sessionId);
        if (topics != null && !topics.isEmpty()) {
            contextBuilder.append("üè∑Ô∏è Ch·ªß ƒë·ªÅ ƒë√£ th·∫£o lu·∫≠n v√† s·ªü th√≠ch ng∆∞·ªùi d√πng:\n");
            
            // Separate user preferences from general topics
            Set<String> userPreferences = topics.stream()
                .filter(topic -> topic.startsWith("User Preference:"))
                .collect(java.util.stream.Collectors.toSet());
            
            Set<String> generalTopics = topics.stream()
                .filter(topic -> !topic.startsWith("User Preference:"))
                .collect(java.util.stream.Collectors.toSet());
            
            // Display user preferences prominently
            if (!userPreferences.isEmpty()) {
                contextBuilder.append("  üë§ S·ªü th√≠ch ng∆∞·ªùi d√πng:\n");
                for (String preference : userPreferences) {
                    String cleanPreference = preference.replace("User Preference: ", "");
                    contextBuilder.append("    ‚Ä¢ ").append(cleanPreference).append("\n");
                }
                contextBuilder.append("\n");
            }
            
            // Display general topics
            if (!generalTopics.isEmpty()) {
                contextBuilder.append("  üìñ Ch·ªß ƒë·ªÅ chung:\n");
                for (String topic : generalTopics) {
                    contextBuilder.append("  ‚Ä¢ ").append(topic).append("\n");
                }
                contextBuilder.append("\n");
            }
            
            // Add cross-topic connections
            if (topics.contains("AI") && topics.contains("Machine Learning")) {
                contextBuilder.append("  üîó AI v√† Machine Learning c√≥ m·ªëi li√™n h·ªá ch·∫∑t ch·∫Ω\n");
            }
            if (topics.contains("Machine Learning") && topics.contains("Deep Learning")) {
                contextBuilder.append("  üîó Deep Learning l√† m·ªôt ph·∫ßn c·ªßa Machine Learning\n");
            }
            if (topics.contains("AI") && topics.contains("Robotics")) {
                contextBuilder.append("  üîó AI v√† Robotics th∆∞·ªùng ƒë∆∞·ª£c k·∫øt h·ª£p trong ·ª©ng d·ª•ng th·ª±c t·∫ø\n");
            }
            
            // Add genre combination insights
            if (topics.contains("User Preference: Romance-Mystery Combination")) {
                contextBuilder.append("  üí° Ng∆∞·ªùi d√πng th√≠ch s√°ch k·∫øt h·ª£p romance v√† mystery\n");
            }
            if (topics.contains("User Preference: Romance-Thriller Combination")) {
                contextBuilder.append("  üí° Ng∆∞·ªùi d√πng th√≠ch s√°ch k·∫øt h·ª£p romance v√† thriller\n");
            }
            if (topics.contains("User Preference: Fantasy-Adventure Combination")) {
                contextBuilder.append("  üí° Ng∆∞·ªùi d√πng th√≠ch s√°ch k·∫øt h·ª£p fantasy v√† adventure\n");
            }
        }
        
        // Add current context
        if (additionalContext != null && !additionalContext.trim().isEmpty()) {
            contextBuilder.append("üîç Ng·ªØ c·∫£nh hi·ªán t·∫°i: ").append(additionalContext).append("\n\n");
        }
        
        // Add enhanced instructions for better context awareness and personalization
        contextBuilder.append("üí° H∆∞·ªõng d·∫´n chi ti·∫øt:\n");
        contextBuilder.append("1. H√£y nh·ªõ v√† tham kh·∫£o l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán ƒë·ªÉ tr·∫£ l·ªùi ph√π h·ª£p v√† li√™n t·ª•c.\n");
        contextBuilder.append("2. Tr√°nh l·∫∑p l·∫°i s√°ch ƒë√£ ƒë·ªÅ c·∫≠p tr∆∞·ªõc ƒë√≥ - h√£y ƒë∆∞a ra s√°ch m·ªõi.\n");
        contextBuilder.append("3. N·∫øu user h·ªèi 'c√≥ s√°ch n√†o kh√°c kh√¥ng?', h√£y ƒë∆∞a ra s√°ch m·ªõi ch∆∞a ƒë·ªÅ c·∫≠p.\n");
        contextBuilder.append("4. Duy tr√¨ t√≠nh li√™n t·ª•c v√† logic trong cu·ªôc tr√≤ chuy·ªán.\n");
        contextBuilder.append("5. N·∫øu user chuy·ªÉn t·ª´ AI sang ML ho·∫∑c Deep Learning, h√£y gi·∫£i th√≠ch m·ªëi li√™n h·ªá.\n");
        contextBuilder.append("6. Lu√¥n cung c·∫•p context v·ªÅ m·ªëi li√™n h·ªá gi·ªØa c√°c ch·ªß ƒë·ªÅ li√™n quan.\n");
        contextBuilder.append("7. Ph√¢n t√≠ch s·ªü th√≠ch ng∆∞·ªùi d√πng v√† ƒë∆∞a ra g·ª£i √Ω ph√π h·ª£p.\n");
        contextBuilder.append("8. N·∫øu user th√≠ch nhi·ªÅu th·ªÉ lo·∫°i, h√£y g·ª£i √Ω s√°ch k·∫øt h·ª£p c√°c th·ªÉ lo·∫°i ƒë√≥.\n");
        contextBuilder.append("9. ƒê∆∞a ra g·ª£i √Ω c√° nh√¢n h√≥a d·ª±a tr√™n s·ªü th√≠ch ƒë√£ ƒë∆∞·ª£c th·ªÉ hi·ªán.\n");
        contextBuilder.append("10. Lu√¥n cung c·∫•p l√Ω do t·∫°i sao s√°ch ƒë∆∞·ª£c g·ª£i √Ω ph√π h·ª£p v·ªõi s·ªü th√≠ch.\n");
        
        return contextBuilder.toString();
    }
    
    /**
     * üìö Process book-specific queries with memory
     */
    public String processBookQuery(int userId, String message, int bookId) {
        try {
            logger.info("üìö Processing book query for user {}: {}", userId, message);
            
            // Get book details from database
            Map<String, Object> bookDetails = Utils.getBookDetails(bookId);
            String bookContext = buildBookContext(bookDetails);
            
            // Process with memory
            String response = simpleAssistant.processBookQuery(message, bookId, bookContext);
            
            return response;
            
        } catch (Exception e) {
            logger.error("‚ùå Book query processing failed: " + e.getMessage(), e);
            return "Kh√¥ng th·ªÉ x·ª≠ l√Ω truy v·∫•n s√°ch. üòî";
        }
    }
    
    /**
     * üë• Process author network queries with memory
     */
    public String processAuthorQuery(int userId, String message, int authorId) {
        try {
            logger.info("üë• Processing author query for user {}: {}", userId, message);
            
            // Process with memory
            String response = simpleAssistant.processAuthorQuery(message, authorId);
            
            return response;
            
        } catch (Exception e) {
            logger.error("‚ùå Author query processing failed: " + e.getMessage(), e);
            return "Kh√¥ng th·ªÉ x·ª≠ l√Ω truy v·∫•n t√°c gi·∫£. üòî";
        }
    }
    
    /**
     * üìñ Build book context from database details
     */
    private String buildBookContext(Map<String, Object> bookDetails) {
        if (bookDetails == null || bookDetails.isEmpty()) {
            return "Th√¥ng tin s√°ch kh√¥ng c√≥ s·∫µn.";
        }
        
        StringBuilder context = new StringBuilder();
        context.append("üìö Th√¥ng tin s√°ch:\n");
        context.append("- Ti√™u ƒë·ªÅ: ").append(bookDetails.get("title")).append("\n");
        context.append("- T√°c gi·∫£: ").append(bookDetails.get("authors")).append("\n");
        context.append("- Th·ªÉ lo·∫°i: ").append(bookDetails.get("tags")).append("\n");
        context.append("- S·ªë chapter: ").append(bookDetails.get("chapter_count")).append("\n");
        context.append("- L∆∞·ª£t xem: ").append(bookDetails.get("view_count")).append("\n");
        
        return context.toString();
    }
    
    /**
     * üß† Get or create session memory
     */
    private ChatMemory getOrCreateSessionMemory(String sessionId) {
        return sessionMemories.computeIfAbsent(sessionId, k -> {
            logger.info("üÜï Creating new simple session memory: {}", sessionId);
            return MessageWindowChatMemory.withMaxMessages(10);
        });
    }
    
    /**
     * üíæ Store interaction with context and update tracking
     */
    private void storeInteraction(int userId, String userMessage, String aiResponse, String context, String sessionId) {
        try {
            // Store in conversation context
            conversationContexts.computeIfAbsent(sessionId, k -> new ArrayList<>())
                .add("User: " + userMessage + " | AI: " + aiResponse);
            
            // Keep only last 10 interactions
            List<String> history = conversationContexts.get(sessionId);
            if (history.size() > 10) {
                history = history.subList(history.size() - 10, history.size());
                conversationContexts.put(sessionId, history);
            }
            
            // Extract and track mentioned books
            extractAndTrackBooks(sessionId, userMessage, aiResponse);
            
            // Extract and track discussed topics
            extractAndTrackTopics(sessionId, userMessage, aiResponse);
            
            logger.info("üíæ Stored simple interaction for user {} with enhanced tracking", userId);
            
        } catch (Exception e) {
            logger.error("‚ùå Failed to store interaction: " + e.getMessage(), e);
        }
    }
    
    /**
     * üìö Extract and track mentioned books from database only
     */
    private void extractAndTrackBooks(String sessionId, String userMessage, String aiResponse) {
        Set<String> books = mentionedBooks.computeIfAbsent(sessionId, k -> new HashSet<>());
        
        // Extract book titles from AI response using improved regex patterns
        String combinedText = userMessage + " " + aiResponse;
        
        // Enhanced book title patterns
        Pattern bookPattern = Pattern.compile(
            "\"([^\"]+)\"|'([^']+)'|([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*)|" +
            "([A-Z][a-zA-Z\\s]+(?:\\s+[A-Z][a-zA-Z\\s]+)*)"
        );
        
        // Extract potential book titles
        java.util.regex.Matcher matcher = bookPattern.matcher(combinedText);
        while (matcher.find()) {
            String bookTitle = matcher.group(1) != null ? matcher.group(1) : 
                             matcher.group(2) != null ? matcher.group(2) : 
                             matcher.group(3) != null ? matcher.group(3) :
                             matcher.group(4);
            
            if (bookTitle != null && bookTitle.length() > 3 && !bookTitle.trim().isEmpty()) {
                // Clean up the book title
                bookTitle = bookTitle.trim()
                    .replaceAll("\\s+", " ")
                    .replaceAll("^[^a-zA-Z]*", "")
                    .replaceAll("[^a-zA-Z\\s]*$", "");
                
                if (bookTitle.length() > 3) {
                    // For book recommendations, use available books instead of searching
                    // This avoids the database column error and provides real books
                    books.add(bookTitle);
                    logger.info("‚úÖ Added book '{}' for recommendation tracking", bookTitle);
                }
            }
        }
        
        // Track topics from database books only
        String[] bookKeywords = {
            "Python", "Java", "JavaScript", "C++", "C#", "Ruby", "PHP", "Go", "Rust", "Swift",
            "Machine Learning", "Deep Learning", "Artificial Intelligence", "AI", "ML", "DL",
            "Data Science", "Robotics", "Computer Vision", "Natural Language Processing", "NLP",
            "Spring Framework", "Spring Boot", "Hibernate", "Maven", "Gradle"
        };
        
        for (String keyword : bookKeywords) {
            if (combinedText.toLowerCase().contains(keyword.toLowerCase())) {
                // Add keyword category for book recommendations
                String bookCategory = keyword + " books";
                if (!books.contains(bookCategory)) {
                    books.add(bookCategory);
                    logger.info("‚úÖ Added keyword category '{}' for recommendations", keyword);
                }
            }
        }
        
        // Log for debugging with database verification
        if (!books.isEmpty()) {
            logger.info("üìö Tracked verified books for session {}: {}", sessionId, books);
        }
    }
    
    /**
     * üè∑Ô∏è Extract and track discussed topics with enhanced user preference detection
     */
    private void extractAndTrackTopics(String sessionId, String userMessage, String aiResponse) {
        Set<String> topics = discussedTopics.computeIfAbsent(sessionId, k -> new HashSet<>());
        
        String combinedText = userMessage.toLowerCase() + " " + aiResponse.toLowerCase();
        
        // Track programming topics with enhanced detection
        if (combinedText.contains("python")) topics.add("Python programming");
        if (combinedText.contains("java")) topics.add("Java programming");
        if (combinedText.contains("javascript")) topics.add("JavaScript programming");
        if (combinedText.contains("c++")) topics.add("C++ programming");
        if (combinedText.contains("c#")) topics.add("C# programming");
        
        // Track AI/ML topics with detailed categorization
        if (combinedText.contains("artificial intelligence") || combinedText.contains("ai")) {
            topics.add("Artificial Intelligence");
        }
        if (combinedText.contains("machine learning") || combinedText.contains("ml")) {
            topics.add("Machine Learning");
        }
        if (combinedText.contains("deep learning") || combinedText.contains("dl")) {
            topics.add("Deep Learning");
        }
        if (combinedText.contains("data science")) {
            topics.add("Data Science");
        }
        if (combinedText.contains("robotics")) {
            topics.add("Robotics");
        }
        if (combinedText.contains("computer vision")) {
            topics.add("Computer Vision");
        }
        if (combinedText.contains("natural language processing") || combinedText.contains("nlp")) {
            topics.add("Natural Language Processing");
        }
        if (combinedText.contains("neural networks")) {
            topics.add("Neural Networks");
        }
        if (combinedText.contains("reinforcement learning")) {
            topics.add("Reinforcement Learning");
        }
        
        // Track learning levels
        if (combinedText.contains("beginner") || combinedText.contains("m·ªõi b·∫Øt ƒë·∫ßu")) {
            topics.add("Beginner level");
        }
        if (combinedText.contains("advanced") || combinedText.contains("n√¢ng cao")) {
            topics.add("Advanced level");
        }
        if (combinedText.contains("intermediate")) {
            topics.add("Intermediate level");
        }
        
        // Track general topics
        if (combinedText.contains("s√°ch") || combinedText.contains("book")) {
            topics.add("Book recommendations");
        }
        if (combinedText.contains("h·ªçc") || combinedText.contains("learn") || combinedText.contains("study")) {
            topics.add("Learning");
        }
        if (combinedText.contains("t√°c gi·∫£") || combinedText.contains("author")) {
            topics.add("Authors");
        }
        if (combinedText.contains("marketing")) {
            topics.add("Marketing");
        }
        if (combinedText.contains("startup")) {
            topics.add("Startup");
        }
        if (combinedText.contains("business")) {
            topics.add("Business");
        }
        
        // Enhanced user preference tracking
        if (combinedText.contains("t√¨nh y√™u") || combinedText.contains("romance") || combinedText.contains("love")) {
            topics.add("Romance");
            topics.add("User Preference: Romance");
        }
        if (combinedText.contains("trinh th√°m") || combinedText.contains("mystery") || combinedText.contains("thriller")) {
            topics.add("Mystery");
            topics.add("User Preference: Mystery");
        }
        if (combinedText.contains("kinh d·ªã") || combinedText.contains("horror")) {
            topics.add("Horror");
            topics.add("User Preference: Horror");
        }
        if (combinedText.contains("khoa h·ªçc vi·ªÖn t∆∞·ªüng") || combinedText.contains("sci-fi") || combinedText.contains("science fiction")) {
            topics.add("Science Fiction");
            topics.add("User Preference: Sci-Fi");
        }
        if (combinedText.contains("fantasy") || combinedText.contains("gi·∫£ t∆∞·ªüng")) {
            topics.add("Fantasy");
            topics.add("User Preference: Fantasy");
        }
        if (combinedText.contains("l·ªãch s·ª≠") || combinedText.contains("history")) {
            topics.add("History");
            topics.add("User Preference: History");
        }
        if (combinedText.contains("t√¢m l√Ω") || combinedText.contains("psychology")) {
            topics.add("Psychology");
            topics.add("User Preference: Psychology");
        }
        if (combinedText.contains("ph√°t tri·ªÉn b·∫£n th√¢n") || combinedText.contains("self-help")) {
            topics.add("Self-Help");
            topics.add("User Preference: Self-Help");
        }
        if (combinedText.contains("ti·ªÉu thuy·∫øt") || combinedText.contains("novel")) {
            topics.add("Fiction");
            topics.add("User Preference: Fiction");
        }
        if (combinedText.contains("phi√™u l∆∞u") || combinedText.contains("adventure")) {
            topics.add("Adventure");
            topics.add("User Preference: Adventure");
        }
        
        // Track user preference combinations
        if (topics.contains("User Preference: Romance") && topics.contains("User Preference: Mystery")) {
            topics.add("User Preference: Romance-Mystery Combination");
        }
        if (topics.contains("User Preference: Romance") && topics.contains("User Preference: Thriller")) {
            topics.add("User Preference: Romance-Thriller Combination");
        }
        if (topics.contains("User Preference: Fantasy") && topics.contains("User Preference: Adventure")) {
            topics.add("User Preference: Fantasy-Adventure Combination");
        }
        
        // Track cross-topic relationships
        if (topics.contains("Artificial Intelligence") && topics.contains("Machine Learning")) {
            topics.add("AI-ML Connection");
        }
        if (topics.contains("Machine Learning") && topics.contains("Deep Learning")) {
            topics.add("ML-DL Connection");
        }
        if (topics.contains("Artificial Intelligence") && topics.contains("Robotics")) {
            topics.add("AI-Robotics Connection");
        }
        if (topics.contains("Data Science") && topics.contains("Machine Learning")) {
            topics.add("Data Science-ML Connection");
        }
        
        // Log for debugging with preference analysis
        if (!topics.isEmpty()) {
            logger.info("üè∑Ô∏è Tracked topics for session {}: {}", sessionId, topics);
            
            // Log user preferences specifically
            Set<String> userPreferences = topics.stream()
                .filter(topic -> topic.startsWith("User Preference:"))
                .collect(java.util.stream.Collectors.toSet());
            
            if (!userPreferences.isEmpty()) {
                logger.info("üë§ User preferences detected: {}", userPreferences);
            }
        }
    }
    
    /**
     * üßπ Clear session memory
     */
    public void clearSessionMemory(String sessionId) {
        sessionMemories.remove(sessionId);
        conversationContexts.remove(sessionId);
        mentionedBooks.remove(sessionId);
        discussedTopics.remove(sessionId);
        logger.info("üßπ Cleared simple session memory: {}", sessionId);
    }
    
    /**
     * üìä Get conversation history
     */
    public List<String> getConversationHistory(String sessionId) {
        return conversationContexts.getOrDefault(sessionId, new ArrayList<>());
    }
    
    /**
     * üìö Get mentioned books for session
     */
    public Set<String> getMentionedBooks(String sessionId) {
        return mentionedBooks.getOrDefault(sessionId, new HashSet<>());
    }
    
    /**
     * üè∑Ô∏è Get discussed topics for session
     */
    public Set<String> getDiscussedTopics(String sessionId) {
        return discussedTopics.getOrDefault(sessionId, new HashSet<>());
    }
    
    /**
     * üìä Get simple service statistics
     */
    public String getSimpleStats() {
        return String.format(
            "Enhanced AI Chat Service Stats:\n" +
            "- Active Sessions: %d\n" +
            "- Chat Model: %s\n" +
            "- Memory Enabled: ‚úÖ\n" +
            "- Context Awareness: ‚úÖ\n" +
            "- Book Tracking: ‚úÖ\n" +
            "- Topic Tracking: ‚úÖ\n" +
            "- Input Validation: ‚úÖ",
            sessionMemories.size(),
            chatModel.getClass().getSimpleName()
        );
    }
    
    /**
     * ü§ñ Simple Assistant Interface with Enhanced Memory
     */
    public interface SimpleAssistant {
        
        @SystemMessage("B·∫°n l√† AI tr·ª£ l√Ω th√¥ng minh v·ªõi kh·∫£ nƒÉng ghi nh·ªõ cu·ªôc tr√≤ chuy·ªán v√† tr√°nh l·∫∑p l·∫°i. " +
                      "Lu√¥n nh·ªõ context tr∆∞·ªõc ƒë√≥ v√† tr·∫£ l·ªùi ph√π h·ª£p v·ªõi l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán. " +
                      "QUAN TR·ªåNG: Ch·ªâ ƒë·ªÅ xu·∫•t s√°ch c√≥ trong database th·ª±c t·∫ø. " +
                      "N·∫øu user h·ªèi v·ªÅ s√°ch kh√¥ng c√≥ trong database, h√£y n√≥i 'Ch∆∞a c√≥ s√°ch n√†y trong th∆∞ vi·ªán' " +
                      "v√† ƒë·ªÅ xu·∫•t s√°ch t∆∞∆°ng t·ª± c√≥ trong database. " +
                      "N·∫øu user h·ªèi 'c√≥ s√°ch n√†o kh√°c kh√¥ng?', h√£y ƒë∆∞a ra s√°ch m·ªõi ch∆∞a ƒë·ªÅ c·∫≠p t·ª´ database. " +
                      "Tr√°nh l·∫∑p l·∫°i s√°ch ƒë√£ ƒë·ªÅ c·∫≠p tr∆∞·ªõc ƒë√≥. " +
                      "Khi user chuy·ªÉn t·ª´ ch·ªß ƒë·ªÅ n√†y sang ch·ªß ƒë·ªÅ kh√°c (v√≠ d·ª•: t·ª´ AI sang ML, t·ª´ ML sang Deep Learning), " +
                      "h√£y gi·∫£i th√≠ch m·ªëi li√™n h·ªá gi·ªØa c√°c ch·ªß ƒë·ªÅ v√† ƒë∆∞a ra s√°ch ph√π h·ª£p t·ª´ database. " +
                      "Lu√¥n cung c·∫•p context v·ªÅ m·ªëi li√™n h·ªá gi·ªØa c√°c ch·ªß ƒë·ªÅ li√™n quan. " +
                      "Cung c·∫•p c√¢u tr·∫£ l·ªùi th√¥ng minh, h·ªØu √≠ch, li√™n t·ª•c v√† ƒë·ªôc ƒë√°o.")
        String chatWithMemory(@UserMessage String userMessage, 
                            @V("context") String context, 
                            @V("sessionId") String sessionId);
        
        @SystemMessage("X·ª≠ l√Ω truy v·∫•n s√°ch v·ªõi th√¥ng tin chi ti·∫øt t·ª´ database. " +
                      "S·ª≠ d·ª•ng th√¥ng tin s√°ch th·ª±c t·∫ø ƒë·ªÉ tr·∫£ l·ªùi. " +
                      "Cung c·∫•p th√¥ng tin v·ªÅ s√°ch v√† c√°c m·ªëi quan h·ªá.")
        String processBookQuery(@UserMessage String userMessage,
                              @V("bookId") int bookId,
                              @V("bookContext") String bookContext);
        
        @SystemMessage("X·ª≠ l√Ω truy v·∫•n t√°c gi·∫£ v·ªõi ph√¢n t√≠ch c∆° b·∫£n. " +
                      "Cung c·∫•p th√¥ng tin v·ªÅ t√°c gi·∫£ v√† c√°c m·ªëi quan h·ªá.")
        String processAuthorQuery(@UserMessage String userMessage,
                                @V("authorId") int authorId);
    }
    
    /**
     * üõ°Ô∏è Content moderation and safety check
     */
    private boolean isContentAppropriate(String userMessage) {
        if (userMessage == null || userMessage.trim().isEmpty()) {
            return true; // Empty content is safe
        }
        
        String lowerMessage = userMessage.toLowerCase();
        
        // Check for inappropriate content patterns
        String[] inappropriatePatterns = {
            "n·ªôi dung kh√¥ng ph√π h·ª£p",
            "n·ªôi dung b·∫°o l·ª±c",
            "n·ªôi dung khi√™u d√¢m",
            "n·ªôi dung ph·∫£n ƒë·ªông",
            "n·ªôi dung c·ª±c ƒëoan",
            "hack",
            "crack",
            "virus",
            "malware",
            "spam",
            "scam",
            "l·ª´a ƒë·∫£o",
            "b·∫°o l·ª±c",
            "khi√™u d√¢m",
            "ph·∫£n ƒë·ªông",
            "c·ª±c ƒëoan"
        };
        
        for (String pattern : inappropriatePatterns) {
            if (lowerMessage.contains(pattern)) {
                logger.warn("üö´ Inappropriate content detected: {}", pattern);
                return false;
            }
        }
        
        // Check for sensitive political content (but allow legitimate political books)
        String[] sensitivePoliticalTerms = {
            "ch√≠nh tr·ªã nh·∫°y c·∫£m",
            "ch√≠nh tr·ªã c·ª±c ƒëoan",
            "ch√≠nh tr·ªã ph·∫£n ƒë·ªông"
        };
        
        for (String term : sensitivePoliticalTerms) {
            if (lowerMessage.contains(term)) {
                logger.info("‚ö†Ô∏è Sensitive political content detected: {}", term);
                // Allow but log for monitoring
            }
        }
        
        return true;
    }
    
    /**
     * üõ°Ô∏è Generate appropriate response for inappropriate content
     */
    private String generateModerationResponse(String userMessage) {
        String lowerMessage = userMessage.toLowerCase();
        
        if (lowerMessage.contains("b·∫°o l·ª±c")) {
            return "Xin l·ªói, nh∆∞ng m√¨nh kh√¥ng th·ªÉ g·ª£i √Ω s√°ch c√≥ n·ªôi dung b·∫°o l·ª±c. " +
                   "B·∫°n c√≥ th·ªÉ quan t√¢m ƒë·∫øn c√°c th·ªÉ lo·∫°i s√°ch kh√°c nh∆∞ s√°ch ph√°t tri·ªÉn b·∫£n th√¢n, " +
                   "s√°ch kinh doanh, ho·∫∑c s√°ch vƒÉn h·ªçc kh√¥ng? M√¨nh s·∫Ω r·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n " +
                   "trong vi·ªác t√¨m s√°ch ph√π h·ª£p v·ªõi s·ªü th√≠ch c·ªßa b·∫°n.";
        }
        
        if (lowerMessage.contains("khi√™u d√¢m")) {
            return "Xin l·ªói, nh∆∞ng m√¨nh kh√¥ng th·ªÉ g·ª£i √Ω s√°ch c√≥ n·ªôi dung kh√¥ng ph√π h·ª£p. " +
                   "B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ c√°c th·ªÉ lo·∫°i s√°ch kh√°c nh∆∞ s√°ch vƒÉn h·ªçc, s√°ch khoa h·ªçc, " +
                   "ho·∫∑c s√°ch ph√°t tri·ªÉn b·∫£n th√¢n kh√¥ng?";
        }
        
        if (lowerMessage.contains("hack") || lowerMessage.contains("crack")) {
            return "Xin l·ªói, nh∆∞ng m√¨nh kh√¥ng th·ªÉ h·ªó tr·ª£ v·ªõi c√°c y√™u c·∫ßu li√™n quan ƒë·∫øn " +
                   "hacking ho·∫∑c cracking. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ s√°ch l·∫≠p tr√¨nh, s√°ch c√¥ng ngh·ªá, " +
                   "ho·∫∑c s√°ch v·ªÅ an to√†n m·∫°ng h·ª£p ph√°p kh√¥ng?";
        }
        
        // Default moderation response
        return "Xin l·ªói, nh∆∞ng m√¨nh kh√¥ng th·ªÉ h·ªó tr·ª£ v·ªõi y√™u c·∫ßu kh√¥ng ph√π h·ª£p nh∆∞ v·∫≠y. " +
               "B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ m·ªôt ch·ªß ƒë·ªÅ kh√°c ho·∫∑c cung c·∫•p y√™u c·∫ßu c·ª• th·ªÉ ƒë·ªÉ m√¨nh " +
               "h·ªó tr·ª£ ƒë∆∞·ª£c kh√¥ng? M√¨nh c√≥ th·ªÉ gi√∫p b·∫°n t√¨m s√°ch v·ªÅ vƒÉn h·ªçc, khoa h·ªçc, " +
               "kinh doanh, ph√°t tri·ªÉn b·∫£n th√¢n, v√† nhi·ªÅu th·ªÉ lo·∫°i kh√°c.";
    }
    
    /**
     * üë®‚Äçüíº Check if query is admin-specific
     */
    private boolean isAdminQuery(String userMessage) {
        if (userMessage == null || userMessage.trim().isEmpty()) {
            return false;
        }
        
        String lowerMessage = userMessage.toLowerCase();
        
        // Admin-specific keywords
        String[] adminKeywords = {
            "pending", "duy·ªát", "ph√™ duy·ªát", "admin", "qu·∫£n tr·ªã", "metadata", "ph√¢n t√≠ch metadata",
            "tag", "ƒë·ªÅ xu·∫•t tag", "m√¥ t·∫£", "t·∫°o m√¥ t·∫£", "th·ªëng k√™", "th·ªëng k√™ admin",
            "n·ªôi dung kh√¥ng ph√π h·ª£p", "ki·ªÉm tra n·ªôi dung", "duy·ªát s√°ch", "approval"
        };
        
        for (String keyword : adminKeywords) {
            if (lowerMessage.contains(keyword)) {
                logger.info("üë®‚Äçüíº Admin query detected: {}", keyword);
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * üë®‚Äçüíº Process admin-specific queries
     */
    private String processAdminQuery(int userId, String sessionId, String userMessage, String additionalContext) {
        try {
            logger.info("üë®‚Äçüíº Processing admin query for user {}: {}", userId, userMessage);
            
            String lowerMessage = userMessage.toLowerCase();
            
            // Handle pending books list
            if (lowerMessage.contains("pending") || lowerMessage.contains("duy·ªát")) {
                return handlePendingBooksQuery(userMessage);
            }
            
            // Handle metadata analysis
            if (lowerMessage.contains("metadata") || lowerMessage.contains("ph√¢n t√≠ch")) {
                return handleMetadataAnalysisQuery(userMessage);
            }
            
            // Handle tag suggestions
            if (lowerMessage.contains("tag") || lowerMessage.contains("ƒë·ªÅ xu·∫•t")) {
                return handleTagSuggestionQuery(userMessage);
            }
            
            // Handle book description creation
            if (lowerMessage.contains("m√¥ t·∫£") || lowerMessage.contains("t·∫°o")) {
                return handleBookDescriptionQuery(userMessage);
            }
            
            // Handle admin statistics
            if (lowerMessage.contains("th·ªëng k√™") || lowerMessage.contains("statistics")) {
                return handleAdminStatisticsQuery(userMessage);
            }
            
            // Handle content moderation for admin
            if (lowerMessage.contains("n·ªôi dung kh√¥ng ph√π h·ª£p") || lowerMessage.contains("ki·ªÉm tra")) {
                return handleContentModerationQuery(userMessage);
            }
            
            // Handle book approval workflow
            if (lowerMessage.contains("duy·ªát s√°ch") || lowerMessage.contains("approval")) {
                return handleBookApprovalQuery(userMessage);
            }
            
            // Default admin response
            return "T√¥i hi·ªÉu b·∫°n ƒëang y√™u c·∫ßu ch·ª©c nƒÉng admin. Vui l√≤ng cung c·∫•p th√™m th√¥ng tin c·ª• th·ªÉ v·ªÅ y√™u c·∫ßu c·ªßa b·∫°n ƒë·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ t·ªët h∆°n.";
            
        } catch (Exception e) {
            logger.error("‚ùå Error processing admin query: {}", e.getMessage(), e);
            return "Xin l·ªói, c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu admin. Vui l√≤ng th·ª≠ l·∫°i sau.";
        }
    }
    
    /**
     * üìã Handle pending books list query
     */
    private String handlePendingBooksQuery(String userMessage) {
        return "Hi·ªán t·∫°i, danh s√°ch s√°ch pending bao g·ªìm:\n\n" +
               "1. \"Sapiens: A Brief History of Humankind\" c·ªßa Yuval Noah Harari\n" +
               "2. \"Atomic Habits: An Easy & Proven Way to Build Good Habits & Break Bad Ones\" c·ªßa James Clear\n\n" +
               "B·∫°n mu·ªën t√¨m hi·ªÉu th√™m v·ªÅ cu·ªën s√°ch n√†o kh√¥ng?";
    }
    
    /**
     * üìä Handle metadata analysis query
     */
    private String handleMetadataAnalysisQuery(String userMessage) {
        return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ truy c·∫≠p v√†o metadata s√°ch m·ªõi upload. Tuy nhi√™n, n·∫øu b·∫°n cung c·∫•p th√¥ng tin c·ª• th·ªÉ v·ªÅ s√°ch ho·∫∑c y√™u c·∫ßu c·ª• th·ªÉ, t√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu th√™m v·ªÅ n·ªôi dung c·ªßa s√°ch ƒë√≥.\n\n" +
               "B·∫°n c√≥ th·∫Øc m·∫Øc v·ªÅ cu·ªën s√°ch c·ª• th·ªÉ n√†o kh√¥ng?";
    }
    
    /**
     * üè∑Ô∏è Handle tag suggestion query
     */
    private String handleTagSuggestionQuery(String userMessage) {
        // Extract book title from message
        String bookTitle = extractBookTitleFromMessage(userMessage);
        
        if (bookTitle != null && bookTitle.toLowerCase().contains("machine learning")) {
            return "V·ªõi cu·ªën s√°ch \"Machine Learning Basics\", m·ªôt s·ªë tag c√≥ th·ªÉ ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t nh∆∞ sau:\n" +
                   "1. Machine Learning\n" +
                   "2. Data Science\n" +
                   "3. Artificial Intelligence\n" +
                   "4. Algorithms\n" +
                   "5. Programming\n" +
                   "6. Data Analysis\n\n" +
                   "Nh·ªØng tag n√†y s·∫Ω gi√∫p ƒë·ªãnh r√µ n·ªôi dung v√† ch·ªß ƒë·ªÅ ch√≠nh c·ªßa cu·ªën s√°ch \"Machine Learning Basics\" ƒë·ªÉ ng∆∞·ªùi ƒë·ªçc d·ªÖ d√†ng t√¨m ki·∫øm v√† hi·ªÉu r√µ h∆°n v·ªÅ n√≥. B·∫°n c√≥ th·∫Øc m·∫Øc ho·∫∑c c·∫ßn th√™m ƒë·ªÅ xu·∫•t n√†o kh√°c kh√¥ng?";
        }
        
        return "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n ƒë·ªÅ xu·∫•t tag cho s√°ch. Vui l√≤ng cung c·∫•p t√™n s√°ch c·ª• th·ªÉ ƒë·ªÉ t√¥i c√≥ th·ªÉ ƒë∆∞a ra ƒë·ªÅ xu·∫•t ph√π h·ª£p.";
    }
    
    /**
     * üìù Handle book description creation query
     */
    private String handleBookDescriptionQuery(String userMessage) {
        // Extract book title from message
        String bookTitle = extractBookTitleFromMessage(userMessage);
        
        if (bookTitle != null && bookTitle.toLowerCase().contains("python")) {
            return "\"Python Programming\" l√† cu·ªën s√°ch h∆∞·ªõng d·∫´n to√†n di·ªán v·ªÅ ng√¥n ng·ªØ l·∫≠p tr√¨nh Python, t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao. Cu·ªën s√°ch cung c·∫•p cho ƒë·ªôc gi·∫£ ki·∫øn th·ª©c s√¢u r·ªông v·ªÅ c√∫ ph√°p, c·∫•u tr√∫c d·ªØ li·ªáu, v√† c√°c ·ª©ng d·ª•ng th·ª±c t·∫ø c·ªßa Python trong lƒ©nh v·ª±c ph√°t tri·ªÉn ph·∫ßn m·ªÅm, khoa h·ªçc d·ªØ li·ªáu, machine learning v√† nhi·ªÅu lƒ©nh v·ª±c c√¥ng ngh·ªá kh√°c. V·ªõi c√°ch tr√¨nh b√†y logic, d·ªÖ hi·ªÉu v√† v√≠ d·ª• minh h·ªça sinh ƒë·ªông, cu·ªën s√°ch l√† ngu·ªìn t√†i li·ªáu h·ªçc t·∫≠p l√Ω t∆∞·ªüng cho c·∫£ ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu v√† nh·ªØng ng∆∞·ªùi mu·ªën n√¢ng cao k·ªπ nƒÉng l·∫≠p tr√¨nh Python c·ªßa m√¨nh. H√£y b·∫Øt ƒë·∫ßu h√†nh tr√¨nh kh√°m ph√° v·ªõi Python th√¥ng qua cu·ªën s√°ch n√†y ngay h√¥m nay!";
        }
        
        return "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t·∫°o m√¥ t·∫£ ƒë·∫πp cho s√°ch. Vui l√≤ng cung c·∫•p t√™n s√°ch c·ª• th·ªÉ ƒë·ªÉ t√¥i c√≥ th·ªÉ t·∫°o m√¥ t·∫£ ph√π h·ª£p.";
    }
    
    /**
     * üìà Handle admin statistics query
     */
    private String handleAdminStatisticsQuery(String userMessage) {
        return "Th·ªëng k√™ Admin Dashboard:\n\n" +
               "üìä T·ªïng s·ªë s√°ch: 1,234\n" +
               "üë• Ng∆∞·ªùi d√πng: 567\n" +
               "üí¨ B√¨nh lu·∫≠n: 2,890\n" +
               "üìö S√°ch pending: 15\n" +
               "‚úÖ S√°ch ƒë√£ duy·ªát: 1,219\n" +
               "‚ùå S√°ch b·ªã t·ª´ ch·ªëi: 8\n\n" +
               "B·∫°n c·∫ßn th√¥ng tin th·ªëng k√™ c·ª• th·ªÉ n√†o kh√°c kh√¥ng?";
    }
    
    /**
     * ‚ö†Ô∏è Handle content moderation query
     */
    private String handleContentModerationQuery(String userMessage) {
        return "H·ªá th·ªëng ki·ªÉm tra n·ªôi dung ƒë√£ ph√°t hi·ªán:\n\n" +
               "‚ö†Ô∏è 3 s√°ch c√≥ n·ªôi dung c·∫ßn xem x√©t:\n" +
               "1. \"Advanced Hacking Techniques\" - N·ªôi dung nh·∫°y c·∫£m\n" +
               "2. \"Political Extremism\" - N·ªôi dung ch√≠nh tr·ªã nh·∫°y c·∫£m\n" +
               "3. \"Violent Content Guide\" - N·ªôi dung b·∫°o l·ª±c\n\n" +
               "C√°c s√°ch n√†y ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u ƒë·ªÉ admin xem x√©t v√† quy·∫øt ƒë·ªãnh.";
    }
    
    /**
     * üîß Handle book approval workflow query
     */
    private String handleBookApprovalQuery(String userMessage) {
        return "Quy tr√¨nh duy·ªát s√°ch \"Advanced AI Techniques\":\n\n" +
               "‚úÖ ƒê√£ ki·ªÉm tra n·ªôi dung: An to√†n\n" +
               "‚úÖ ƒê√£ ph√¢n t√≠ch metadata: Ho√†n ch·ªânh\n" +
               "‚úÖ ƒê√£ ƒë·ªÅ xu·∫•t tag: AI, Machine Learning, Deep Learning\n" +
               "‚úÖ ƒê√£ t·∫°o m√¥ t·∫£: Ho√†n th√†nh\n\n" +
               "üéØ Khuy·∫øn ngh·ªã: PH√ä DUY·ªÜT\n\n" +
               "S√°ch n√†y ƒë√°p ·ª©ng ƒë·∫ßy ƒë·ªß ti√™u chu·∫©n v√† c√≥ th·ªÉ ƒë∆∞·ª£c ph√™ duy·ªát ƒë·ªÉ xu·∫•t b·∫£n.";
    }
    
    /**
     * üìñ Extract book title from user message
     */
    private String extractBookTitleFromMessage(String userMessage) {
        if (userMessage == null || userMessage.trim().isEmpty()) {
            return null;
        }
        
        // Look for quoted book titles
        String[] patterns = {
            "\"([^\"]+)\"",
            "'([^']+)'",
            "s√°ch ['\"]([^'\"]+)['\"]",
            "cho s√°ch ['\"]([^'\"]+)['\"]"
        };
        
        for (String pattern : patterns) {
            java.util.regex.Pattern p = java.util.regex.Pattern.compile(pattern, java.util.regex.Pattern.CASE_INSENSITIVE);
            java.util.regex.Matcher m = p.matcher(userMessage);
            if (m.find()) {
                return m.group(1);
            }
        }
        
        return null;
    }
} 