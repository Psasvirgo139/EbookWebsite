package com.mycompany.ebookwebsite.controller;

import com.mycompany.ebookwebsite.dao.EbookDAO;
import com.mycompany.ebookwebsite.dao.EbookAIDAO;
import com.mycompany.ebookwebsite.model.Ebook;
import com.mycompany.ebookwebsite.model.EbookAI;
import com.mycompany.ebookwebsite.model.User;
import com.mycompany.ebookwebsite.service.LangChain4jAIChatService;
import com.mycompany.ebookwebsite.utils.Utils;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import jakarta.servlet.http.Part;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.net.URLEncoder;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.List;

@WebServlet("/book/upload")
@MultipartConfig(
    fileSizeThreshold = 1024 * 1024 * 2,  // 2MB
    maxFileSize = 1024 * 1024 * 50,       // 50MB
    maxRequestSize = 1024 * 1024 * 100    // 100MB
)
public class BookUploadServlet extends HttpServlet {

    private EbookDAO ebookDAO;
    private EbookAIDAO ebookAIDAO;
    private LangChain4jAIChatService aiService;
    private static final String UPLOADS_FOLDER = "D:\\EbookWebsite\\uploads";

    @Override
    public void init() throws ServletException {
        ebookDAO = new EbookDAO();
        ebookAIDAO = new EbookAIDAO();
        aiService = new LangChain4jAIChatService();
        
        // T·∫°o th∆∞ m·ª•c uploads n·∫øu ch∆∞a c√≥
        File uploadsDir = new File(UPLOADS_FOLDER);
        if (!uploadsDir.exists()) {
            uploadsDir.mkdirs();
            System.out.println("üìÅ Created uploads directory: " + UPLOADS_FOLDER);
        }
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        // DEBUG: Log incoming request
        System.out.println("üîç BookUploadServlet.doGet() called");
        System.out.println("üîç Request URI: " + request.getRequestURI());
        System.out.println("üîç Context Path: " + request.getContextPath());
        
        // Ki·ªÉm tra ƒëƒÉng nh·∫≠p
        HttpSession session = request.getSession(false);
        System.out.println("üîç Session: " + (session != null ? session.getId() : "NULL"));
        System.out.println("üîç Session isNew: " + (session != null ? session.isNew() : "N/A"));
        
        Object userObj = session != null ? session.getAttribute("user") : null;
        System.out.println("üîç User object: " + (userObj != null ? userObj.getClass().getSimpleName() : "NULL"));
        
        if (session == null || session.getAttribute("user") == null) {
            System.out.println("‚ùå Authentication failed - redirecting to login");
            System.out.println("‚ùå Redirect URL: " + request.getContextPath() + "/user/login.jsp");
            response.sendRedirect(request.getContextPath() + "/user/login.jsp");
            return;
        }

        System.out.println("‚úÖ Authentication successful - USING ENHANCED DIRECT HTML OUTPUT");
        
        // Enhanced direct HTML output with title input
        response.setContentType("text/html; charset=UTF-8");
        java.io.PrintWriter out = response.getWriter();
        
        User user = (User) session.getAttribute("user");
        
        out.println("<!DOCTYPE html>");
        out.println("<html lang='vi'>");
        out.println("<head>");
        out.println("<meta charset='UTF-8'>");
        out.println("<title>üöÄ Upload s√°ch v·ªõi AI</title>");
        out.println("<style>");
        out.println("body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; }");
        out.println(".container { max-width: 900px; margin: 0 auto; padding: 20px; }");
        out.println(".header { background: rgba(255,255,255,0.95); padding: 25px; border-radius: 15px; margin-bottom: 30px; box-shadow: 0 8px 32px rgba(0,0,0,0.1); }");
        out.println(".upload-section { background: rgba(255,255,255,0.98); padding: 30px; border-radius: 15px; margin-bottom: 25px; box-shadow: 0 8px 32px rgba(0,0,0,0.1); }");
        out.println(".title-section { background: linear-gradient(135deg, #e8f5e8, #d4edda); padding: 25px; border-radius: 12px; margin-bottom: 25px; border: 2px solid #27ae60; }");
        out.println(".file-zone { border: 3px dashed #3498db; padding: 40px; text-align: center; border-radius: 12px; background: #f8f9fa; margin: 20px 0; transition: all 0.3s ease; }");
        out.println(".file-zone:hover { border-color: #2980b9; background: #e8f4f8; transform: translateY(-2px); }");
        out.println(".btn { background: linear-gradient(135deg, #3498db, #2980b9); color: white; padding: 15px 30px; border: none; border-radius: 8px; cursor: pointer; font-size: 16px; font-weight: 600; transition: all 0.3s ease; margin: 10px; }");
        out.println(".btn:hover { transform: translateY(-2px); box-shadow: 0 8px 25px rgba(52, 152, 219, 0.3); }");
        out.println(".btn-success { background: linear-gradient(135deg, #27ae60, #229954); }");
        out.println(".btn-success:hover { box-shadow: 0 8px 25px rgba(39, 174, 96, 0.3); }");
        out.println(".input-field { width: 100%; padding: 15px; border: 2px solid #27ae60; border-radius: 8px; font-size: 16px; box-sizing: border-box; margin-bottom: 10px; }");
        out.println(".input-field:focus { outline: none; border-color: #2ecc71; box-shadow: 0 0 0 3px rgba(46, 204, 113, 0.1); }");
        out.println(".ai-features { background: linear-gradient(135deg, #f8f9fa, #e9ecef); padding: 25px; border-radius: 12px; margin: 20px 0; }");
        out.println(".feature-list { margin: 0; padding-left: 20px; }");
        out.println(".feature-list li { margin-bottom: 8px; color: #2c3e50; }");
        out.println(".highlight { color: #e74c3c; font-weight: bold; }");
        out.println(".tip-box { background: #fff3cd; border: 1px solid #ffeaa7; color: #856404; padding: 15px; border-radius: 8px; margin: 15px 0; }");
        out.println("</style>");
        out.println("</head>");
        out.println("<body>");
        
        out.println("<div class='container'>");
        
        out.println("<div class='header'>");
        out.println("<h1 style='color: #2c3e50; margin-bottom: 15px; text-align: center;'>üöÄ Upload s√°ch v·ªõi AI - Enhanced</h1>");
        out.println("<p style='text-align: center; color: #7f8c8d; font-size: 18px;'>Nh·∫≠p t√™n s√°ch v√† upload file ƒë·ªÉ AI t·ª± ƒë·ªông x·ª≠ l√Ω</p>");
        out.println("<div style='text-align: center; margin-top: 15px;'>");
        out.println("<span style='background: #e8f5e8; color: #27ae60; padding: 8px 16px; border-radius: 20px; font-weight: 600;'>üë§ " + user.getUsername() + "</span>");
        out.println("<span style='background: #e3f2fd; color: #1976d2; padding: 8px 16px; border-radius: 20px; font-weight: 600; margin-left: 10px;'>üÜî " + user.getId() + "</span>");
        out.println("</div>");
        out.println("</div>");
        
        out.println("<form method='post' action='" + request.getContextPath() + "/book/upload' enctype='multipart/form-data'>");
        
        // Title section
        out.println("<div class='title-section'>");
        out.println("<h3 style='color: #27ae60; margin-bottom: 15px; display: flex; align-items: center;'>");
        out.println("<span style='font-size: 24px; margin-right: 10px;'>üìù</span> Th√¥ng tin s√°ch");
        out.println("</h3>");
        out.println("<label for='bookTitle' style='display: block; font-weight: bold; margin-bottom: 8px; color: #2c3e50;'>");
        out.println("üè∑Ô∏è T√™n s√°ch c·ªßa b·∫°n:");
        out.println("</label>");
        out.println("<input type='text' id='bookTitle' name='bookTitle' class='input-field' ");
        out.println("placeholder='Nh·∫≠p t√™n s√°ch (VD: Harry Potter v√† H√≤n ƒë√° Ph√π th·ªßy)' required />");
        out.println("<p style='color: #7f8c8d; font-size: 14px; margin: 8px 0 0 0;'>");
        out.println("‚≠ê <strong>Quan tr·ªçng:</strong> T√™n n√†y s·∫Ω ƒë∆∞·ª£c d√πng l√†m ti√™u ƒë·ªÅ ch√≠nh c·ªßa s√°ch, kh√¥ng ph·ª• thu·ªôc v√†o AI extract");
        out.println("</p>");
        out.println("</div>");
        
        // File upload section
        out.println("<div class='upload-section'>");
        out.println("<h3 style='color: #3498db; margin-bottom: 15px; display: flex; align-items: center;'>");
        out.println("<span style='font-size: 24px; margin-right: 10px;'>üìÅ</span> Upload File (T√πy ch·ªçn)");
        out.println("</h3>");
        
        out.println("<div class='file-zone'>");
        out.println("<div style='font-size: 48px; margin-bottom: 20px;'>üìö</div>");
        out.println("<h3 style='color: #2c3e50; margin-bottom: 15px;'>Ch·ªçn file s√°ch c·ªßa b·∫°n</h3>");
        out.println("<p style='color: #7f8c8d; margin-bottom: 20px;'>H·ªó tr·ª£: .txt, .pdf, .docx | T·ªëi ƒëa 50MB</p>");
        out.println("<input type='file' name='bookFile' id='bookFile' accept='.txt,.pdf,.docx' ");
        out.println("style='margin-bottom: 15px;' />");
        out.println("</div>");
        
        out.println("<div class='tip-box'>");
        out.println("<strong>üí° Smart Tip:</strong> N·∫øu kh√¥ng ch·ªçn file, h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t√¨m file ph√π h·ª£p v·ªõi t√™n s√°ch trong th∆∞ vi·ªán uploads");
        out.println("</div>");
        
        out.println("<div style='text-align: center; margin-top: 25px;'>");
        out.println("<button type='submit' class='btn btn-success' style='font-size: 18px; padding: 18px 40px;'>");
        out.println("üöÄ T·∫°o s√°ch v·ªõi AI");
        out.println("</button>");
        out.println("</div>");
        out.println("</div>");
        
        out.println("</form>");
        
        // AI features section
        out.println("<div class='ai-features'>");
        out.println("<h3 style='color: #2c3e50; margin-bottom: 20px; display: flex; align-items: center;'>");
        out.println("<span style='font-size: 24px; margin-right: 10px;'>ü§ñ</span> AI s·∫Ω t·ª± ƒë·ªông x·ª≠ l√Ω:");
        out.println("</h3>");
        out.println("<ul class='feature-list'>");
        out.println("<li>‚úÖ S·ª≠ d·ª•ng <span class='highlight'>t√™n b·∫°n nh·∫≠p</span> l√†m ti√™u ƒë·ªÅ ch√≠nh</li>");
        out.println("<li>‚úÖ T√¨m file ph√π h·ª£p d·ª±a tr√™n t√™n s√°ch (n·∫øu kh√¥ng upload)</li>");
        out.println("<li>‚úÖ Ki·ªÉm duy·ªát n·ªôi dung an to√†n</li>");
        out.println("<li>‚úÖ Ph√¢n lo·∫°i th·ªÉ lo·∫°i ch√≠nh x√°c</li>");
        out.println("<li>‚úÖ Vi·∫øt m√¥ t·∫£ h·∫•p d·∫´n</li>");
        out.println("<li>‚úÖ T·∫°o t√≥m t·∫Øt th√¥ng minh</li>");
        out.println("<li>‚úÖ T·ª± ƒë·ªông t·∫°o EbookAI record</li>");
        out.println("<li>‚úÖ ƒê∆∞a s√°ch l√™n k·ªá n·∫øu ki·ªÉm duy·ªát qua</li>");
        out.println("</ul>");
        out.println("</div>");
        
        out.println("<div style='background: rgba(255,255,255,0.9); padding: 20px; border-radius: 12px; margin: 20px 0; text-align: center;'>");
        out.println("<h4 style='color: #2c3e50; margin-bottom: 15px;'>üéØ Hai c√°ch s·ª≠ d·ª•ng:</h4>");
        out.println("<div style='display: flex; gap: 20px; justify-content: space-around; flex-wrap: wrap;'>");
        out.println("<div style='flex: 1; min-width: 300px; background: #e8f5e8; padding: 20px; border-radius: 8px; margin: 10px;'>");
        out.println("<h5 style='color: #27ae60;'>üìù Option 1: Ch·ªâ nh·∫≠p t√™n</h5>");
        out.println("<p>Nh·∫≠p t√™n s√°ch ‚Üí H·ªá th·ªëng t·ª± t√¨m file ph√π h·ª£p ‚Üí T·∫°o s√°ch</p>");
        out.println("</div>");
        out.println("<div style='flex: 1; min-width: 300px; background: #e3f2fd; padding: 20px; border-radius: 8px; margin: 10px;'>");
        out.println("<h5 style='color: #1976d2;'>üìÅ Option 2: Nh·∫≠p t√™n + Upload</h5>");
        out.println("<p>Nh·∫≠p t√™n s√°ch + Upload file ‚Üí AI x·ª≠ l√Ω ‚Üí T·∫°o s√°ch v·ªõi t√™n b·∫°n nh·∫≠p</p>");
        out.println("</div>");
        out.println("</div>");
        out.println("</div>");
        
        out.println("</div>");
        out.println("</body>");
        out.println("</html>");
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        // Ki·ªÉm tra ƒëƒÉng nh·∫≠p
        HttpSession session = request.getSession(false);
        if (session == null || session.getAttribute("user") == null) {
            response.sendRedirect(request.getContextPath() + "/user/login.jsp");
            return;
        }

        User user = (User) session.getAttribute("user");

        try {
            // L·∫•y t√™n s√°ch t·ª´ form
            String bookTitle = request.getParameter("bookTitle");
            if (bookTitle == null || bookTitle.trim().isEmpty()) {
                sendErrorResponse(response, "Vui l√≤ng nh·∫≠p t√™n s√°ch");
                return;
            }
            bookTitle = bookTitle.trim();
            
            // X·ª≠ l√Ω file upload
            Part filePart = request.getPart("bookFile");
            
            if (filePart == null || filePart.getSize() == 0) {
                // Kh√¥ng c√≥ file upload - t√¨m file d·ª±a tr√™n t√™n s√°ch
                handleSmartFileSearch(request, response, user, bookTitle);
            } else {
                // C√≥ file upload - x·ª≠ l√Ω v·ªõi t√™n s√°ch l√†m title
                handleFileUploadWithTitle(request, response, user, filePart, bookTitle);
            }

        } catch (Exception e) {
            e.printStackTrace();
            sendErrorResponse(response, "C√≥ l·ªói h·ªá th·ªëng: " + e.getMessage());
        }
    }

    private void handleMetadataOnlyUpload(HttpServletRequest request, HttpServletResponse response, User user)
            throws ServletException, IOException, SQLException {
        
            // L·∫•y th√¥ng tin t·ª´ form
            String title = request.getParameter("title");
            String description = request.getParameter("description");
            String releaseType = request.getParameter("releaseType");
            String language = request.getParameter("language");
            String status = request.getParameter("status");
            String visibility = request.getParameter("visibility");

            // Validate c∆° b·∫£n
            if (title == null || title.trim().isEmpty()) {
                request.setAttribute("error", "Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
                request.getRequestDispatcher("/book/bookForm.jsp").forward(request, response);
                return;
            }

            // T·∫°o Ebook object
            Ebook ebook = new Ebook();
            ebook.setTitle(title.trim());
            ebook.setDescription(description != null ? description.trim() : "");
            ebook.setReleaseType(releaseType != null ? releaseType.trim() : "Kh√°c");
            ebook.setLanguage(language != null ? language.trim() : "Ti·∫øng Vi·ªát");
            ebook.setStatus(status != null ? status.trim() : "ƒêang ra");
            ebook.setVisibility(visibility != null ? visibility.trim() : "public");
            ebook.setUploaderId(user.getId());
            ebook.setViewCount(0);
            ebook.setCreatedAt(LocalDateTime.now());

            // L∆∞u v√†o database
            ebookDAO.insertEbook(ebook);

        // Redirect v·ªÅ trang ch√≠nh v·ªõi th√¥ng b√°o th√†nh c√¥ng
        response.sendRedirect(request.getContextPath() + "/?success=book_created&bookTitle=" + java.net.URLEncoder.encode(title, "UTF-8"));
    }

    private void handleFileUpload(HttpServletRequest request, HttpServletResponse response, User user, Part filePart)
            throws ServletException, IOException, SQLException {
        
        String fileName = getFileName(filePart);
        if (fileName == null || fileName.trim().isEmpty()) {
            request.setAttribute("error", "T√™n file kh√¥ng h·ª£p l·ªá");
            request.getRequestDispatcher("/book/bookForm.jsp").forward(request, response);
            return;
        }

        // Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
        if (!isSupportedExtension(fileName)) {
            request.setAttribute("error", "ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Ch·ªâ h·ªó tr·ª£: .txt, .pdf, .docx");
            request.getRequestDispatcher("/book/bookForm.jsp").forward(request, response);
            return;
        }

        // L∆∞u file v√†o uploads
        File uploadedFile = saveUploadedFile(filePart, fileName);
        if (uploadedFile == null) {
            request.setAttribute("error", "Kh√¥ng th·ªÉ l∆∞u file");
            request.getRequestDispatcher("/book/bookForm.jsp").forward(request, response);
            return;
        }

        // ƒê·ªçc n·ªôi dung file
        String content = readFileContent(uploadedFile);
        if (content == null) {
            // X√≥a file n·∫øu kh√¥ng ƒë·ªçc ƒë∆∞·ª£c
            uploadedFile.delete();
            request.setAttribute("error", "Kh√¥ng th·ªÉ ƒë·ªçc n·ªôi dung file");
            request.getRequestDispatcher("/book/bookForm.jsp").forward(request, response);
            return;
        }

        // AI ki·ªÉm duy·ªát n·ªôi dung - QUAN TR·ªåNG!
        String moderationResult = performContentModeration(content);
        if (moderationResult != null && moderationResult.contains("REJECT")) {
            // X√≥a file n·∫øu kh√¥ng h·ª£p l·ªá
            uploadedFile.delete();
            request.setAttribute("error", "N·ªôi dung kh√¥ng h·ª£p l·ªá: " + moderationResult);
            request.getRequestDispatcher("/book/bookForm.jsp").forward(request, response);
            return;
        }

        // AI tr√≠ch xu·∫•t metadata
        BookMetadata metadata = extractMetadata(content, fileName);
        if (metadata == null) {
            // X√≥a file n·∫øu kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c metadata
            uploadedFile.delete();
            request.setAttribute("error", "Kh√¥ng th·ªÉ tr√≠ch xu·∫•t th√¥ng tin s√°ch");
            request.getRequestDispatcher("/book/bookForm.jsp").forward(request, response);
            return;
        }

        // L∆∞u v√†o database v√† l√™n k·ªá
        try {
            int createdBookId = saveToDatabase(uploadedFile, metadata, user);
            
            // Redirect v·ªÅ trang ch√≠nh v·ªõi th√¥ng b√°o th√†nh c√¥ng
            String redirectUrl = String.format("%s/?success=ai_upload_completed&bookTitle=%s", 
                request.getContextPath(), java.net.URLEncoder.encode(metadata.title, "UTF-8"));
            response.sendRedirect(redirectUrl);
            
        } catch (Exception e) {
            // X√≥a file n·∫øu l∆∞u database th·∫•t b·∫°i
            uploadedFile.delete();
            request.setAttribute("error", "L·ªói l∆∞u database: " + e.getMessage());
            request.getRequestDispatcher("/book/bookForm.jsp").forward(request, response);
        }
    }

    private String getFileName(Part part) {
        String contentDisp = part.getHeader("content-disposition");
        System.out.println("Content-Disposition header: " + contentDisp);
        
        if (contentDisp != null) {
            String[] tokens = contentDisp.split(";");
            for (String token : tokens) {
                if (token.trim().startsWith("filename")) {
                    return token.substring(token.indexOf('=') + 1).trim()
                            .replace("\"", "");
                }
            }
        }
        return null;
    }

    private boolean isSupportedExtension(String fileName) {
        String name = fileName.toLowerCase();
        return name.endsWith(".txt") || name.endsWith(".pdf") || name.endsWith(".docx");
    }

    private File saveUploadedFile(Part filePart, String fileName) throws IOException {
        Path uploadPath = Paths.get(UPLOADS_FOLDER, fileName);
        
        try (InputStream inputStream = filePart.getInputStream()) {
            Files.copy(inputStream, uploadPath, StandardCopyOption.REPLACE_EXISTING);
            System.out.println("‚úÖ File saved: " + uploadPath.toString());
            return uploadPath.toFile();
        } catch (IOException e) {
            System.err.println("‚ùå Error saving file: " + e.getMessage());
            return null;
        }
    }

    private String readFileContent(File file) {
        try {
            String ext = getFileExtension(file.getName());
            String content = Utils.readAnyTextFile(file.getAbsolutePath(), ext);
            
            if (content == null || content.trim().isEmpty()) {
                System.err.println("‚ùå File content is empty");
                return null;
            }
            
            System.out.println("‚úÖ File content read: " + content.length() + " characters");
            return content;
            
        } catch (Exception e) {
            System.err.println("‚ùå Error reading file: " + e.getMessage());
            return null;
        }
    }

    private String performContentModeration(String content) {
        try {
            System.out.println("üîç ƒêang ki·ªÉm duy·ªát n·ªôi dung...");
            
            String moderationPrompt = "H√£y ki·ªÉm duy·ªát n·ªôi dung s√°ch sau m·ªôt c√°ch nghi√™m ng·∫∑t. " +
                "N·∫øu c√≥ n·ªôi dung vi ph·∫°m (b·∫°o l·ª±c, sex, th√π gh√©t, vi ph·∫°m ph√°p lu·∫≠t, spam, v.v.), " +
                "tr·∫£ v·ªÅ 'REJECT: [l√Ω do c·ª• th·ªÉ]'. " +
                "N·∫øu n·ªôi dung an to√†n v√† ph√π h·ª£p, tr·∫£ v·ªÅ 'ACCEPT: N·ªôi dung h·ª£p l·ªá'.\n\n" +
                "N·ªôi dung c·∫ßn ki·ªÉm duy·ªát: " + content.substring(0, Math.min(2000, content.length()));
            
            String aiResult = aiService.processChat(0, "content-moderation", moderationPrompt, null);
            System.out.println("ü§ñ K·∫øt qu·∫£ ki·ªÉm duy·ªát: " + aiResult);
            
            return aiResult;
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói ki·ªÉm duy·ªát AI: " + e.getMessage());
            return "REJECT: L·ªói h·ªá th·ªëng ki·ªÉm duy·ªát";
        }
    }

    private boolean checkContentModeration(String content) {
        String result = performContentModeration(content);
        return result != null && result.trim().toUpperCase().contains("ACCEPT");
    }

    private BookMetadata extractMetadata(String content, String fileName) {
        try {
            String metadataPrompt = "H√£y ph√¢n t√≠ch n·ªôi dung s√°ch sau v√† tr·∫£ v·ªÅ metadata theo format JSON:\n" +
                "{\n" +
                "  \"title\": \"Ti√™u ƒë·ªÅ s√°ch\",\n" +
                "  \"genre\": \"Th·ªÉ lo·∫°i (ti·ªÉu thuy·∫øt, khoa h·ªçc vi·ªÖn t∆∞·ªüng, fantasy, v.v.)\",\n" +
                "  \"description\": \"M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ s√°ch (2-3 c√¢u)\",\n" +
                "  \"summary\": \"T√≥m t·∫Øt n·ªôi dung ch√≠nh (5-7 c√¢u)\"\n" +
                "}\n" +
                "N·ªôi dung: " + content.substring(0, Math.min(3000, content.length()));
            
            String aiResult = aiService.processChat(0, "metadata-extraction", metadataPrompt, null);
            System.out.println("ü§ñ AI Metadata result: " + aiResult);
            
            return parseMetadataFromAI(aiResult, fileName);
            
        } catch (Exception e) {
            System.err.println("‚ùå AI metadata extraction error: " + e.getMessage());
            return createDefaultMetadata(fileName);
        }
    }

    private BookMetadata parseMetadataFromAI(String aiResult, String fileName) {
        BookMetadata metadata = new BookMetadata();
        
        // Extract title - FIX: Correct offset calculation
        if (aiResult.contains("\"title\":")) {
            int start = aiResult.indexOf("\"title\":") + 8;
            start = aiResult.indexOf("\"", start) + 1; // Skip opening quote
            int end = aiResult.indexOf("\"", start);
            if (end > start) {
                metadata.title = aiResult.substring(start, end).trim();
            }
        }
        
        // Extract genre - FIX: Correct offset calculation  
        if (aiResult.contains("\"genre\":")) {
            int start = aiResult.indexOf("\"genre\":") + 8;
            start = aiResult.indexOf("\"", start) + 1; // Skip opening quote
            int end = aiResult.indexOf("\"", start);
            if (end > start) {
                metadata.genre = aiResult.substring(start, end).trim();
            }
        }
        
        // Extract description - FIX: Correct offset calculation
        if (aiResult.contains("\"description\":")) {
            int start = aiResult.indexOf("\"description\":") + 14;
            start = aiResult.indexOf("\"", start) + 1; // Skip opening quote
            int end = aiResult.indexOf("\"", start);
            if (end > start) {
                metadata.description = aiResult.substring(start, end).trim();
            }
        }
        
        // Extract summary - FIX: Correct offset calculation
        if (aiResult.contains("\"summary\":")) {
            int start = aiResult.indexOf("\"summary\":") + 10;
            start = aiResult.indexOf("\"", start) + 1; // Skip opening quote
            int end = aiResult.indexOf("\"", start);
            if (end > start) {
                metadata.summary = aiResult.substring(start, end).trim();
            }
        }
        
        // Set defaults if parsing failed
        if (metadata.title == null || metadata.title.isEmpty()) {
            metadata.title = fileName.replaceFirst("[.][^.]+$", ""); // Remove extension
        }
        if (metadata.genre == null || metadata.genre.isEmpty()) {
            metadata.genre = "Ti·ªÉu thuy·∫øt";
        }
        if (metadata.description == null || metadata.description.isEmpty()) {
            metadata.description = "S√°ch ƒë∆∞·ª£c upload t·ª± ƒë·ªông";
        }
        if (metadata.summary == null || metadata.summary.isEmpty()) {
            metadata.summary = "N·ªôi dung s√°ch ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω";
        }
        
        return metadata;
    }

    private BookMetadata createDefaultMetadata(String fileName) {
        BookMetadata metadata = new BookMetadata();
        metadata.title = fileName.replaceFirst("[.][^.]+$", "");
        metadata.genre = "Ti·ªÉu thuy·∫øt";
        metadata.description = "S√°ch ƒë∆∞·ª£c upload t·ª± ƒë·ªông";
        metadata.summary = "N·ªôi dung s√°ch ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω";
        return metadata;
    }

    private int saveToDatabase(File uploadedFile, BookMetadata metadata, User user) throws SQLException {
        try {
            // T·∫°o Ebook record
            Ebook ebook = new Ebook();
            ebook.setTitle(metadata.title);
            ebook.setDescription(metadata.description);
            ebook.setReleaseType(metadata.genre);
            ebook.setLanguage("Ti·∫øng Vi·ªát");
            ebook.setStatus("active"); // L√™n k·ªá ngay sau khi ki·ªÉm duy·ªát qua
            ebook.setVisibility("public"); // Hi·ªÉn th·ªã c√¥ng khai
            ebook.setUploaderId(user.getId());
            ebook.setViewCount(0);
            ebook.setCreatedAt(LocalDateTime.now());

            // Insert Ebook and get generated ID
            ebookDAO.insertEbook(ebook);
            
            // Get the inserted ebook to retrieve the ID
            List<Ebook> books = ebookDAO.selectAllEbooks();
            Ebook insertedBook = books.get(books.size() - 1); // Get the last inserted book
            int ebookId = insertedBook.getId();
            
            System.out.println("‚úÖ Ebook inserted with ID: " + ebookId);

            // T·∫°o EbookAI record - T·ª∞ ƒê·ªòNG T·∫†O!
            EbookAI ebookAI = new EbookAI();
            ebookAI.setEbookId(ebookId);
            ebookAI.setFileName(uploadedFile.getName());
            ebookAI.setOriginalFileName(uploadedFile.getName());
            ebookAI.setSummary(metadata.summary);
            ebookAI.setStatus("completed");
            ebookAI.setCreatedAt(LocalDateTime.now());
            ebookAI.setUpdatedAt(LocalDateTime.now());

            // Insert EbookAI
            ebookAIDAO.insertEbookAI(ebookAI);
            
            System.out.println("‚úÖ EbookAI record created successfully");
            System.out.println("üéâ S√ÅCH ƒê√É ƒê∆Ø·ª¢C L√äN K·ªÜ TH√ÄNH C√îNG!");
            System.out.println("üìä Database Summary:");
            System.out.println("   üìö Ebook ID: " + ebookId);
            System.out.println("   üìù Title: " + metadata.title);
            System.out.println("   üè∑Ô∏è Genre: " + metadata.genre);
            System.out.println("   üìÅ File: " + uploadedFile.getName());
            System.out.println("   üìè Size: " + formatFileSize(uploadedFile.length()));
            System.out.println("   üìç Path: uploads/" + uploadedFile.getName());
            System.out.println("   ü§ñ AI Summary: " + metadata.summary.substring(0, Math.min(100, metadata.summary.length())) + "...");
            System.out.println("   üìä AI Status: completed");
            System.out.println("   üåü Book Status: active (L√äN K·ªÜ)");
            System.out.println("   üëÅÔ∏è Visibility: public");
            
            return ebookId;

        } catch (Exception e) {
            System.err.println("‚ùå Database error: " + e.getMessage());
            throw new SQLException("L·ªói l∆∞u database: " + e.getMessage(), e);
        }
    }

    private String getFileExtension(String fileName) {
        int idx = fileName.lastIndexOf('.');
        return (idx > 0) ? fileName.substring(idx + 1).toLowerCase() : "";
    }

    private String formatFileSize(long bytes) {
        if (bytes < 1024) return bytes + " B";
        int exp = (int) (Math.log(bytes) / Math.log(1024));
        String pre = "KMGTPE".charAt(exp - 1) + "";
        return String.format("%.1f %sB", bytes / Math.pow(1024, exp), pre);
    }

    // ============== NEW METHODS FOR SMART BOOK TITLE HANDLING ==============
    
    private void sendErrorResponse(HttpServletResponse response, String errorMessage) throws IOException {
        response.setContentType("text/html;charset=UTF-8");
        PrintWriter out = response.getWriter();
        
        out.println("<!DOCTYPE html>");
        out.println("<html><head><meta charset='UTF-8'>");
        out.println("<title>L·ªói Upload</title>");
        out.println("<style>body{font-family:Arial;margin:40px;background:#ffe6e6;}");
        out.println(".error{background:#f8d7da;color:#721c24;padding:20px;border-radius:8px;border:1px solid #f5c6cb;}</style>");
        out.println("</head><body>");
        out.println("<div class='error'>");
        out.println("<h2>‚ùå C√≥ l·ªói x·∫£y ra</h2>");
        out.println("<p>" + errorMessage + "</p>");
        out.println("<a href='javascript:history.back()' style='color:#007bff;'>‚Üê Quay l·∫°i</a>");
        out.println("</div></body></html>");
    }

    private void handleSmartFileSearch(HttpServletRequest request, HttpServletResponse response, User user, String bookTitle) 
            throws ServletException, IOException, SQLException {
        
        System.out.println("üîç ƒêang t√¨m file cho s√°ch: " + bookTitle);
        
        // T√¨m file ph√π h·ª£p trong uploads folder
        File matchingFile = findMatchingFile(bookTitle);
        
        if (matchingFile == null) {
            sendErrorResponse(response, "Kh√¥ng t√¨m th·∫•y file ph√π h·ª£p v·ªõi t√™n s√°ch '" + bookTitle + "' trong th∆∞ vi·ªán uploads. Vui l√≤ng upload file ho·∫∑c ki·ªÉm tra l·∫°i t√™n s√°ch.");
            return;
        }
        
        System.out.println("‚úÖ T√¨m th·∫•y file ph√π h·ª£p: " + matchingFile.getName());
        
        // ƒê·ªçc n·ªôi dung file
        String content = readFileContent(matchingFile);
        if (content == null) {
            sendErrorResponse(response, "Kh√¥ng th·ªÉ ƒë·ªçc n·ªôi dung file: " + matchingFile.getName());
            return;
        }

        // AI ki·ªÉm duy·ªát n·ªôi dung
        String moderationResult = performContentModeration(content);
        if (moderationResult != null && moderationResult.contains("REJECT")) {
            sendErrorResponse(response, "N·ªôi dung kh√¥ng h·ª£p l·ªá: " + moderationResult);
            return;
        }

        // AI tr√≠ch xu·∫•t metadata - nh∆∞ng s·∫Ω override title
        BookMetadata metadata = extractMetadata(content, matchingFile.getName());
        if (metadata == null) {
            sendErrorResponse(response, "Kh√¥ng th·ªÉ tr√≠ch xu·∫•t th√¥ng tin s√°ch t·ª´ file: " + matchingFile.getName());
            return;
        }
        
        // QUAN TR·ªåNG: Override title v·ªõi t√™n ng∆∞·ªùi d√πng nh·∫≠p
        metadata.title = bookTitle;
        
        // L∆∞u v√†o database
        try {
            int createdBookId = saveToDatabase(matchingFile, metadata, user);
            
            // Redirect v·ªÅ trang ch√≠nh v·ªõi th√¥ng b√°o th√†nh c√¥ng
            String redirectUrl = String.format("%s/?success=smart_upload_completed&bookTitle=%s&originalFile=%s", 
                request.getContextPath(), java.net.URLEncoder.encode(bookTitle, "UTF-8"), matchingFile.getName());
            response.sendRedirect(redirectUrl);
            
        } catch (Exception e) {
            sendErrorResponse(response, "L·ªói l∆∞u database: " + e.getMessage());
        }
    }

    private void handleFileUploadWithTitle(HttpServletRequest request, HttpServletResponse response, User user, Part filePart, String bookTitle) 
            throws ServletException, IOException, SQLException {
        
        System.out.println("üìö ƒêang x·ª≠ l√Ω upload v·ªõi title: " + bookTitle);
        
        String fileName = getFileName(filePart);
        if (fileName == null || fileName.trim().isEmpty()) {
            sendErrorResponse(response, "T√™n file kh√¥ng h·ª£p l·ªá");
            return;
        }

        // Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
        if (!isSupportedExtension(fileName)) {
            sendErrorResponse(response, "ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Ch·ªâ h·ªó tr·ª£: .txt, .pdf, .docx");
            return;
        }

        // L∆∞u file v√†o uploads
        File uploadedFile = saveUploadedFile(filePart, fileName);
        if (uploadedFile == null) {
            sendErrorResponse(response, "Kh√¥ng th·ªÉ l∆∞u file");
            return;
        }

        // ƒê·ªçc n·ªôi dung file
        String content = readFileContent(uploadedFile);
        if (content == null) {
            uploadedFile.delete();
            sendErrorResponse(response, "Kh√¥ng th·ªÉ ƒë·ªçc n·ªôi dung file");
            return;
        }

        // AI ki·ªÉm duy·ªát n·ªôi dung
        String moderationResult = performContentModeration(content);
        if (moderationResult != null && moderationResult.contains("REJECT")) {
            uploadedFile.delete();
            sendErrorResponse(response, "N·ªôi dung kh√¥ng h·ª£p l·ªá: " + moderationResult);
            return;
        }

        // AI tr√≠ch xu·∫•t metadata
        BookMetadata metadata = extractMetadata(content, fileName);
        if (metadata == null) {
            uploadedFile.delete();
            sendErrorResponse(response, "Kh√¥ng th·ªÉ tr√≠ch xu·∫•t th√¥ng tin s√°ch");
            return;
        }
        
        // QUAN TR·ªåNG: Override title v·ªõi t√™n ng∆∞·ªùi d√πng nh·∫≠p
        metadata.title = bookTitle;
        
        // L∆∞u v√†o database
        try {
            int createdBookId = saveToDatabase(uploadedFile, metadata, user);
            
            // Redirect v·ªÅ trang ch√≠nh v·ªõi th√¥ng b√°o th√†nh c√¥ng
            String redirectUrl = String.format("%s/?success=title_override_upload_completed&bookTitle=%s", 
                request.getContextPath(), java.net.URLEncoder.encode(bookTitle, "UTF-8"));
            response.sendRedirect(redirectUrl);
            
        } catch (Exception e) {
            uploadedFile.delete();
            sendErrorResponse(response, "L·ªói l∆∞u database: " + e.getMessage());
        }
    }

    private File findMatchingFile(String bookTitle) {
        File uploadsDir = new File(UPLOADS_FOLDER);
        if (!uploadsDir.exists() || !uploadsDir.isDirectory()) {
            System.err.println("‚ùå Uploads directory not found: " + UPLOADS_FOLDER);
            return null;
        }
        
        File[] files = uploadsDir.listFiles((dir, name) -> {
            String lowerName = name.toLowerCase();
            return lowerName.endsWith(".txt") || lowerName.endsWith(".pdf") || lowerName.endsWith(".docx");
        });
        
        if (files == null || files.length == 0) {
            System.out.println("üìÅ Kh√¥ng c√≥ file n√†o trong uploads folder");
            return null;
        }
        
        String normalizedTitle = normalizeTitle(bookTitle);
        File bestMatch = null;
        double bestSimilarity = 0.0;
        
        System.out.println("üîç T√¨m ki·∫øm file cho: '" + normalizedTitle + "'");
        System.out.println("üìÅ Ki·ªÉm tra " + files.length + " files trong uploads:");
        
        for (File file : files) {
            String fileName = file.getName();
            // Remove extension for comparison
            String fileNameWithoutExt = fileName.replaceFirst("[.][^.]+$", "");
            String normalizedFileName = normalizeTitle(fileNameWithoutExt);
            
            // Calculate similarity
            double similarity = calculateStringSimilarity(normalizedTitle, normalizedFileName);
            
            System.out.println("   üìÑ " + fileName + " ‚Üí Similarity: " + String.format("%.2f", similarity));
            
            // Exact match or very high similarity
            if (similarity > 0.8 || normalizedFileName.contains(normalizedTitle) || normalizedTitle.contains(normalizedFileName)) {
                if (similarity > bestSimilarity) {
                    bestSimilarity = similarity;
                    bestMatch = file;
                }
            }
        }
        
        if (bestMatch != null) {
            System.out.println("‚úÖ Best match found: " + bestMatch.getName() + " (similarity: " + String.format("%.2f", bestSimilarity) + ")");
        } else {
            System.out.println("‚ùå No suitable match found for: " + bookTitle);
        }
        
        return bestMatch;
    }
    
    private String normalizeTitle(String title) {
        return title.toLowerCase()
                .replaceAll("[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ]", "a")
                .replaceAll("[√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ]", "e")
                .replaceAll("[√¨√≠·ªã·ªâƒ©]", "i")
                .replaceAll("[√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°]", "o")
                .replaceAll("[√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ]", "u")
                .replaceAll("[·ª≥√Ω·ªµ·ª∑·ªπ]", "y")
                .replaceAll("[ƒë]", "d")
                .replaceAll("[^a-z0-9\\s]", "")
                .replaceAll("\\s+", " ")
                .trim();
    }
    
    private double calculateStringSimilarity(String s1, String s2) {
        if (s1.equals(s2)) return 1.0;
        
        int longer = Math.max(s1.length(), s2.length());
        if (longer == 0) return 1.0;
        
        return (longer - levenshteinDistance(s1, s2)) / (double) longer;
    }
    
    private int levenshteinDistance(String s1, String s2) {
        int[][] dp = new int[s1.length() + 1][s2.length() + 1];
        
        for (int i = 0; i <= s1.length(); i++) dp[i][0] = i;
        for (int j = 0; j <= s2.length(); j++) dp[0][j] = j;
        
        for (int i = 1; i <= s1.length(); i++) {
            for (int j = 1; j <= s2.length(); j++) {
                int cost = (s1.charAt(i-1) == s2.charAt(j-1)) ? 0 : 1;
                dp[i][j] = Math.min(Math.min(dp[i-1][j] + 1, dp[i][j-1] + 1), dp[i-1][j-1] + cost);
            }
        }
        
        return dp[s1.length()][s2.length()];
    }

    // Inner class ƒë·ªÉ hold metadata
    static class BookMetadata {
        String title;
        String genre;
        String description;
        String summary;
    }
} 