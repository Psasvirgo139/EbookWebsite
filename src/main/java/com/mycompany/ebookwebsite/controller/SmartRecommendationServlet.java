package com.mycompany.ebookwebsite.controller;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import com.mycompany.ebookwebsite.dao.EbookDAO;
import com.mycompany.ebookwebsite.model.Ebook;
import com.mycompany.ebookwebsite.model.User;
import com.mycompany.ebookwebsite.service.InternalAIChatService;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

@WebServlet(name = "SmartRecommendationServlet", urlPatterns = {"/ai/smart-recommendations"})
public class SmartRecommendationServlet extends HttpServlet {
    
    private InternalAIChatService aiChatService;
    private EbookDAO ebookDAO;
    
    @Override
    public void init() throws ServletException {
        try {
            aiChatService = new InternalAIChatService();
            ebookDAO = new EbookDAO();
            System.out.println("‚úÖ SmartRecommendationServlet initialized with Real OpenAI and EbookDAO");
        } catch (Exception e) {
            System.err.println("‚ùå Failed to initialize Smart Recommendation service: " + e.getMessage());
            throw new ServletException("Failed to initialize AI services", e);
        }
    }
    
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        // Check authentication
        HttpSession session = request.getSession(false);
        if (session == null || session.getAttribute("user") == null) {
            response.sendRedirect(request.getContextPath() + "/user/login.jsp");
            return;
        }
        
        // Show recommendations page
        try {
            showRecommendationsPage(request, response);
        } catch (Exception e) {
            e.printStackTrace();
            request.setAttribute("error", "C√≥ l·ªói x·∫£y ra: " + e.getMessage());
            request.getRequestDispatcher("/ai/smart-recommendations.jsp").forward(request, response);
        }
    }
    
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        // Handle API requests
        handleAPIRequest(request, response);
    }
    
    /**
     * Hi·ªÉn th·ªã trang recommendations v·ªõi d·ªØ li·ªáu ban ƒë·∫ßu
     */
    private void showRecommendationsPage(HttpServletRequest request, HttpServletResponse response)
            throws Exception {
        
        User currentUser = (User) request.getSession().getAttribute("user");
        
        // L·∫•y m·ªôt s·ªë s√°ch ph·ªï bi·∫øn t·ª´ database
        List<Ebook> allBooks = ebookDAO.selectEbooksByVisibility("public");
        List<Ebook> latestBooks = allBooks.size() > 6 ? allBooks.subList(0, 6) : allBooks;
        
        // L·∫•y th·ªëng k√™
        int totalBooks = allBooks.size();
        
        // L·∫•y danh s√°ch th·ªÉ lo·∫°i c√≥ s·∫µn
        List<String> availableGenres = getAvailableGenres();
        
        // Chu·∫©n b·ªã d·ªØ li·ªáu cho JSP
        request.setAttribute("userName", currentUser.getUsername());
        request.setAttribute("latestBooks", latestBooks);
        request.setAttribute("totalBooks", totalBooks);
        request.setAttribute("availableGenres", availableGenres);
        
        request.getRequestDispatcher("/ai/smart-recommendations.jsp").forward(request, response);
    }
    
    /**
     * X·ª≠ l√Ω API requests cho smart recommendations
     */
    private void handleAPIRequest(HttpServletRequest request, HttpServletResponse response)
            throws IOException {
        
        System.out.println("üî• SmartRecommendationServlet - handleAPIRequest called!");
        
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");
        
        HttpSession session = request.getSession(false);
        if (session == null || session.getAttribute("user") == null) {
            System.out.println("‚ùå User not logged in - session: " + session);
            try (PrintWriter out = response.getWriter()) {
                out.write("{\"success\": false, \"error\": \"B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y\"}");
            }
            return;
        }
        
        try (PrintWriter out = response.getWriter()) {
            User currentUser = (User) session.getAttribute("user");
            
            // L·∫•y filter parameters
            String genre = request.getParameter("genre");
            String mood = request.getParameter("mood");
            String length = request.getParameter("length");
            String complexity = request.getParameter("complexity");
            
            System.out.println("üéØ Smart Recommendation Request - Genre: " + genre + ", Mood: " + mood + 
                               ", Length: " + length + ", Complexity: " + complexity);
            
            // L·∫•y t·∫•t c·∫£ s√°ch public t·ª´ database
            List<Ebook> allBooks = ebookDAO.selectEbooksByVisibility("public");
            System.out.println("üìö Found " + allBooks.size() + " books in database");
            
            // Apply filters
            List<Ebook> filteredBooks = applyFilters(allBooks, genre, mood, length, complexity);
            System.out.println("üîç After filtering: " + filteredBooks.size() + " books remain");
            
            // Generate AI recommendations
            String aiRecommendations = generateAIRecommendations(filteredBooks, genre, mood, length, complexity);
            
            // Log recommendation
            System.out.println("[Smart AI Recommendation] User: " + currentUser.getUsername() + 
                              " | Found " + filteredBooks.size() + " books | AI Response length: " + aiRecommendations.length());
            
            String jsonResponse = String.format(
                "{\"success\": true, \"recommendations\": \"%s\", \"totalFound\": %d, \"timestamp\": %d}",
                escapeJson(aiRecommendations),
                filteredBooks.size(),
                System.currentTimeMillis()
            );
            
            out.write(jsonResponse);
            
        } catch (Exception e) {
            e.printStackTrace();
            try (PrintWriter out = response.getWriter()) {
                String errorMsg = "C√≥ l·ªói x·∫£y ra khi t·∫°o ƒë·ªÅ xu·∫•t th√¥ng minh: " + e.getMessage();
                out.write("{\"success\": false, \"error\": \"" + escapeJson(errorMsg) + "\"}");
            }
        }
    }
    
    /**
     * üìä Get available genres from database
     */
    private List<String> getAvailableGenres() throws Exception {
        List<Ebook> allBooks = ebookDAO.selectEbooksByVisibility("public");
        return allBooks.stream()
            .map(Ebook::getReleaseType)
            .filter(genre -> genre != null && !genre.trim().isEmpty())
            .distinct()
            .sorted()
            .collect(Collectors.toList());
    }
    
    /**
     * üîß Apply filters to book list
     */
    private List<Ebook> applyFilters(List<Ebook> books, String genre, String mood, String length, String complexity) {
        List<Ebook> filtered = new ArrayList<>(books);
        
        // Filter by genre
        if (genre != null && !genre.trim().isEmpty()) {
            filtered = filtered.stream()
                .filter(book -> matchesGenre(book, genre))
                .collect(Collectors.toList());
        }
        
        // Filter by mood
        if (mood != null && !mood.trim().isEmpty()) {
            filtered = filtered.stream()
                .filter(book -> matchesMood(book, mood))
                .collect(Collectors.toList());
        }
        
        // Filter by length
        if (length != null && !length.trim().isEmpty()) {
            filtered = filtered.stream()
                .filter(book -> matchesLength(book, length))
                .collect(Collectors.toList());
        }
        
        // Filter by complexity
        if (complexity != null && !complexity.trim().isEmpty()) {
            filtered = filtered.stream()
                .filter(book -> matchesComplexity(book, complexity))
                .collect(Collectors.toList());
        }
        
        return filtered;
    }
    
    /**
     * üé® Check if book matches genre
     */
    private boolean matchesGenre(Ebook book, String genre) {
        if (book.getReleaseType() == null) return false;
        
        String bookGenre = book.getReleaseType().toLowerCase();
        String targetGenre = genre.toLowerCase();
        
        // Direct match
        if (bookGenre.contains(targetGenre)) {
            return true;
        }
        
        // Genre mapping for better matching
        Map<String, List<String>> genreMap = getGenreMapping();
        if (genreMap.containsKey(targetGenre)) {
            for (String synonym : genreMap.get(targetGenre)) {
                if (bookGenre.contains(synonym)) {
                    return true;
                }
            }
        }
        
        return false;
    }
    
    /**
     * üé≠ Check if book matches mood
     */
    private boolean matchesMood(Ebook book, String mood) {
        if (book.getDescription() == null || book.getReleaseType() == null) return false;
        
        String content = (book.getDescription() + " " + book.getReleaseType()).toLowerCase();
        
        Map<String, List<String>> moodMap = getMoodMapping();
        if (moodMap.containsKey(mood.toLowerCase())) {
            for (String keyword : moodMap.get(mood.toLowerCase())) {
                if (content.contains(keyword)) {
                    return true;
                }
            }
        }
        
        return false;
    }
    
    /**
     * üìè Check if book matches length preference
     */
    private boolean matchesLength(Ebook book, String length) {
        int estimatedLength = estimateBookLength(book);
        
        switch (length.toLowerCase()) {
            case "short":
                return estimatedLength <= 200;
            case "medium":
                return estimatedLength > 200 && estimatedLength <= 500;
            case "long":
                return estimatedLength > 500;
            default:
                return true;
        }
    }
    
    /**
     * üß© Check if book matches complexity preference
     */
    private boolean matchesComplexity(Ebook book, String complexity) {
        int complexityScore = estimateComplexity(book);
        
        switch (complexity.toLowerCase()) {
            case "easy":
                return complexityScore <= 3;
            case "moderate":
                return complexityScore > 3 && complexityScore <= 7;
            case "challenging":
                return complexityScore > 7;
            default:
                return true;
        }
    }
    
    /**
     * ü§ñ Generate AI recommendations based on filtered books
     */
    private String generateAIRecommendations(List<Ebook> filteredBooks, String genre, String mood, String length, String complexity) throws Exception {
        if (filteredBooks.isEmpty()) {
            return "R·∫•t ti·∫øc, kh√¥ng t√¨m th·∫•y s√°ch n√†o ph√π h·ª£p v·ªõi c√°c ti√™u ch√≠ b·∫°n ƒë√£ ch·ªçn. H√£y th·ª≠ ƒëi·ªÅu ch·ªânh b·ªô l·ªçc ƒë·ªÉ c√≥ nhi·ªÅu l·ª±a ch·ªçn h∆°n!";
        }
        
        // Take top 10 books for AI processing
        List<Ebook> topBooks = filteredBooks.stream()
            .sorted((a, b) -> Integer.compare(b.getViewCount(), a.getViewCount()))
            .limit(10)
            .collect(Collectors.toList());
        
        // Build context for AI
        StringBuilder context = new StringBuilder();
        context.append("Danh s√°ch s√°ch ƒë√£ ƒë∆∞·ª£c l·ªçc theo s·ªü th√≠ch c·ªßa ng∆∞·ªùi d√πng:\n");
        
        for (int i = 0; i < topBooks.size(); i++) {
            Ebook book = topBooks.get(i);
            context.append(String.format("%d. %s (Th·ªÉ lo·∫°i: %s, L∆∞·ª£t xem: %d)\n",
                i + 1, book.getTitle(), book.getReleaseType(), book.getViewCount()));
            
            if (book.getDescription() != null && !book.getDescription().trim().isEmpty()) {
                context.append("   M√¥ t·∫£: " + 
                    book.getDescription().substring(0, Math.min(book.getDescription().length(), 150)) + "...\n");
            }
            context.append("\n");
        }
        
        // Build AI prompt
        String prompt = buildAIPrompt(genre, mood, length, complexity, context.toString(), filteredBooks.size());
        
        // Get AI response
        return aiChatService.chat(prompt, null);
    }
    
    /**
     * üéØ Build AI prompt based on user preferences
     */
    private String buildAIPrompt(String genre, String mood, String length, String complexity, String bookContext, int totalFound) {
        StringBuilder prompt = new StringBuilder();
        
        prompt.append("B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n s√°ch th√¥ng minh v√† nhi·ªát t√¨nh. ");
        prompt.append("D·ª±a tr√™n c√°c s·ªü th√≠ch sau c·ªßa ng∆∞·ªùi d√πng:\n\n");
        
        if (genre != null && !genre.trim().isEmpty()) {
            prompt.append("üìö Th·ªÉ lo·∫°i y√™u th√≠ch: " + genre + "\n");
        }
        
        if (mood != null && !mood.trim().isEmpty()) {
            prompt.append("üé≠ T√¢m tr·∫°ng: " + mood + "\n");
        }
        
        if (length != null && !length.trim().isEmpty()) {
            prompt.append("üìè ƒê·ªô d√†i: " + length + "\n");
        }
        
        if (complexity != null && !complexity.trim().isEmpty()) {
            prompt.append("üß© ƒê·ªô ph·ª©c t·∫°p: " + complexity + "\n");
        }
        
        prompt.append("\n");
        prompt.append(bookContext);
        prompt.append("\n");
        prompt.append("H√£y ƒë·ªÅ xu·∫•t 3-5 cu·ªën s√°ch ph√π h·ª£p nh·∫•t t·ª´ danh s√°ch tr√™n v√† gi·∫£i th√≠ch t·∫°i sao ch√∫ng ph√π h·ª£p v·ªõi s·ªü th√≠ch c·ªßa ng∆∞·ªùi d√πng. ");
        prompt.append("ƒê·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi theo d·∫°ng:\n\n");
        prompt.append("üåü **T√äN S√ÅCH**\n");
        prompt.append("üéØ **L√Ω do ph√π h·ª£p:** [Gi·∫£i th√≠ch chi ti·∫øt]\n");
        prompt.append("üìñ **ƒêi·ªÉm n·ªïi b·∫≠t:** [Nh·ªØng g√¨ ƒë·∫∑c bi·ªát]\n\n");
        prompt.append("H√£y vi·∫øt m·ªôt c√°ch h·∫•p d·∫´n v√† thuy·∫øt ph·ª•c ƒë·ªÉ ng∆∞·ªùi d√πng mu·ªën ƒë·ªçc nh·ªØng cu·ªën s√°ch n√†y!");
        
        return prompt.toString();
    }
    
    /**
     * üé® Get genre mapping for better matching
     */
    private Map<String, List<String>> getGenreMapping() {
        Map<String, List<String>> mapping = new HashMap<>();
        
        mapping.put("fantasy", List.of("fantasy", "ma thu·∫≠t", "ph√©p thu·∫≠t", "th·∫ßn tho·∫°i", "huy·ªÅn b√≠"));
        mapping.put("romance", List.of("romance", "l√£ng m·∫°n", "t√¨nh y√™u", "ng√¥n t√¨nh", "romantic"));
        mapping.put("mystery", List.of("mystery", "trinh th√°m", "b√≠ ·∫©n", "detective", "suspense"));
        mapping.put("sci-fi", List.of("sci-fi", "khoa h·ªçc vi·ªÖn t∆∞·ªüng", "science fiction", "c√¥ng ngh·ªá", "t∆∞∆°ng lai"));
        mapping.put("horror", List.of("horror", "kinh d·ªã", "ma qu·ª∑", "r√πng r·ª£n", "scary"));
        mapping.put("adventure", List.of("adventure", "phi√™u l∆∞u", "m·∫°o hi·ªÉm", "exploration", "journey"));
        mapping.put("drama", List.of("drama", "k·ªãch", "bi k·ªãch", "dramatic", "emotional"));
        mapping.put("comedy", List.of("comedy", "h√†i", "vui nh·ªôn", "funny", "humor"));
        mapping.put("self-help", List.of("self-help", "t·ª± l·ª±c", "ph√°t tri·ªÉn b·∫£n th√¢n", "k·ªπ nƒÉng", "motivational"));
        mapping.put("ti·ªÉu thuy·∫øt", List.of("ti·ªÉu thuy·∫øt", "novel", "fiction", "story"));
        
        return mapping;
    }
    
    /**
     * üé≠ Get mood mapping for better matching
     */
    private Map<String, List<String>> getMoodMapping() {
        Map<String, List<String>> mapping = new HashMap<>();
        
        mapping.put("relaxed", List.of("th∆∞ gi√£n", "y√™n b√¨nh", "nh·∫π nh√†ng", "peaceful", "calm"));
        mapping.put("adventurous", List.of("phi√™u l∆∞u", "m·∫°o hi·ªÉm", "h√†nh ƒë·ªông", "exciting", "thrilling"));
        mapping.put("emotional", List.of("c·∫£m x√∫c", "x√∫c ƒë·ªông", "t√¨nh c·∫£m", "emotional", "touching"));
        mapping.put("intellectual", List.of("tr√≠ tu·ªá", "h·ªçc h·ªèi", "suy nghƒ©", "intellectual", "thoughtful"));
        mapping.put("fun", List.of("vui v·∫ª", "h√†i h∆∞·ªõc", "gi·∫£i tr√≠", "funny", "entertaining"));
        
        return mapping;
    }
    
    /**
     * üìè Estimate book length from available data
     */
    private int estimateBookLength(Ebook book) {
        int baseLength = 200; // Default assumption
        
        if (book.getDescription() != null) {
            // Longer descriptions often mean longer books
            int descLength = book.getDescription().length();
            if (descLength > 500) baseLength += 200;
            else if (descLength > 200) baseLength += 100;
        }
        
        // Popular books (more views) might be longer
        if (book.getViewCount() > 100) baseLength += 150;
        else if (book.getViewCount() > 50) baseLength += 75;
        
        return baseLength;
    }
    
    /**
     * üß© Estimate complexity from genre and description
     */
    private int estimateComplexity(Ebook book) {
        int complexity = 5; // Default moderate complexity
        
        if (book.getReleaseType() != null) {
            String genre = book.getReleaseType().toLowerCase();
            
            // Complex genres
            if (genre.contains("sci-fi") || genre.contains("khoa h·ªçc") || 
                genre.contains("philosophy") || genre.contains("trinh th√°m")) {
                complexity += 3;
            }
            // Easy genres
            else if (genre.contains("romance") || genre.contains("comedy") || 
                     genre.contains("h√†i") || genre.contains("vui")) {
                complexity -= 2;
            }
        }
        
        if (book.getDescription() != null) {
            String desc = book.getDescription().toLowerCase();
            
            // Complex themes
            if (desc.contains("ph·ª©c t·∫°p") || desc.contains("tri·∫øt h·ªçc") || 
                desc.contains("s√¢u s·∫Øc") || desc.contains("th√°ch th·ª©c")) {
                complexity += 2;
            }
            // Simple themes
            else if (desc.contains("ƒë∆°n gi·∫£n") || desc.contains("d·ªÖ hi·ªÉu") || 
                     desc.contains("nh·∫π nh√†ng") || desc.contains("vui")) {
                complexity -= 1;
            }
        }
        
        return Math.max(1, Math.min(10, complexity));
    }
    
    /**
     * Escape JSON string ƒë·ªÉ tr√°nh l·ªói syntax
     */
    private String escapeJson(String text) {
        if (text == null) return "";
        return text.replace("\\", "\\\\")
                   .replace("\"", "\\\"")
                   .replace("\n", "\\n")
                   .replace("\r", "\\r")
                   .replace("\t", "\\t")
                   .replace("\b", "\\b")
                   .replace("\f", "\\f");
    }
} 
