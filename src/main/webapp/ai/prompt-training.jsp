<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%
    String ctx = request.getContextPath();
%>
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Prompt Training Lab - EbookWebsite</title>
    <link rel="stylesheet" href="${ctx}/assets/css/style.css">
    <style>
        .training-container {
            max-width: 1200px;
            margin: 20px auto;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 20px;
            color: white;
        }
        
        .training-header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: rgba(255,255,255,0.1);
            border-radius: 15px;
            backdrop-filter: blur(10px);
        }
        
        .training-header h1 {
            margin: 0;
            font-size: 2.2rem;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }
        
        .lab-grid {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .lab-section {
            background: rgba(255,255,255,0.95);
            color: #333;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
        }
        
        .lab-section h3 {
            margin-top: 0;
            color: #667eea;
            border-bottom: 2px solid #667eea;
            padding-bottom: 10px;
        }
        
        .input-group {
            margin-bottom: 15px;
        }
        
        .input-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #555;
        }
        
        .input-group input, .input-group textarea {
            width: 100%;
            padding: 10px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s;
        }
        
        .input-group input:focus, .input-group textarea:focus {
            border-color: #667eea;
            outline: none;
        }
        
        .btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s;
            margin-right: 10px;
            margin-bottom: 10px;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        }
        
        .btn-danger {
            background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
        }
        
        .btn-success {
            background: linear-gradient(135deg, #4ecdc4 0%, #44a08d 100%);
        }
        
        .result-box {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 15px;
            margin-top: 15px;
            font-family: 'Courier New', monospace;
            white-space: pre-wrap;
            max-height: 200px;
            overflow-y: auto;
        }
        
        .result-box.success {
            background: #d4edda;
            border-color: #c3e6cb;
            color: #155724;
        }
        
        .result-box.error {
            background: #f8d7da;
            border-color: #f5c6cb;
            color: #721c24;
        }
        
        .similarity-meter {
            width: 100%;
            height: 20px;
            background: #e9ecef;
            border-radius: 10px;
            overflow: hidden;
            margin: 10px 0;
        }
        
        .similarity-fill {
            height: 100%;
            background: linear-gradient(90deg, #ff6b6b 0%, #ffa500 50%, #4ecdc4 100%);
            transition: width 0.5s ease;
        }
        
        .session-info {
            background: rgba(255,255,255,0.95);
            color: #333;
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
        }
        
        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
        }
        
        .info-item {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #667eea;
        }
        
        .info-item strong {
            color: #667eea;
        }
        
        .advanced-chat {
            grid-column: 1 / -1;
            background: rgba(255,255,255,0.95);
            color: #333;
            padding: 25px;
            border-radius: 15px;
        }
        
        .chat-messages {
            height: 300px;
            overflow-y: auto;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            padding: 15px;
            margin: 15px 0;
            background: #f8f9fa;
        }
        
        .message {
            margin-bottom: 15px;
            padding: 10px 15px;
            border-radius: 10px;
            max-width: 80%;
        }
        
        .message.user {
            background: #667eea;
            color: white;
            margin-left: auto;
        }
        
        .message.ai {
            background: white;
            border: 2px solid #667eea;
            color: #333;
        }
        
        .loading {
            display: none;
            text-align: center;
            color: #667eea;
            font-style: italic;
            padding: 10px;
        }
        
        .feature-badge {
            display: inline-block;
            background: #4ecdc4;
            color: white;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 11px;
            margin: 2px;
        }
    </style>
</head>
<body>
    <%@ include file="/common/header.jsp" %>
    
    <main class="training-container">
        <div class="training-header">
            <h1>üß† Prompt Training Lab</h1>
            <p>Ch√†o m·ª´ng <strong>${userName}</strong> ƒë·∫øn v·ªõi ph√≤ng th√≠ nghi·ªám AI n√¢ng cao!</p>
            <div style="margin-top: 15px;">
                <span class="feature-badge">Vector Similarity</span>
                <span class="feature-badge">Session Memory</span>
                <span class="feature-badge">Prompt Validation</span>
                <span class="feature-badge">Database-only Responses</span>
                <span class="feature-badge">Smart Link Generation</span>
            </div>
        </div>
        
        <!-- Session Information -->
        <div class="session-info">
            <h3>üìä Th√¥ng Tin Session</h3>
            <div class="info-grid">
                <div class="info-item">
                    <strong>User ID:</strong> ${userId}
                </div>
                <div class="info-item">
                    <strong>Session:</strong> <span id="sessionId">Loading...</span>
                </div>
                <div class="info-item">
                    <strong>S√°ch ƒë√£ h·ªèi:</strong> <span id="askedBooks">Loading...</span>
                </div>
                <div class="info-item">
                    <strong>T·ª´ kh√≥a quan t√¢m:</strong> <span id="keywords">Loading...</span>
                </div>
            </div>
            <div style="text-align: center; margin-top: 15px;">
                <button class="btn" onclick="loadSessionInfo()">üîÑ T·∫£i l·∫°i th√¥ng tin</button>
                <button class="btn btn-danger" onclick="clearSession()">üóëÔ∏è X√≥a session</button>
            </div>
        </div>
        
        <div class="lab-grid">
            <!-- Vector Similarity Testing -->
            <div class="lab-section">
                <h3>üîç Test Vector Similarity</h3>
                <div class="input-group">
                    <label>C√¢u h·ªèi 1:</label>
                    <input type="text" id="query1" placeholder="VD: T√¨m s√°ch khoa h·ªçc vi·ªÖn t∆∞·ªüng">
                </div>
                <div class="input-group">
                    <label>C√¢u h·ªèi 2:</label>
                    <input type="text" id="query2" placeholder="VD: S√°ch sci-fi hay">
                </div>
                <button class="btn" onclick="testSimilarity()">üßÆ T√≠nh Similarity</button>
                
                <div id="similarityResult" class="result-box" style="display: none;"></div>
                <div class="similarity-meter" style="display: none;" id="similarityMeter">
                    <div class="similarity-fill" id="similarityFill"></div>
                </div>
            </div>
            
            <!-- Prompt Validation -->
            <div class="lab-section">
                <h3>‚úÖ Validate Prompt Response</h3>
                <div class="input-group">
                    <label>Prompt:</label>
                    <input type="text" id="promptInput" placeholder="VD: T√¨m s√°ch v·ªÅ l·∫≠p tr√¨nh">
                </div>
                <div class="input-group">
                    <label>Response:</label>
                    <textarea id="responseInput" rows="3" placeholder="Nh·∫≠p response ƒë·ªÉ validate..."></textarea>
                </div>
                <button class="btn" onclick="validatePrompt()">üîç Validate</button>
                
                <div id="validationResult" class="result-box" style="display: none;"></div>
            </div>
            
            <!-- Link Generation Testing -->
            <div class="lab-section">
                <h3>üîó Test Link Generation</h3>
                <div style="background: #e8f4fd; padding: 10px; border-radius: 5px; margin-bottom: 15px; font-size: 12px;">
                    <strong>üîó QUY T·∫ÆC G·ª¨I LINK S√ÅCH:</strong><br>
                    ‚úÖ Ch·ªâ g·ª≠i link s√°ch ng∆∞·ªùi d√πng h·ªèi c·ª• th·ªÉ<br>
                    ‚úÖ Tr·∫£ l·ªùi t·ª´ng s√°ch ri√™ng bi·ªát, kh√¥ng g·ªôp link<br>
                    ‚úÖ Kh√¥ng spam ho·∫∑c g·ª≠i link h√†ng lo·∫°t<br>
                    ‚úÖ Max 3 links, ch·∫∑n c√¢u h·ªèi chung
                </div>
                <div class="input-group">
                    <label>User Question:</label>
                    <input type="text" id="linkQuestion" placeholder="VD: T√¨m s√°ch Harry Potter">
                </div>
                <div class="input-group">
                    <label>AI Response:</label>
                    <textarea id="linkResponse" rows="3" placeholder="C√≥ 3 cu·ªën s√°ch Harry Potter trong h·ªá th·ªëng..."></textarea>
                </div>
                <button class="btn" onclick="testLinkGeneration()">üîó Generate Links</button>
                <button class="btn btn-success" onclick="testLinkSample()">üìù Test Sample</button>
                
                <div id="linkResult" class="result-box" style="display: none;"></div>
            </div>
        </div>
        
        <!-- Advanced Chat Section -->
        <div class="advanced-chat">
            <h3>üí¨ Advanced AI Chat v·ªõi Prompt Training</h3>
            <div class="chat-messages" id="chatMessages">
                <div class="message ai">
                    üéØ Xin ch√†o! ƒê√¢y l√† AI Chat v·ªõi Prompt Training ƒë·∫ßy ƒë·ªß:
                    <br>‚Ä¢ ‚úÖ Vector similarity caching (85%+ threshold)
                    <br>‚Ä¢ ‚úÖ Session memory across tabs
                    <br>‚Ä¢ ‚úÖ Database-only responses (kh√¥ng b·ªãa th√™m)
                    <br>‚Ä¢ ‚úÖ Response validation v√† cleaning
                    <br>‚Ä¢ ‚úÖ Smart link generation (anti-spam rules)
                    <br><br>H√£y th·ª≠ h·ªèi t√¥i v·ªÅ s√°ch ƒë·ªÉ xem h·ªá th·ªëng ho·∫°t ƒë·ªông!
                </div>
            </div>
            
            <div class="loading" id="chatLoading">ü§î AI ƒëang x·ª≠ l√Ω v·ªõi prompt training...</div>
            
            <div style="display: flex; gap: 10px; margin-top: 15px;">
                <input type="text" id="chatInput" placeholder="Nh·∫≠p c√¢u h·ªèi ƒë·ªÉ test prompt training..." 
                       style="flex: 1; padding: 12px; border-radius: 8px; border: 2px solid #ddd;">
                <button class="btn" onclick="sendAdvancedChat()">üì§ G·ª≠i</button>
            </div>
            
            <div style="margin-top: 10px; text-align: center;">
                <button class="btn btn-success" onclick="sendSample('T√¨m s√°ch khoa h·ªçc vi·ªÖn t∆∞·ªüng')">üöÄ Test Sci-Fi</button>
                <button class="btn btn-success" onclick="sendSample('S√°ch c·ªßa Nguy·ªÖn Nh·∫≠t √Ånh')">‚úçÔ∏è Test Author</button>
                <button class="btn btn-success" onclick="sendSample('ƒê·ªÅ xu·∫•t s√°ch hay cho t√¥i')">üéØ Test Recommendation</button>
                <button class="btn btn-success" onclick="sendSample('T√¥i mu·ªën ƒë·ªçc s√°ch Harry Potter')">üîó Test Link Gen</button>
            </div>
        </div>
    </main>
    
    <%@ include file="/common/footer.jsp" %>
    
    <script>
        const ctx = '${ctx}';
        
        // Load session info on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadSessionInfo();
        });
        
        // Enter key support
        document.getElementById('chatInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendAdvancedChat();
            }
        });
        
        // Load session information
        function loadSessionInfo() {
            fetch(ctx + '/ai/prompt-training', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: 'api_action=session_info'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById('sessionId').textContent = data.session_id.substring(0, 12) + '...';
                    document.getElementById('askedBooks').textContent = data.asked_books.length + ' cu·ªën';
                    document.getElementById('keywords').textContent = data.keywords.join(', ') || 'Ch∆∞a c√≥';
                } else {
                    console.error('Failed to load session info:', data.error);
                }
            })
            .catch(error => console.error('Error:', error));
        }
        
        // Test vector similarity
        function testSimilarity() {
            const query1 = document.getElementById('query1').value.trim();
            const query2 = document.getElementById('query2').value.trim();
            
            if (!query1 || !query2) {
                alert('Vui l√≤ng nh·∫≠p c·∫£ hai c√¢u h·ªèi');
                return;
            }
            
            fetch(ctx + '/ai/prompt-training', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: 'api_action=test_similarity&query1=' + encodeURIComponent(query1) + '&query2=' + encodeURIComponent(query2)
            })
            .then(response => response.json())
            .then(data => {
                const resultDiv = document.getElementById('similarityResult');
                const meterDiv = document.getElementById('similarityMeter');
                const fillDiv = document.getElementById('similarityFill');
                
                if (data.success) {
                    resultDiv.className = 'result-box success';
                    resultDiv.innerHTML = `
üéØ K·∫øt qu·∫£ Vector Similarity:
‚Ä¢ C√¢u 1: "${data.query1}"
‚Ä¢ C√¢u 2: "${data.query2}"
‚Ä¢ Similarity: ${data.similarity}%
‚Ä¢ Threshold: ${data.threshold}%
‚Ä¢ Should Cache: ${data.should_cache ? '‚úÖ C√ì' : '‚ùå KH√îNG'}
‚Ä¢ Vector 1 size: ${data.vector1_size} terms
‚Ä¢ Vector 2 size: ${data.vector2_size} terms

${data.should_cache ? 'üíæ C√¢u h·ªèi n√†y s·∫Ω ƒë∆∞·ª£c cache ƒë·ªÉ t√°i s·ª≠ d·ª•ng!' : 'üîÑ C√¢u h·ªèi n√†y s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω m·ªõi.'}`;
                    
                    // Update similarity meter
                    fillDiv.style.width = data.similarity + '%';
                    meterDiv.style.display = 'block';
                } else {
                    resultDiv.className = 'result-box error';
                    resultDiv.innerHTML = '‚ùå L·ªói: ' + data.error;
                }
                
                resultDiv.style.display = 'block';
            })
            .catch(error => {
                console.error('Error:', error);
                const resultDiv = document.getElementById('similarityResult');
                resultDiv.className = 'result-box error';
                resultDiv.innerHTML = '‚ùå L·ªói k·∫øt n·ªëi: ' + error.message;
                resultDiv.style.display = 'block';
            });
        }
        
        // Validate prompt response
        function validatePrompt() {
            const prompt = document.getElementById('promptInput').value.trim();
            const response = document.getElementById('responseInput').value.trim();
            
            if (!prompt || !response) {
                alert('Vui l√≤ng nh·∫≠p c·∫£ prompt v√† response');
                return;
            }
            
            fetch(ctx + '/ai/prompt-training', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: 'api_action=validate_prompt&prompt=' + encodeURIComponent(prompt) + '&response=' + encodeURIComponent(response)
            })
            .then(response => response.json())
            .then(data => {
                const resultDiv = document.getElementById('validationResult');
                
                if (data.success) {
                    resultDiv.className = data.is_valid ? 'result-box success' : 'result-box error';
                    resultDiv.innerHTML = `
üîç K·∫øt qu·∫£ Validation:
‚Ä¢ Prompt: "${data.original_prompt}"
‚Ä¢ Valid: ${data.is_valid ? '‚úÖ H·ª¢P L·ªÜ' : '‚ùå KH√îNG H·ª¢P L·ªÜ'}
‚Ä¢ Rules: ${data.validation_rules}

üìù Original Response:
${data.original_response}

‚úÖ Validated Response:
${data.validated_response}`;
                } else {
                    resultDiv.className = 'result-box error';
                    resultDiv.innerHTML = '‚ùå L·ªói: ' + data.error;
                }
                
                resultDiv.style.display = 'block';
            })
            .catch(error => {
                console.error('Error:', error);
                const resultDiv = document.getElementById('validationResult');
                resultDiv.className = 'result-box error';
                resultDiv.innerHTML = '‚ùå L·ªói k·∫øt n·ªëi: ' + error.message;
                resultDiv.style.display = 'block';
            });
        }
        
        // Test link generation v·ªõi quy t·∫Øc nghi√™m ng·∫∑t
        function testLinkGeneration() {
            const question = document.getElementById('linkQuestion').value.trim();
            const response = document.getElementById('linkResponse').value.trim();
            
            if (!question || !response) {
                alert('Vui l√≤ng nh·∫≠p c·∫£ question v√† response');
                return;
            }
            
            fetch(ctx + '/ai/prompt-training', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: 'api_action=test_link_generation&question=' + encodeURIComponent(question) + '&response=' + encodeURIComponent(response)
            })
            .then(response => response.json())
            .then(data => {
                const resultDiv = document.getElementById('linkResult');
                
                if (data.success) {
                    // Ki·ªÉm tra tu√¢n th·ªß quy t·∫Øc
                    const followsRules = checkLinkRules(data, question);
                    resultDiv.className = followsRules.isValid ? 'result-box success' : 'result-box error';
                    
                    let linkDetails = '';
                    if (data.links_details && data.links_details.length > 0) {
                        linkDetails = '\n\nüìö LINKS ƒê∆Ø·ª¢C T·∫†O (T·ª´ng s√°ch ri√™ng bi·ªát):\n';
                        data.links_details.forEach((link, index) => {
                            linkDetails += `\n${index + 1}. üìö **${link.book_title}** - ${link.book_author}\n`;
                            linkDetails += `   [ƒê·ªçc s√°ch](${link.url}) | Type: ${link.link_type}\n`;
                        });
                    } else {
                        linkDetails = '\n\n‚ùå Kh√¥ng c√≥ links (quy t·∫Øc anti-spam ƒë∆∞·ª£c √°p d·ª•ng)';
                    }
                    
                    resultDiv.innerHTML = `
üîó K·∫æT QU·∫¢ KI·ªÇM TRA QUY T·∫ÆC LINK S√ÅCH:

${followsRules.ruleCheck}

üìã Chi ti·∫øt:
‚Ä¢ Question: "${data.original_question}"
‚Ä¢ Links Generated: ${data.links_generated} / ${data.anti_spam_rules.max_links_allowed}
‚Ä¢ Question Type: ${data.metadata.question_type}

üìù Original Response:
${data.original_response.substring(0, 100)}...

üîó Enhanced Response (Format t·ª´ng s√°ch ri√™ng bi·ªát):
${data.enhanced_response}

${linkDetails}

üìä Anti-spam Rules Applied:
‚Ä¢ Max Links: ‚úÖ ${data.anti_spam_rules.max_links_allowed}
‚Ä¢ Duplicate Prevention: ‚úÖ ${data.anti_spam_rules.duplicate_prevention}
‚Ä¢ General Question Filter: ‚úÖ ${data.anti_spam_rules.general_question_filtering}
‚Ä¢ Specific Book Priority: ‚úÖ ${data.anti_spam_rules.specific_book_priority}`;
                } else {
                    resultDiv.className = 'result-box error';
                    resultDiv.innerHTML = '‚ùå L·ªói: ' + data.error;
                }
                
                resultDiv.style.display = 'block';
            })
            .catch(error => {
                console.error('Error:', error);
                const resultDiv = document.getElementById('linkResult');
                resultDiv.className = 'result-box error';
                resultDiv.innerHTML = '‚ùå L·ªói k·∫øt n·ªëi: ' + error.message;
                resultDiv.style.display = 'block';
            });
        }
        
        // Ki·ªÉm tra tu√¢n th·ªß quy t·∫Øc link
        function checkLinkRules(data, question) {
            let ruleCheck = 'üîç KI·ªÇM TRA QUY T·∫ÆC:\n';
            let isValid = true;
            
            // Rule 1: Ch·ªâ g·ª≠i link s√°ch c·ª• th·ªÉ
            const isGeneralQuestion = question.toLowerCase().includes('l√†m th·∫ø n√†o') || 
                                    question.toLowerCase().includes('t·∫°i sao') ||
                                    question.toLowerCase().includes('·ªü ƒë√¢u');
            
            if (isGeneralQuestion && data.links_generated > 0) {
                ruleCheck += '‚ùå RULE 1: G·ª≠i link cho c√¢u h·ªèi chung (KH√îNG H·ª¢P L·ªÜ)\n';
                isValid = false;
            } else if (!isGeneralQuestion && data.links_generated > 0) {
                ruleCheck += '‚úÖ RULE 1: Ch·ªâ g·ª≠i link cho s√°ch ƒë∆∞·ª£c h·ªèi c·ª• th·ªÉ\n';
            } else {
                ruleCheck += '‚úÖ RULE 1: Kh√¥ng g·ª≠i link cho c√¢u h·ªèi chung\n';
            }
            
            // Rule 2: Tr·∫£ l·ªùi t·ª´ng s√°ch ri√™ng bi·ªát
            const hasIndividualFormat = data.enhanced_response.includes('üìö **') && 
                                       data.enhanced_response.includes('[ƒê·ªçc s√°ch]') &&
                                       !data.enhanced_response.includes('üìö **Li√™n k·∫øt s√°ch:**');
            
            if (data.links_generated > 0) {
                if (hasIndividualFormat) {
                    ruleCheck += '‚úÖ RULE 2: Tr·∫£ l·ªùi t·ª´ng s√°ch ri√™ng bi·ªát (Format ƒë√∫ng)\n';
                } else {
                    ruleCheck += '‚ùå RULE 2: G·ªôp links l·∫°i (Format sai)\n';
                    isValid = false;
                }
            } else {
                ruleCheck += '‚ö™ RULE 2: N/A (Kh√¥ng c√≥ links)\n';
            }
            
            // Rule 3: Kh√¥ng spam link
            if (data.links_generated <= 3) {
                ruleCheck += `‚úÖ RULE 3: Kh√¥ng spam link (${data.links_generated}/3 max)\n`;
            } else {
                ruleCheck += `‚ùå RULE 3: Spam link (${data.links_generated}/3 max)\n`;
                isValid = false;
            }
            
            return { isValid, ruleCheck };
        }
        
        // Test v·ªõi sample data
        function testLinkSample() {
            document.getElementById('linkQuestion').value = 'G·ª£i √Ω 2 s√°ch hay cho t√¥i';
            document.getElementById('linkResponse').value = 'D·ª±a tr√™n s·ªü th√≠ch, t√¥i ƒë·ªÅ xu·∫•t: "D·∫ø M√®n Phi√™u L∆∞u K√Ω" c·ªßa T√¥ Ho√†i v√† "T√¥i Th·∫•y Hoa V√†ng Tr√™n C·ªè Xanh" c·ªßa Nguy·ªÖn Nh·∫≠t √Ånh';
            testLinkGeneration();
        }
        
        // Send advanced chat message
        function sendAdvancedChat() {
            const message = document.getElementById('chatInput').value.trim();
            if (!message) return;
            
            // Add user message to chat
            addChatMessage(message, 'user');
            document.getElementById('chatInput').value = '';
            
            // Show loading
            document.getElementById('chatLoading').style.display = 'block';
            
            fetch(ctx + '/ai/prompt-training', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: 'api_action=advanced_chat&message=' + encodeURIComponent(message)
            })
            .then(response => response.json())
            .then(data => {
                document.getElementById('chatLoading').style.display = 'none';
                
                if (data.success) {
                    let aiResponse = data.reply;
                    
                    // Add metadata
                    aiResponse += `
                    
üìä Metadata:
‚Ä¢ Session: ${data.session_id.substring(0, 8)}...
‚Ä¢ Cache Hit Rate: ${data.cache_hit_rate}%
‚Ä¢ Features: ${data.features.join(', ')}
‚Ä¢ Prompt Training: ‚úÖ Enabled`;
                    
                    addChatMessage(aiResponse, 'ai');
                    
                    // Refresh session info
                    loadSessionInfo();
                } else {
                    addChatMessage('‚ùå L·ªói: ' + data.error, 'ai');
                }
            })
            .catch(error => {
                document.getElementById('chatLoading').style.display = 'none';
                addChatMessage('‚ùå L·ªói k·∫øt n·ªëi: ' + error.message, 'ai');
                console.error('Error:', error);
            });
        }
        
        // Add message to chat
        function addChatMessage(text, sender) {
            const chatMessages = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}`;
            messageDiv.innerHTML = text.replace(/\n/g, '<br>');
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        // Send sample message
        function sendSample(message) {
            document.getElementById('chatInput').value = message;
            sendAdvancedChat();
        }
        
        // Clear session
        function clearSession() {
            if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a session memory?')) {
                fetch(ctx + '/ai/prompt-training', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: 'api_action=clear_session'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('‚úÖ ƒê√£ x√≥a session memory th√†nh c√¥ng');
                        loadSessionInfo();
                        
                        // Clear chat messages
                        const chatMessages = document.getElementById('chatMessages');
                        chatMessages.innerHTML = `
                            <div class="message ai">
                                üéØ Session ƒë√£ ƒë∆∞·ª£c reset! T√¥i s·∫Ω b·∫Øt ƒë·∫ßu ghi nh·ªõ l·∫°i t·ª´ ƒë·∫ßu.
                            </div>
                        `;
                    } else {
                        alert('‚ùå L·ªói: ' + data.error);
                    }
                })
                .catch(error => {
                    alert('‚ùå L·ªói k·∫øt n·ªëi: ' + error.message);
                    console.error('Error:', error);
                });
            }
        }
    </script>
</body>
</html>
