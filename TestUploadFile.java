package com.mycompany.ebookwebsite.test;

import com.mycompany.ebookwebsite.service.DropboxUploader;
import com.mycompany.ebookwebsite.service.UploadBookService;
import com.mycompany.ebookwebsite.model.Ebook;
import com.mycompany.ebookwebsite.utils.FileTextExtractor;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.logging.Logger;

/**
 * Test class ƒë·ªÉ ki·ªÉm tra upload file v·ªõi Dropbox integration
 */
public class TestUploadFile {
    
    private static final Logger logger = Logger.getLogger(TestUploadFile.class.getName());
    
    public static void main(String[] args) {
        System.out.println("üöÄ B·∫Øt ƒë·∫ßu test upload file v·ªõi Dropbox...");
        
        try {
            // Test 1: Test DropboxUploader tr·ª±c ti·∫øp
            testDropboxUploader();
            
            // Test 2: Test UploadBookService
            testUploadBookService();
            
            // Test 3: Test FileTextExtractor
            testFileTextExtractor();
            
            System.out.println("‚úÖ T·∫•t c·∫£ test ho√†n th√†nh th√†nh c√¥ng!");
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói trong qu√° tr√¨nh test: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * Test DropboxUploader tr·ª±c ti·∫øp
     */
    private static void testDropboxUploader() throws Exception {
        System.out.println("\nüì§ Test 1: DropboxUploader");
        
        // T·∫°o file test
        String testContent = """
            ƒê√¢y l√† n·ªôi dung test cho file upload.
            
            Ch∆∞∆°ng 1: Kh·ªüi ƒë·∫ßu
            ===================
            
            Trong m·ªôt ng√¥i l√†ng nh·ªè, c√≥ m·ªôt c·∫≠u b√© t√™n Alex. C·∫≠u lu√¥n m∆° ∆∞·ªõc tr·ªü th√†nh 
            m·ªôt ph√°p s∆∞ m·∫°nh m·∫Ω. M·ªói ng√†y, c·∫≠u ƒë·ªÅu luy·ªán t·∫≠p ma thu·∫≠t v·ªõi familiar 
            Luna c·ªßa m√¨nh.
            
            "Luna, h√¥m nay ch√∫ng ta s·∫Ω h·ªçc ph√©p thu·∫≠t m·ªõi!" Alex n√≥i v·ªõi Luna.
            Luna g·∫≠t ƒë·∫ßu v√† ph√°t ra ti·∫øng k√™u nh·ªè.
            
            Ch∆∞∆°ng 2: Th·ª≠ th√°ch ƒë·∫ßu ti√™n
            ============================
            
            M·ªôt ng√†y n·ªç, l√†ng b·ªã t·∫•n c√¥ng b·ªüi m·ªôt con qu√°i v·∫≠t. Alex v√† Luna 
            ph·∫£i s·ª≠ d·ª•ng t·∫•t c·∫£ ki·∫øn th·ª©c ma thu·∫≠t ƒë·ªÉ b·∫£o v·ªá d√¢n l√†ng.
            
            "Luna, ƒë√¢y l√† l√∫c ch√∫ng ta ch·ª©ng minh m√¨nh!" Alex h√©t l√™n.
            
            K·∫øt th√∫c
            ========
            
            Sau tr·∫≠n chi·∫øn, Alex v√† Luna tr·ªü th√†nh anh h√πng c·ªßa l√†ng. H·ªç ti·∫øp t·ª•c 
            h√†nh tr√¨nh h·ªçc h·ªèi v√† b·∫£o v·ªá m·ªçi ng∆∞·ªùi.
            """;
        
        // T·∫°o file test
        Path testFilePath = createTestFile("test_book.txt", testContent);
        System.out.println("‚úÖ ƒê√£ t·∫°o file test: " + testFilePath);
        
        // Test upload l√™n Dropbox
        int userId = 1; // User ID test
        String originalFilename = "Alex v√† Luna - Cu·ªôc phi√™u l∆∞u ma thu·∫≠t.txt";
        
        System.out.println("üì§ ƒêang upload file l√™n Dropbox...");
        DropboxUploader.DropboxUploadResult result = 
            DropboxUploader.uploadFile(testFilePath.toString(), userId, originalFilename);
        
        System.out.println("‚úÖ Upload th√†nh c√¥ng!");
        System.out.println("üìä K·∫øt qu·∫£ upload:");
        System.out.println("   - Dropbox Path: " + result.getDropboxPath());
        System.out.println("   - File ID: " + result.getFileId());
        System.out.println("   - Shared Link: " + result.getSharedLink());
        System.out.println("   - File Size: " + result.getFileSize() + " bytes");
        System.out.println("   - File Name: " + result.getFileName());
        
        // X√≥a file test
        Files.deleteIfExists(testFilePath);
        System.out.println("üóëÔ∏è ƒê√£ x√≥a file test t·∫°m");
    }
    
    /**
     * Test UploadBookService
     */
    private static void testUploadBookService() throws Exception {
        System.out.println("\nüìö Test 2: UploadBookService");
        
        // T·∫°o file test
        String testContent = """
            Truy·ªán ng·∫Øn test
            ================
            
            ƒê√¢y l√† m·ªôt truy·ªán ng·∫Øn ƒë·ªÉ test upload service.
            
            Nh√¢n v·∫≠t ch√≠nh: Minh Anh
            Th·ªÉ lo·∫°i: Ng√¥n t√¨nh
            
            Ch∆∞∆°ng 1: G·∫∑p g·ª°
            =================
            
            Minh Anh l√† m·ªôt c√¥ g√°i tr·∫ª, xinh ƒë·∫πp v√† th√¥ng minh. C√¥ l√†m vi·ªác t·∫°i 
            m·ªôt c√¥ng ty l·ªõn v√† c√≥ cu·ªôc s·ªëng kh√° ·ªïn ƒë·ªãnh.
            
            M·ªôt ng√†y n·ªç, c√¥ g·∫∑p ƒë∆∞·ª£c anh ch√†ng CEO tr·∫ª tu·ªïi t√™n Tr·∫ßn Minh. 
            Anh ta ƒë·∫πp trai, t√†i gi·ªèi v√† r·∫•t l·ªãch l√£m.
            
            "Xin ch√†o, t√¥i l√† Tr·∫ßn Minh." Anh ta n√≥i v·ªõi gi·ªçng ·∫•m √°p.
            "Ch√†o anh, t√¥i l√† Minh Anh." C√¥ ƒë√°p l·∫°i v·ªõi n·ª• c∆∞·ªùi r·∫°ng r·ª°.
            
            Ch∆∞∆°ng 2: T√¨nh y√™u n·∫£y n·ªü
            ==========================
            
            Sau nhi·ªÅu l·∫ßn g·∫∑p g·ª°, t√¨nh c·∫£m gi·ªØa hai ng∆∞·ªùi d·∫ßn n·∫£y n·ªü. H·ªç 
            b·∫Øt ƒë·∫ßu h·∫πn h√≤ v√† t√¨m hi·ªÉu nhau nhi·ªÅu h∆°n.
            
            "Anh c√≥ th√≠ch t√¥i kh√¥ng?" Minh Anh h·ªèi m·ªôt c√°ch ng√¢y th∆°.
            "C√≥, anh r·∫•t th√≠ch em." Tr·∫ßn Minh tr·∫£ l·ªùi ch√¢n th√†nh.
            
            K·∫øt th√∫c c√≥ h·∫≠u
            =================
            
            Cu·ªëi c√πng, h·ªç ƒë√£ k·∫øt h√¥n v√† s·ªëng h·∫°nh ph√∫c b√™n nhau. C√¢u chuy·ªán 
            t√¨nh y√™u ƒë·∫πp ƒë·∫Ω c·ªßa h·ªç tr·ªü th√†nh giai tho·∫°i trong c√¥ng ty.
            """;
        
        // T·∫°o file test
        Path testFilePath = createTestFile("test_romance.txt", testContent);
        System.out.println("‚úÖ ƒê√£ t·∫°o file test: " + testFilePath);
        
        // Test UploadBookService
        UploadBookService uploadService = new UploadBookService();
        
        // T·∫°o mock Part object (trong th·ª±c t·∫ø s·∫Ω t·ª´ HTTP request)
        MockPart mockPart = new MockPart("file", "test_romance.txt", testFilePath);
        
        System.out.println("üì§ ƒêang test upload book service...");
        UploadBookService.UploadResult result = uploadService.uploadBook(
            mockPart, 
            1, // userId
            "T√¨nh y√™u v√† nh·ªØng b√≠ m·∫≠t", 
            "T√°c gi·∫£ Test", 
            "Truy·ªán ng√¥n t√¨nh test upload"
        );
        
        if (result.isSuccess()) {
            System.out.println("‚úÖ Upload book service th√†nh c√¥ng!");
            Ebook ebook = result.getEbook();
            System.out.println("üìä Th√¥ng tin ebook:");
            System.out.println("   - ID: " + ebook.getId());
            System.out.println("   - Title: " + ebook.getTitle());
            System.out.println("   - Author: " + ebook.getAuthor());
            System.out.println("   - File Name: " + ebook.getFileName());
            System.out.println("   - File Size: " + ebook.getFileSize());
            System.out.println("   - Dropbox Link: " + ebook.getDropboxLink());
            System.out.println("   - Content Length: " + (ebook.getContent() != null ? ebook.getContent().length() : 0) + " chars");
        } else {
            System.out.println("‚ùå Upload book service th·∫•t b·∫°i: " + result.getMessage());
        }
        
        // X√≥a file test
        Files.deleteIfExists(testFilePath);
        System.out.println("üóëÔ∏è ƒê√£ x√≥a file test t·∫°m");
    }
    
    /**
     * Test FileTextExtractor
     */
    private static void testFileTextExtractor() throws Exception {
        System.out.println("\nüìÑ Test 3: FileTextExtractor");
        
        // T·∫°o file test v·ªõi n·ªôi dung ph·ª©c t·∫°p
        String testContent = """
            Truy·ªán ki·∫øm hi·ªáp test
            ====================
            
            Ch∆∞∆°ng 1: Kh·ªüi ƒë·∫ßu tu luy·ªán
            ===========================
            
            L√Ω Minh l√† m·ªôt thi·∫øu ni√™n 16 tu·ªïi, s·ªëng t·∫°i ng√¥i l√†ng nh·ªè b√™n s√¥ng. 
            C·∫≠u lu√¥n m∆° ∆∞·ªõc tr·ªü th√†nh m·ªôt ki·∫øm kh√°ch m·∫°nh m·∫Ω.
            
            "H√¥m nay ta s·∫Ω b·∫Øt ƒë·∫ßu tu luy·ªán!" L√Ω Minh t·ª± nh·ªß.
            
            Ch∆∞∆°ng 2: G·∫∑p s∆∞ ph·ª•
            ======================
            
            Trong m·ªôt l·∫ßn ƒëi sƒÉn, L√Ω Minh g·∫∑p ƒë∆∞·ª£c m·ªôt l√£o ki·∫øm kh√°ch b·ªã th∆∞∆°ng. 
            C·∫≠u ƒë√£ c·ª©u l√£o v√† ƒë∆∞·ª£c nh·∫≠n l√†m ƒë·ªá t·ª≠.
            
            "Ng∆∞∆°i c√≥ t√¢m t√≠nh t·ªët, ta s·∫Ω truy·ªÅn th·ª• v√µ c√¥ng cho ng∆∞∆°i." L√£o ki·∫øm kh√°ch n√≥i.
            
            Ch∆∞∆°ng 3: Tu luy·ªán gian kh·ªï
            ============================
            
            M·ªói ng√†y, L√Ω Minh ph·∫£i luy·ªán ki·∫øm t·ª´ s√°ng s·ªõm ƒë·∫øn t·ªëi m·ªãt. 
            C·∫≠u ph·∫£i h·ªçc c√°c chi√™u th·ª©c c∆° b·∫£n v√† n√¢ng cao.
            
            "Ki√™n tr√¨ l√† ch√¨a kh√≥a c·ªßa th√†nh c√¥ng!" S∆∞ ph·ª• d·∫°y.
            
            Ch∆∞∆°ng 4: Th·ª≠ th√°ch ƒë·∫ßu ti√™n
            =============================
            
            Sau 3 nƒÉm tu luy·ªán, L√Ω Minh ƒë√£ tr·ªü th√†nh m·ªôt ki·∫øm kh√°ch c√≥ ti·∫øng. 
            C·∫≠u ph·∫£i ƒë·ªëi m·∫∑t v·ªõi th·ª≠ th√°ch ƒë·∫ßu ti√™n - b·∫£o v·ªá l√†ng kh·ªèi b·ªçn c∆∞·ªõp.
            
            "ƒê√¢y l√† l√∫c ch·ª©ng minh t√†i nƒÉng!" L√Ω Minh h√©t l√™n.
            
            K·∫øt th√∫c
            ========
            
            L√Ω Minh ƒë√£ th√†nh c√¥ng b·∫£o v·ªá l√†ng v√† tr·ªü th√†nh anh h√πng. 
            C·∫≠u ti·∫øp t·ª•c h√†nh tr√¨nh tu luy·ªán ƒë·ªÉ tr·ªü n√™n m·∫°nh m·∫Ω h∆°n.
            """;
        
        // T·∫°o file test
        Path testFilePath = createTestFile("test_wuxia.txt", testContent);
        System.out.println("‚úÖ ƒê√£ t·∫°o file test: " + testFilePath);
        
        // Test FileTextExtractor
        FileTextExtractor extractor = new FileTextExtractor();
        String extractedContent = extractor.extractText(testFilePath.toString());
        
        System.out.println("‚úÖ Tr√≠ch xu·∫•t n·ªôi dung th√†nh c√¥ng!");
        System.out.println("üìä Th·ªëng k√™ n·ªôi dung:");
        System.out.println("   - ƒê·ªô d√†i g·ªëc: " + testContent.length() + " chars");
        System.out.println("   - ƒê·ªô d√†i tr√≠ch xu·∫•t: " + extractedContent.length() + " chars");
        System.out.println("   - S·ªë t·ª´ g·ªëc: " + testContent.split("\\s+").length + " words");
        System.out.println("   - S·ªë t·ª´ tr√≠ch xu·∫•t: " + extractedContent.split("\\s+").length + " words");
        
        // Ki·ªÉm tra n·ªôi dung c√≥ ƒë∆∞·ª£c tr√≠ch xu·∫•t ƒë√∫ng kh√¥ng
        if (extractedContent.contains("L√Ω Minh") && extractedContent.contains("ki·∫øm kh√°ch")) {
            System.out.println("‚úÖ N·ªôi dung ƒë∆∞·ª£c tr√≠ch xu·∫•t ch√≠nh x√°c!");
        } else {
            System.out.println("‚ö†Ô∏è N·ªôi dung tr√≠ch xu·∫•t c√≥ th·ªÉ c√≥ v·∫•n ƒë·ªÅ");
        }
        
        // X√≥a file test
        Files.deleteIfExists(testFilePath);
        System.out.println("üóëÔ∏è ƒê√£ x√≥a file test t·∫°m");
    }
    
    /**
     * T·∫°o file test
     */
    private static Path createTestFile(String filename, String content) throws Exception {
        Path testDir = Paths.get("test_files");
        if (!Files.exists(testDir)) {
            Files.createDirectories(testDir);
        }
        
        Path testFile = testDir.resolve(filename);
        Files.write(testFile, content.getBytes("UTF-8"));
        return testFile;
    }
    
    /**
     * Mock Part class ƒë·ªÉ test UploadBookService
     */
    private static class MockPart implements jakarta.servlet.http.Part {
        private final String name;
        private final String fileName;
        private final Path filePath;
        
        public MockPart(String name, String fileName, Path filePath) {
            this.name = name;
            this.fileName = fileName;
            this.filePath = filePath;
        }
        
        @Override
        public String getName() { return name; }
        
        @Override
        public String getSubmittedFileName() { return fileName; }
        
        @Override
        public long getSize() { 
            try {
                return Files.size(filePath);
            } catch (Exception e) {
                return 0;
            }
        }
        
        @Override
        public java.io.InputStream getInputStream() throws java.io.IOException {
            return Files.newInputStream(filePath);
        }
        
        // Implement c√°c method kh√°c c·ªßa Part interface
        @Override
        public void write(String fileName) throws java.io.IOException {}
        
        @Override
        public void delete() throws java.io.IOException {}
        
        @Override
        public String getHeader(String name) { return null; }
        
        @Override
        public java.util.Collection<String> getHeaders(String name) { return null; }
        
        @Override
        public java.util.Collection<String> getHeaderNames() { return null; }
        
        @Override
        public String getContentType() { return "text/plain"; }
        
        @Override
        public java.util.Collection<String> getParameterNames() { return null; }
        
        @Override
        public String[] getParameterValues(String name) { return null; }
        
        @Override
        public java.util.Map<String, String[]> getParameterMap() { return null; }
        
        @Override
        public String getPartName() { return name; }
        
        @Override
        public java.io.InputStream getInputStream() throws java.io.IOException {
            return Files.newInputStream(filePath);
        }
    }
} 